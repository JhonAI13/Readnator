
=== DIRETÓRIO: Sprints ===


=== DIRETÓRIO: Sprints\Ex ===

--- ARQUIVO: Sprints\Ex\Coorte.ipynb (sem output) ---
{
  "cells": [
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        "# Exercício Prático de Análise de Coorte em Python\n",
        "\n",
        "Este notebook irá guiá-lo através de um exercício simples para criar uma tabela de coorte usando Python e a biblioteca Pandas. O objetivo é entender como agrupar usuários por sua primeira ação (neste caso, a primeira compra) e analisar seu comportamento ao longo do tempo.\n",
        "\n",
        "**Passos que iremos seguir:**\n",
        "1. **Criar Dados de Exemplo:** Vamos gerar um DataFrame simples com dados de pedidos.\n",
        "2. **Identificar a Data da Primeira Compra:** Para cada cliente, encontraremos a data do seu primeiro pedido.\n",
        "3. **Criar Coortes Mensais:** Agrupar os clientes pelo mês da sua primeira compra.\n",
        "4. **Analisar o Comportamento da Coorte:** Contar o número de clientes ativos em cada mês para cada coorte.\n",
        "5. **Criar a Tabela de Coorte:** Usar uma tabela dinâmica para visualizar a retenção de clientes por coorte."
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        "## 1. Criar Dados de Exemplo\n",
        "\n",
        "Vamos criar um DataFrame Pandas simulando dados de pedidos online. Este DataFrame terá as seguintes colunas:\n",
        "- `order_date`: Data do pedido.\n",
        "- `customer_id`: ID do cliente.\n",
        "- `revenue`: Valor do pedido."
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {},
      "outputs": [],
      "source": [
        "import pandas as pd\n",
        "\n",
        "# Criando um dicionário com dados de exemplo\n",
        "data = {\n",
        "    'order_date': pd.to_datetime(['2023-01-15', '2023-01-20', '2023-02-05', '2023-02-10', '2023-01-25', '2023-02-15', '2023-03-01', '2023-03-10', '2023-03-20', '2023-03-25'] * 3),\n",
        "    'customer_id': [1, 1, 2, 2, 3, 3, 4, 4, 5, 5] * 3,\n",
        "    'revenue': [50, 60, 70, 80, 90, 100, 110, 120, 130, 140] * 3\n",
        "}\n",
        "\n",
        "# Criando o DataFrame\n",
        "orders = pd.DataFrame(data)\n",
        "\n",
        "print(orders.head())"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        "## 2. Identificar a Data da Primeira Compra\n",
        "\n",
        "Agora, vamos encontrar a data do primeiro pedido para cada cliente. Usaremos `groupby()` por `customer_id` e `.min()` na coluna `order_date`."
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {},
      "outputs": [],
      "source": [
        "# Encontrando a data do primeiro pedido para cada cliente\n",
        "first_order_date_by_customers = orders.groupby('customer_id')['order_date'].min()\n",
        "\n",
        "# Renomeando a Series para facilitar o merge\n",
        "first_order_date_by_customers.name = 'first_order_date'\n",
        "\n",
        "print(first_order_date_by_customers)"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        "## 3. Criar Coortes Mensais\n",
        "\n",
        "Vamos juntar a data do primeiro pedido de volta ao DataFrame `orders` e criar colunas para o mês do pedido e o mês da primeira compra para definir nossas coortes."
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {},
      "outputs": [],
      "source": [
        "# Juntando a data do primeiro pedido ao DataFrame original\n",
        "orders = orders.join(first_order_date_by_customers, on='customer_id')\n",
        "\n",
        "# Criando colunas para o mês do pedido e o mês da primeira compra\n",
        "orders['order_month'] = orders['order_date'].dt.to_period('M')\n",
        "orders['first_order_month'] = orders['first_order_date'].dt.to_period('M')\n",
        "\n",
        "print(orders.head())"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        "## 4. Analisar o Comportamento da Coorte\n",
        "\n",
        "Agora, vamos agrupar os dados por coorte (mês da primeira compra) e mês do pedido para contar o número de clientes únicos em cada grupo."
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {},
      "outputs": [],
      "source": [
        "# Agrupando por coorte e mês do pedido e contando clientes únicos\n",
        "cohort_analysis = orders.groupby(['first_order_month', 'order_month']).agg({'customer_id': 'nunique'}).reset_index()\n",
        "\n",
        "print(cohort_analysis)"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        "## 5. Criar a Tabela de Coorte\n",
        "\n",
        "Finalmente, vamos usar `pivot_table` para formatar nossos resultados em uma tabela de coorte, onde as linhas representam as coortes (mês da primeira compra) e as colunas representam os meses subsequentes."
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {},
      "outputs": [],
      "source": [
        "# Criando a tabela dinâmica de coorte\n",
        "cohort_pivot = cohort_analysis.pivot_table(index='first_order_month', columns='order_month', values='customer_id')\n",
        "\n",
        "print(cohort_pivot)"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        "## Exercício Adicional\n",
        "\n",
        "**Tarefa:** Modifique o código para calcular a receita total por coorte e mês do pedido, em vez de contar o número de clientes únicos. Crie uma nova tabela dinâmica que mostre a receita total por coorte ao longo do tempo.\n",
        "\n",
        "**Dica:** Em vez de usar `'customer_id': 'nunique'` na função `agg()`, use `'revenue': 'sum'`. Ajuste também a função `pivot_table` para usar os valores de receita."
      ]
    }
  ],
  "metadata": {
    "kernelspec": {
      "display_name": "Python 3",
      "language": "python",
      "name": "python3"
    },
    "language_info": {
      "codemirror_mode": {
        "name": "ipython",
        "version": 3
      },
      "file_extension": ".py",
      "mimetype": "text/x-python",
      "name": "python",
      "nbconvert_exporter": "python",
      "pygments_lexer": "ipython3",
      "version": "3.12.5"
    }
  },
  "nbformat": 4,
  "nbformat_minor": 4
}

--- ARQUIVO: Sprints\Ex\groupby.ipynb (sem output) ---
{
  "cells": [
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {},
      "outputs": [],
      "source": [
        "import pandas as pd\n",
        "import numpy as np\n",
        "\n",
        "data = {\n",
        "    'cliente': ['Ana', 'Bruno', 'Carlos', 'Ana', 'Carlos', 'Bruno', 'Ana', 'Bruno', 'Carlos', 'Ana'],\n",
        "    'categoria': ['A', 'B', 'A', 'B', 'B', 'A', 'A', 'B', 'A', 'B'],\n",
        "    'valor_compra': [200, 150, 300, 100, 250, 400, 500, 350, 600, 50],\n",
        "    'data_compra': pd.date_range(start='2024-01-01', periods=10, freq='D')\n",
        "}\n",
        "\n",
        "df = pd.DataFrame(data)\n",
        "df\n"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        "Agrupe o total gasto por cada cliente.\n",
        "\n",
        "Calcule quantas compras cada cliente realizou.\n",
        "\n",
        "Agrupe o total gasto por categoria de produto.\n",
        "\n",
        "Calcule o valor médio das compras para cada cliente.\n",
        "\n",
        "Identifique a compra mais cara e a compra mais barata de cada cliente.\n",
        "\n",
        "Determine o primeiro e o último dia de compra de cada cliente.\n",
        "\n",
        "Crie uma nova coluna no DataFrame que indique o total de compras realizadas por cada cliente."
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {},
      "outputs": [],
      "source": [
        "# Agrupe o total gasto por cada cliente.\n",
        "df.groupby('cliente')['valor_compra'].sum().to_frame()\n"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {},
      "outputs": [],
      "source": [
        "# Calcule quantas compras cada cliente realizou.\n",
        "df.groupby('cliente')['cliente'].value_counts()\n",
        "df['cliente'].value_counts()"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {},
      "outputs": [],
      "source": [
        "# Agrupe o total gasto por categoria de produto.\n",
        "df.groupby('categoria')['valor_compra'].sum()"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {},
      "outputs": [],
      "source": [
        "# Calcule o valor médio das compras para cada cliente.\n",
        "df.groupby('cliente')['valor_compra'].mean()"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {},
      "outputs": [],
      "source": [
        "# Identifique a compra mais cara e a compra mais barata de cada cliente.\n",
        "df.groupby('cliente')['valor_compra'].agg(valor_max='max', valor_min='min')\n",
        "\n"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {},
      "outputs": [],
      "source": [
        "# Determine o primeiro e o último dia de compra de cada cliente.\n",
        "df.groupby('cliente')['data_compra'].agg(data_max='max', data_min='min')"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {},
      "outputs": [],
      "source": [
        "# Crie uma nova coluna no DataFrame que indique o total de compras realizadas por cada cliente.\n",
        "agrupado = df.groupby('cliente')['valor_compra'].sum()\n",
        "pd.merge(df, agrupado, on='cliente')"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {},
      "outputs": [],
      "source": [
        "# Criando dados fictícios\n",
        "np.random.seed(42)\n",
        "\n",
        "clientes = ['Ana', 'Bruno', 'Carlos', 'Daniela', 'Eduardo', 'Fernanda', 'Gabriel', 'Helena', 'Isabela', 'João']\n",
        "categorias = ['A', 'B', 'C', 'D']\n",
        "datas = pd.date_range(start='2023-01-01', periods=100, freq='D')\n",
        "\n",
        "data = {\n",
        "    'cliente': np.random.choice(clientes, 100),\n",
        "    'categoria': np.random.choice(categorias, 100),\n",
        "    'valor_compra': np.random.randint(50, 1000, 100),\n",
        "    'data_compra': np.random.choice(datas, 100)\n",
        "}\n",
        "\n",
        "df = pd.DataFrame(data)\n",
        "\n",
        "# Exibir as primeiras linhas do DataFrame\n",
        "df\n"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        "1️⃣ Agrupe o total gasto por cada cliente.\n",
        "\n",
        "2️⃣ Conte quantas compras cada cliente realizou.\n",
        "\n",
        "3️⃣ Encontre a média de gastos por categoria de produto.\n",
        "\n",
        "4️⃣ Descubra o maior e o menor valor de compra para cada cliente.\n",
        "\n",
        "5️⃣ Descubra quantos clientes únicos compraram em cada categoria.\n",
        "\n",
        "6️⃣ Encontre o mês com maior volume de compras.\n",
        "\n",
        "7️⃣ Calcule o ticket médio das compras de cada cliente.\n",
        "\n",
        "8️⃣ Descubra quantos clientes compraram mais de 10 vezes.\n",
        "\n",
        "9️⃣ Para cada cliente, descubra a data da primeira e da última compra.\n",
        "\n",
        "🔟 Adicione uma nova coluna ao df que indique o total de compras feitas por cada cliente."
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {},
      "outputs": [],
      "source": [
        "# 1️⃣ Agrupe o total gasto por cada cliente.\n",
        "df.groupby('cliente')['valor_compra'].sum()"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {},
      "outputs": [],
      "source": [
        "# 2️⃣ Conte quantas compras cada cliente realizou.\n",
        "df.groupby('cliente')['cliente'].value_counts()"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {},
      "outputs": [],
      "source": [
        "# 3️⃣ Encontre a média de gastos por categoria de produto.\n",
        "df.groupby('categoria')['valor_compra'].mean()"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {},
      "outputs": [],
      "source": [
        "# 4️⃣ Descubra o maior e o menor valor de compra para cada cliente.\n",
        "df.groupby('cliente')['valor_compra'].agg(valor_min = 'min', valor_max = 'max')"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {},
      "outputs": [],
      "source": [
        "# 5️⃣ Descubra quantos clientes únicos compraram em cada categoria."
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {},
      "outputs": [],
      "source": [
        "# 6️⃣ Encontre o mês com maior volume de compras.\n",
        "df1 = df\n",
        "df1['mes'] = df1['data_compra'].dt.month \n",
        "df1.groupby('mes')['valor_compra'].sum().head(1)"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {},
      "outputs": [],
      "source": [
        "# 7️⃣ Calcule o ticket médio das compras de cada cliente.\n",
        "df.groupby('cliente')['valor_compra'].mean()"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {},
      "outputs": [],
      "source": [
        "# 8️⃣ Descubra quantos clientes compraram mais de 10 vezes.\n",
        "df.groupby('cliente')['cliente'].value_counts()[df.groupby('cliente')['cliente'].value_counts() > 10]"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {},
      "outputs": [],
      "source": [
        "# 9️⃣ Para cada cliente, descubra a data da primeira e da última compra.\n",
        "df.groupby('cliente')['data_compra'].agg(primeira_compra= 'min', ultima_compra = 'max')"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {},
      "outputs": [],
      "source": [
        "# 🔟 Adicione uma nova coluna ao df que indique o total de compras feitas por cada cliente.\n",
        "df1 = df\n",
        "a = df.groupby('cliente')['valor_compra'].sum()\n",
        "pd.merge(a, df, on='cliente')"
      ]
    }
  ],
  "metadata": {
    "kernelspec": {
      "display_name": "Python 3",
      "language": "python",
      "name": "python3"
    },
    "language_info": {
      "codemirror_mode": {
        "name": "ipython",
        "version": 3
      },
      "file_extension": ".py",
      "mimetype": "text/x-python",
      "name": "python",
      "nbconvert_exporter": "python",
      "pygments_lexer": "ipython3",
      "version": "3.12.5"
    },
    "toc": {
      "base_numbering": 1,
      "nav_menu": {},
      "number_sections": true,
      "sideBar": true,
      "skip_h1_title": true,
      "title_cell": "Table of Contents",
      "title_sidebar": "Contents",
      "toc_cell": false,
      "toc_position": {},
      "toc_section_display": true,
      "toc_window_display": false
    }
  },
  "nbformat": 4,
  "nbformat_minor": 2
}

--- ARQUIVO: Sprints\Ex\plotly.ipynb (sem output) ---
{
  "cells": [
    {
      "cell_type": "code",
      "execution_count": null,
      "id": "dfdd3e16",
      "metadata": {},
      "outputs": [],
      "source": [
        "import plotly.express as px\n",
        "data = px.data.election()\n",
        "data_joly = data[data['winner'] == 'Joly']\n",
        "data_joly"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "id": "2d251fca",
      "metadata": {},
      "outputs": [],
      "source": [
        "\n",
        "fig = px.bar(data_joly, x='district', y='Coderre', color='result', title='Resultados de Coderre por distrito')\n",
        "fig.update_xaxes(tickangle=45)\n",
        "fig.show()"
      ]
    },
    {
      "cell_type": "markdown",
      "id": "7fe52bc2",
      "metadata": {},
      "source": [
        "Estudo autônomo\n",
        "Construa o gráfico de pizza da lição.\n",
        "Dê um nome para ele.\n",
        "Dados para mais um mês acabaram de chegar:\n",
        "O local 2 construiu um novo salão e expandiu seu menu, pelo que o número de pedidos aumentou 30% desde o último mês.\n",
        "O restaurante principal foi fechado por duas semanas para uma inspeção feita pelo Ministério da Saúde. O número de pedidos caiu 50% desde o último mês.\n",
        "O local 3 viu um pequeno aumento nos pedidos—só 3%.\n",
        "O número de pedidos para os locais 1 e 4 ficou mais ou menos na mesma: 18.650 e 15.100 pedidos, respectivamente.\n",
        "Construa um gráfico de pizza com esses novos dados."
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "id": "cc85c492",
      "metadata": {},
      "outputs": [],
      "source": [
        "from plotly import graph_objects as go\n",
        "\n",
        "name_rest = ['Local 1', 'Local 2', 'Local 3', 'Local 4', 'Principal']\n",
        "values = [18538, 12098, 8353, 15043, 23450]\n",
        "values[1] = values[1] * 1.3\n",
        "values[-1] = values[-1] * 0.5\n",
        "values[2] = values[2] * 1.03\n",
        "values[0] = 18650\n",
        "values[-2] = 15100\n",
        "\n",
        "fig = go.Figure(data=[go.Pie(labels=name_rest, values=values)])\n",
        "fig.show()"
      ]
    },
    {
      "cell_type": "markdown",
      "id": "2bf841e2",
      "metadata": {},
      "source": [
        "Estudo autônomo\n",
        "Agora, você pode pedir comida do restaurante online. A propaganda trouxe 30.000 visitantes ao site, e 19.589 usuários adicionaram um produto ao seu carrinho. De todos os nossos usuários, 14.694 começaram o processo de checkout. A janela da ordem de pagamento recebeu 12.586 visitantes, 0% deles acabaram clicando no botão Pedido Completo abaixo.\n",
        "\n",
        "Construa um funil e crie suas próprias hipóteses sobre onde pode estar o problema."
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "id": "95a56772",
      "metadata": {},
      "outputs": [],
      "source": [
        "from plotly import graph_objects as go\n",
        "\n",
        "fig = go.Figure(go.Funnel(\n",
        "    y = [\"Visitantes\", \"Adicionaram ao carrinho\", \"Iniciaram check-out\", \"Janela de pagamento\", \"Pedido Completo\"],\n",
        "    x = [30000, 19589, 14694, 12586, 0],\n",
        "    textinfo = \"value+percent initial\"\n",
        "))\n",
        "\n",
        "fig.update_layout(\n",
        "    title=\"Funil de Conversão - Pedidos de Comida Online\",\n",
        "    funnelmode=\"stack\"\n",
        ")\n",
        "\n",
        "fig.show()"
      ]
    }
  ],
  "metadata": {
    "kernelspec": {
      "display_name": "Python 3",
      "language": "python",
      "name": "python3"
    },
    "language_info": {
      "codemirror_mode": {
        "name": "ipython",
        "version": 3
      },
      "file_extension": ".py",
      "mimetype": "text/x-python",
      "name": "python",
      "nbconvert_exporter": "python",
      "pygments_lexer": "ipython3",
      "version": "3.12.5"
    }
  },
  "nbformat": 4,
  "nbformat_minor": 5
}

--- ARQUIVO: Sprints\README.md ---
# Repositório Sprints - Projetos de Análise de Dados

Este repositório contém uma coleção de Jupyter Notebooks (`.ipynb`) e arquivos de dados correspondentes, organizados em sprints de análise de dados. Cada sprint é dedicado a um projeto específico, abrangendo diversas etapas do processo de análise, desde a limpeza e preparação dos dados até a análise exploratória (AED) e testes de hipóteses estatísticas.

## Estrutura do Repositório

O repositório está organizado nos seguintes diretórios:

*   **`Sprints`**: Diretório raiz contendo este arquivo `README.md` e subdiretórios para cada sprint.
    *   **`sprint 1`**: Avaliação e preparação de dados de clientes de e-commerce. Sprint introdutório com foco em qualidade e limpeza de dados.
        *   `sprint 1.ipynb`: Notebook focado na limpeza e preparação de dados de e-commerce.
    *   **`sprint 2`**: Análise de dados de um serviço de streaming de música. Projeto sobre pré-processamento de dados musicais e teste de hipóteses sobre preferências musicais entre cidades.
        *   `20c53b4a-81d8-4d18-bc38-d36d30ae6fba (1).ipynb`: Notebook para análise do serviço de música.
    *   **`sprint 3`**: Análise de dados de pedidos da Instacart. Projeto com foco em visão geral dos dados, tratamento de duplicatas e valores ausentes, e AED de dados de supermercado online.
        *   `078eb029-d762-4f21-8c07-bfb555d6a3e9.ipynb`: Notebook para análise de pedidos da Instacart.
        *   `datasets`: Subdiretório contendo os datasets utilizados.
    *   **`sprint 4`**: Análise de planos de telecomunicações da Megaline. Projeto que explora pré-processamento, agregação de dados, análise de comportamento de usuários de planos de telefonia e testes de hipóteses para comparar planos.
        *   `081db06e-c3f8-43e6-91d6-7c1394cf7880 (1).ipynb`: Notebook para análise de planos de telecomunicações.
        *   `sprint4.ipynb`: Notebook adicional para análise de planos de telecomunicações.
        *   `tables`: Subdiretório contendo os datasets utilizados.
    *   **`sprint 6`**: Análise de dados de vendas de videogames. Projeto com foco em limpeza de dados, AED de vendas por plataforma, gênero e região, análise de correlação e testes de hipóteses relacionados a vendas de jogos.
        *   `Analysis.ipynb`: Notebook principal para análise de vendas de videogames.
        *   `Analysis_0.1.ipynb`: Notebook adicional para análise de vendas de videogames.
        *   `data`: Subdiretório contendo os datasets utilizados.
    *   **`Sprint 7`**: Análise de dados de corridas de táxi em Chicago. Foco em AED, visualização de dados e testes de hipóteses relacionados a empresas de táxi e bairros da cidade.
        *   `Analysis_0.1.ipynb`: Notebook principal para análise de dados de táxi.
        *   `data`: Subdiretório contendo os datasets utilizados.
## Executando os Notebooks

Para executar os notebooks Jupyter neste repositório, você precisa ter um ambiente Jupyter configurado. As seguintes opções são recomendadas:

*   **Jupyter Notebook** ou **JupyterLab**: Instalações clássicas do Jupyter, ideais para execução local.
*   **VS Code com Extensão Python**: Editor de código com excelente suporte para notebooks Jupyter.
*   **Google Colab**: Ambiente Jupyter baseado na nuvem, gratuito e acessível via navegador web.

**Passos para executar um notebook:**

1.  **Instalação do Jupyter (se necessário):**
    ```bash
    pip install notebook jupyterlab
    ```
2.  **Navegue até o diretório `Sprints`:** Utilize o terminal ou prompt de comando para acessar o diretório raiz do repositório.
    ```bash
    cd caminho/para/Sprints
    ```
3.  **Inicie o Jupyter:**
    ```bash
    jupyter notebook
    # ou
    jupyter lab
    ```
4.  **Abra o Notebook:** Navegue pela interface Jupyter até o sprint desejado e abra o arquivo `.ipynb`.
5.  **Execute as Células:** Execute o código sequencialmente, célula por célula, usando `Shift + Enter` ou o botão "Run".

Para usuários do Google Colab, é possível fazer upload do diretório `Sprints` para o Google Drive e abrir os notebooks diretamente no Colab.

## Dados

Cada sprint que necessita de dados inclui um subdiretório `data`, `datasets` ou `tables` para armazenar os arquivos. Os notebooks são configurados para ler os dados a partir desses subdiretórios, então certifique-se de manter a estrutura de diretórios ao executar os notebooks localmente ou no Colab.

**Atenção aos Caminhos:** Ao executar os notebooks em um ambiente diferente, verifique e ajuste os caminhos de arquivos se necessário para garantir que apontem corretamente para os datasets. Caminhos relativos (ex: `'data\\meu_arquivo.csv'`) geralmente funcionarão se a estrutura do diretório for preservada.

Este repositório serve como um portfólio de projetos práticos em análise de dados, demonstrando habilidades em diversas técnicas e ferramentas essenciais para a área.


=== DIRETÓRIO: Sprints\Sprint 12 ===


=== DIRETÓRIO: Sprints\Sprint 12\Automação ===

--- ARQUIVO: Sprints\Sprint 12\Automação\Automação.ipynb (sem output) ---
{
  "cells": [
    {
      "cell_type": "code",
      "execution_count": null,
      "id": "aec402bd",
      "metadata": {},
      "outputs": [],
      "source": [
        "import sys\n",
        "import getopt\n",
        "import pandas as pd\n",
        "import re\n",
        "from sqlalchemy import create_engine, text\n",
        "from sqlalchemy.exc import OperationalError"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "id": "d688e2bd",
      "metadata": {},
      "outputs": [],
      "source": [
        "import sys\n",
        "import os\n",
        "import getopt\n",
        "import re\n",
        "import unicodedata\n",
        "\n",
        "import pandas as pd\n",
        "from sqlalchemy import create_engine, text\n",
        "from sqlalchemy.exc import OperationalError\n",
        "\n",
        "def parse_arguments():\n",
        "    \"\"\"\n",
        "    (Opcional) Se passado via CLI, captura um único arquivo CSV.\n",
        "    \"\"\"\n",
        "    unix_opts = \"f:\"\n",
        "    gnu_opts = [\"file=\"]\n",
        "\n",
        "    args, _ = getopt.getopt(sys.argv[1:], unix_opts, gnu_opts)\n",
        "    for opt, val in args:\n",
        "        if opt in (\"-f\", \"--file\"):\n",
        "            return val\n",
        "    return None\n",
        "\n",
        "\n",
        "def extract_year_from_path(file_path):\n",
        "    \"\"\"\n",
        "    Extrai o primeiro padrão de 4 dígitos (YYYY) encontrado no nome do arquivo.\n",
        "    \"\"\"\n",
        "    name = os.path.basename(file_path)\n",
        "    m = re.search(r\"(\\d{4})\", name)\n",
        "    if not m:\n",
        "        raise ValueError(f\"Ano não encontrado em: {name}\")\n",
        "    return int(m.group(1))\n",
        "\n",
        "\n",
        "def create_db_engine(db_path):\n",
        "    \"\"\"\n",
        "    Cria engine SQLite via SQLAlchemy.\n",
        "    \"\"\"\n",
        "    url = f\"sqlite:///{db_path}\"\n",
        "    engine = create_engine(url)\n",
        "    print(f\"[INFO] Conectado ao banco: {url}\")\n",
        "    return engine\n",
        "\n",
        "\n",
        "def data_already_exists(engine, table_name, year):\n",
        "    \"\"\"\n",
        "    Verifica se já existem registros para ANO_EGRESO = year.\n",
        "    \"\"\"\n",
        "    try:\n",
        "        with engine.connect() as conn:\n",
        "            q = text(f\"SELECT 1 FROM {table_name} WHERE ANO_EGRESO = :y LIMIT 1\")\n",
        "            return conn.execute(q, {\"y\": year}).fetchone() is not None\n",
        "    except OperationalError:\n",
        "        return False\n",
        "\n",
        "\n",
        "def load_data(file_path):\n",
        "    \"\"\"\n",
        "    Lê CSV delimitado por ponto-e-vírgula, codificação latin1.\n",
        "    \"\"\"\n",
        "    df = pd.read_csv(file_path, encoding=\"latin1\", delimiter=\";\")\n",
        "    print(\"Colunas encontradas:\", df.columns.tolist())\n",
        "    return df\n",
        "\n",
        "\n",
        "def normalize_col(name):\n",
        "    \"\"\"\n",
        "    Normaliza nome de coluna: remove acentos, substitui espaços por '_', maiúsculas.\n",
        "    \"\"\"\n",
        "    nf = unicodedata.normalize(\"NFKD\", name)\n",
        "    no_accent = \"\".join(ch for ch in nf if not unicodedata.combining(ch))\n",
        "    return no_accent.replace(\" \", \"_\").upper()\n",
        "\n",
        "\n",
        "def preprocess_data(df, threshold=0.5):\n",
        "    \"\"\"\n",
        "    - Normaliza cabeçalhos\n",
        "    - Remove linhas vazias e com '*' em excesso\n",
        "    - Converte colunas chave para inteiro\n",
        "    - Renomeia colunas existentes conforme mapeamento final\n",
        "    \"\"\"\n",
        "    # 1) normalizar nomes de coluna\n",
        "    df.columns = [normalize_col(c) for c in df.columns]\n",
        "    print(\"Colunas após normalização:\", df.columns.tolist())\n",
        "\n",
        "    # 2) remover linhas completamente vazias\n",
        "    df = df.dropna(how=\"all\")\n",
        "\n",
        "    # 3) filtrar linhas com '*' em excesso\n",
        "    num_cols = len(df.columns)\n",
        "    allowed = int(num_cols * threshold)\n",
        "    df = df[df.apply(lambda row: (row == \"*\").sum() <= allowed, axis=1)]\n",
        "\n",
        "    # 4) converter colunas-chave para inteiro, se existirem\n",
        "    for col in [\"COMUNA_RESIDENCIA\", \"REGION_RESIDENCIA\", \"ANO_EGRESO\"]:\n",
        "        if col in df.columns:\n",
        "            df[col] = pd.to_numeric(df[col], errors=\"coerce\").astype(\"Int64\")\n",
        "        else:\n",
        "            print(f\"[WARN] coluna '{col}' não encontrada, pulando conversão.\")\n",
        "\n",
        "    # 5) renomear para schema final, apenas colunas presentes\n",
        "    final_mapping = {\n",
        "        \"PERTENENCIA_ESTABLECIMIENTO_SALUD\": \"PERTENENCIA_ESTABLECIMIENTO_SALUD\",\n",
        "        \"SEXO\": \"SEXO\",\n",
        "        \"GRUPO_EDAD\": \"GRUPO_EDAD\",\n",
        "        \"ETNIA\": \"ETNIA\",\n",
        "        \"GLOSA_PAIS_ORIGEN\": \"GLOSA_PAIS_ORIGEN\",\n",
        "        \"COMUNA_RESIDENCIA\": \"COMUNA_RESIDENCIA\",\n",
        "        \"GLOSA_COMUNA_RESIDENCIA\": \"GLOSA_COMUNA_RESIDENCIA\",\n",
        "        \"REGION_RESIDENCIA\": \"REGION_RESIDENCIA\",\n",
        "        \"GLOSA_REGION_RESIDENCIA\": \"GLOSA_REGION_RESIDENCIA\",\n",
        "        \"PREVISION\": \"PREVISION\",\n",
        "        \"GLOSA_PREVISION\": \"GLOSA_PREVISION\",\n",
        "        \"ANO_EGRESO\": \"ANO_EGRESO\",\n",
        "        \"DIAG1\": \"DIAG1\",\n",
        "        \"DIAG2\": \"DIAG2\",\n",
        "        \"DIAS_ESTADA\": \"DIAS_ESTADA\",\n",
        "        \"CONDICION_EGRESO\": \"CONDICION_EGRESO\",\n",
        "        \"INTERV_Q\": \"INTERV_Q\",\n",
        "        \"PROCED\": \"PROCED\"\n",
        "    }\n",
        "    # filtrar apenas chaves existentes\n",
        "    mapping = {old: new for old, new in final_mapping.items() if old in df.columns}\n",
        "    df = df.rename(columns=mapping)\n",
        "\n",
        "    return df\n",
        "\n",
        "\n",
        "def save_to_database(df, engine, table_name):\n",
        "    \"\"\"\n",
        "    Insere (append) o DataFrame no banco de dados.\n",
        "    \"\"\"\n",
        "    df.to_sql(table_name, engine, if_exists=\"append\", index=False)\n",
        "    print(f\"[INFO] Inseridos {len(df)} registros em '{table_name}'.\")\n",
        "\n",
        "\n",
        "def validate_data(engine, table_name):\n",
        "    \"\"\"\n",
        "    Exibe contagem de registros por ano.\n",
        "    \"\"\"\n",
        "    with engine.connect() as conn:\n",
        "        q = text(\n",
        "            f\"SELECT ANO_EGRESO, COUNT(*) AS total \"\n",
        "            f\"FROM {table_name} GROUP BY ANO_EGRESO\"\n",
        "        )\n",
        "        for ano, total in conn.execute(q):\n",
        "            print(f\"Ano {ano}: {total} registros\")\n",
        "\n",
        "\n",
        "if __name__ == \"__main__\":\n",
        "    table_name = \"egresos_pacientes\"\n",
        "    engine = create_db_engine(\"database/ministerio_de_salud_chile.db\")\n",
        "\n",
        "    # captura via CLI (opcional)\n",
        "    single_file = parse_arguments()\n",
        "\n",
        "    if single_file:\n",
        "        files = [single_file]\n",
        "    else:\n",
        "        base_folder = r\"C:\\Users\\jonat\\Documents\\GitHub\\Sprints\\Sprint 12\\Automação\\dados\"\n",
        "        files = [\n",
        "            os.path.join(base_folder, \"EGRE_DATOS_ABIERTOS_2018.csv\"),\n",
        "            os.path.join(base_folder, \"EGRE_DATOS_ABIERTOS_2019.csv\"),\n",
        "            os.path.join(base_folder, \"EGRE_DATOS_ABIERTOS_2020.csv\"),\n",
        "        ]\n",
        "\n",
        "    for fp in files:\n",
        "        print(f\"\\n[INFO] Processando: {fp}\")\n",
        "        year = extract_year_from_path(fp)\n",
        "\n",
        "        if data_already_exists(engine, table_name, year):\n",
        "            print(f\"[SKIP] Dados de {year} já existem.\")\n",
        "            continue\n",
        "\n",
        "        df = load_data(fp)\n",
        "        df = preprocess_data(df)\n",
        "        save_to_database(df, engine, table_name)\n",
        "\n",
        "    print(\"\\n[INFO] Validação final:\")\n",
        "    validate_data(engine, table_name)\n"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "id": "5dee678a",
      "metadata": {},
      "outputs": [],
      "source": [
        "print(df.columns.tolist())"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "id": "ce34d85f",
      "metadata": {},
      "outputs": [],
      "source": []
    }
  ],
  "metadata": {
    "kernelspec": {
      "display_name": "Python 3",
      "language": "python",
      "name": "python3"
    },
    "language_info": {
      "codemirror_mode": {
        "name": "ipython",
        "version": 3
      },
      "file_extension": ".py",
      "mimetype": "text/x-python",
      "name": "python",
      "nbconvert_exporter": "python",
      "pygments_lexer": "ipython3",
      "version": "3.12.5"
    }
  },
  "nbformat": 4,
  "nbformat_minor": 5
}

--- ARQUIVO: Sprints\Sprint 12\Automação\d.py ---



=== DIRETÓRIO: Sprints\Sprint 12\Automação\dados ===


=== DIRETÓRIO: Sprints\Sprint 7 ===

--- ARQUIVO: Sprints\Sprint 7\Analysis_0.1.ipynb (sem output) ---
{
  "cells": [
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {},
      "outputs": [],
      "source": [
        "import pandas as pd, numpy as np, matplotlib.pyplot as plt\n",
        "import seaborn as sns\n",
        "from scipy import stats as st\n",
        "\n",
        "taxi_company_trips = pd.read_csv(r'C:\\Users\\jonat\\Documents\\GitHub\\Sprints\\Sprint 7\\data\\moved_project_sql_result_01.csv')\n",
        "neighborhood_trip_avg = pd.read_csv(r'C:\\Users\\jonat\\Documents\\GitHub\\Sprints\\Sprint 7\\data\\moved_project_sql_result_04.csv')\n",
        "loop_to_ohare_trips = pd.read_csv(r'C:\\Users\\jonat\\Documents\\GitHub\\Sprints\\Sprint 7\\data\\moved_project_sql_result_07.csv')"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {},
      "outputs": [],
      "source": [
        "def estudo_inicial(df):\n",
        "    print(df.sample(10))\n",
        "    print()\n",
        "    print(df.info())\n",
        "    print()\n",
        "    print(df.describe())\n",
        "estudo_inicial(taxi_company_trips)"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        "### taxi_company_trips\n",
        "company_name  = nome das companias\n",
        "\n",
        "trips_amount = número total de corridas\n",
        "\n",
        "Sem problemas nos tipos dos dados"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {},
      "outputs": [],
      "source": [
        "estudo_inicial(neighborhood_trip_avg)"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        "### neighborhood_trip_avg\n",
        "dropoff_location_name  = Nome do local de saída.\n",
        "\n",
        "average_trips = número médio de corridas.\n",
        "\n",
        "Sem problemas nos tipos dos dados"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {},
      "outputs": [],
      "source": [
        "estudo_inicial(loop_to_ohare_trips)"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        "### loop_to_ohare_trips\n",
        " \n",
        " start_ts = tempo do começo da corrida\n",
        " \n",
        " weather_conditions =   se a condição do tempo era de chuva\n",
        " \n",
        " duration_seconds = quanto tempo durou a corrida até o destino \n",
        "\n",
        " Tem um problema no start_ts onde não esta no tipo date. "
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {},
      "outputs": [],
      "source": [
        "loop_to_ohare_trips['start_ts'] = pd.to_datetime(loop_to_ohare_trips['start_ts'])\n",
        "loop_to_ohare_trips.info()"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {},
      "outputs": [],
      "source": [
        "neighborhood_trip_avg.sort_values(by='average_trips', ascending=False).head(10)['dropoff_location_name'].tolist()\n"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        "### Principais cidades\n",
        "As principais cidade são : Loop, River North, Streeterville, West Loop, \"OHare\", Lake View, Grant Park, Museum Campus, Gold Coast and Sheffield & DePaul"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {},
      "outputs": [],
      "source": [
        "plt.figure(figsize=(6, 10))\n",
        "sns.barplot(data=taxi_company_trips, y='company_name', x='trips_amount', palette=\"viridis\")\n",
        "plt.title('Empresas de Táxi e Número de Corridas')\n",
        "plt.ylabel('Empresa de Táxi')\n",
        "plt.xlabel('Número de Corridas')\n",
        "plt.tight_layout()\n",
        "plt.show()"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        "### analise do gráfico\n",
        "O gráfico tem uma calda longa e não é em formato de sino, oque indica um mercado muito concentrado.\n",
        "\n",
        "A empresa Flash Cab tem quase o 2 de numero de corridas que seu concorrente logo a baixo. Indicando uma concentração de mercado. "
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {},
      "outputs": [],
      "source": [
        "# Ordenando os bairros pelo número de corridas (ou média) em ordem decrescente e selecionando os top 10\n",
        "top10_bairros = neighborhood_trip_avg.sort_values(by='average_trips', ascending=False).head(10)\n",
        "\n",
        "plt.figure(figsize=(10, 5))\n",
        "sns.barplot(data=top10_bairros, x='dropoff_location_name', y='average_trips', palette=\"magma\")\n",
        "plt.title('Top 10 Bairros por Número de Corridas (Destino)')\n",
        "plt.xlabel('Bairro')\n",
        "plt.ylabel('Número de Corridas')\n",
        "plt.xticks(rotation=45)\n",
        "plt.tight_layout()\n",
        "plt.show()\n"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        "### analise do gráfico\n",
        "O gráfico tem uma calda longa e não é em formato de sino, oque indica um mercado muito concentrado.\n",
        "\n",
        "Os bairros de maior destino são :Loop,  River North, Streeterville e West Loop"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {},
      "outputs": [],
      "source": [
        "# Separando os dados conforme a condição climática\n",
        "good_weather = loop_to_ohare_trips[loop_to_ohare_trips['weather_conditions'] == 'Good']\n",
        "bad_weather = loop_to_ohare_trips[loop_to_ohare_trips['weather_conditions'] == 'Bad']\n",
        "\n",
        "# Impressão das hipóteses do teste\n",
        "print(\"Hipóteses do teste:\")\n",
        "print(\"H0: A média de duração dos trajetos em condições 'Good' é igual à média em condições 'Bad'.\")\n",
        "print(\"Ha: A média de duração dos trajetos em condições 'Good' é diferente da média em condições 'Bad'.\\n\")\n",
        "\n",
        "# Exibindo as médias de cada grupo\n",
        "print(f\"A média de duração para condições 'Good' é: {good_weather['duration_seconds'].mean():.0f}\")\n",
        "print(f\"A média de duração para condições 'Bad' é: {bad_weather['duration_seconds'].mean():.0f}\\n\")\n",
        "\n",
        "# Definindo nível de significância\n",
        "alpha = 0.05\n",
        "\n",
        "# Para igualar o tamanho das amostras, usamos o menor tamanho entre os dois grupos\n",
        "quantidade = min(len(good_weather), len(bad_weather))\n",
        "\n",
        "# Realizando o teste t para amostras independentes (sem pressupor variâncias iguais)\n",
        "results = st.ttest_ind(\n",
        "    good_weather['duration_seconds'].sample(n=quantidade), \n",
        "    bad_weather['duration_seconds'].sample(n=quantidade),\n",
        "    equal_var=False\n",
        ")\n",
        "\n",
        "print(f'valor-p: {results.pvalue:.10f}')\n",
        "if results.pvalue < alpha:\n",
        "    print(\"Rejeitamos a hipótese nula\")\n",
        "else:\n",
        "    print(\"Não podemos rejeitar a hipótese nula\")\n"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        "### H0\n",
        "O código separa os dados em trajetos com clima \"Good\" e \"Bad\", calcula as médias de duração de cada grupo e utiliza um teste t para verificar se há diferença significativa entre essas médias.\n",
        "\n",
        "Escolhi o alpha de 5% por ser um padrão. "
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        "# Conclusão\n",
        "\n",
        "Este notebook realizou uma análise exploratória de três conjuntos de dados relacionados a corridas de táxi, com o objetivo de identificar padrões e entender melhor a distribuição das corridas na cidade.\n",
        "\n",
        "- **Empresas de Táxi**: O conjunto de dados apresenta uma grande variação no número de corridas por empresa. Algumas companhias possuem apenas algumas corridas registradas, enquanto outras apresentam números significativamente mais altos, indicando diferentes níveis de demanda e operação no setor.\n",
        "\n",
        "- **Média de Corridas por Bairro**: A análise revelou que áreas como *Loop, River North, Streeterville, West Loop* e *O'Hare* possuem maior demanda, sugerindo que esses locais são pontos estratégicos para o serviço de táxi.\n",
        "\n",
        "- **Corridas para O'Hare**: Um problema inicial foi identificado na coluna de datas, que estava no formato incorreto, mas foi corrigido para permitir uma análise mais precisa da duração das corridas e da influência das condições climáticas nos trajetos.\n",
        "\n",
        "### Considerações Finais\n",
        "\n",
        "Este estudo fornece uma base sólida para investigações mais aprofundadas, como a influência de fatores externos nas corridas, a sazonalidade da demanda e a eficiência operacional das empresas de táxi. Com a preparação adequada dos dados, futuras análises podem oferecer insights valiosos para otimizar o serviço e melhorar a experiência dos usuários.\n"
      ]
    }
  ],
  "metadata": {
    "kernelspec": {
      "display_name": "Python 3",
      "language": "python",
      "name": "python3"
    },
    "language_info": {
      "codemirror_mode": {
        "name": "ipython",
        "version": 3
      },
      "file_extension": ".py",
      "mimetype": "text/x-python",
      "name": "python",
      "nbconvert_exporter": "python",
      "pygments_lexer": "ipython3",
      "version": "3.12.5"
    },
    "toc": {
      "base_numbering": 1,
      "nav_menu": {},
      "number_sections": true,
      "sideBar": true,
      "skip_h1_title": true,
      "title_cell": "Table of Contents",
      "title_sidebar": "Contents",
      "toc_cell": false,
      "toc_position": {},
      "toc_section_display": true,
      "toc_window_display": false
    }
  },
  "nbformat": 4,
  "nbformat_minor": 2
}


=== DIRETÓRIO: Sprints\Sprint 7\data ===


=== DIRETÓRIO: Sprints\Sprint 9 ===


=== DIRETÓRIO: Sprints\Sprint 9\dados ===

--- ARQUIVO: Sprints\Sprint 9\sprint9.ipynb (sem output) ---
{
  "cells": [
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {},
      "outputs": [],
      "source": [
        "import pandas as pd\n",
        "import numpy as np\n",
        "import matplotlib.pyplot as plt\n",
        "import seaborn as sns\n",
        "from scipy import stats as st\n"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {},
      "outputs": [],
      "source": [
        "df_hipoteses = pd.read_csv('dados/hypotheses_us.csv', sep=';')\n",
        "df_orders = pd.read_csv('dados/orders_us.csv')\n",
        "df_visits = pd.read_csv('dados/visits_us.csv')"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {},
      "outputs": [],
      "source": [
        "def avaliacao_inicial(df):\n",
        "\n",
        "    df.info()\n",
        "\n",
        "new_col_names = [old_name.strip().lower().replace(' ', '_') for old_name in df_hipoteses.columns]\n",
        "df_hipoteses.columns = new_col_names\n",
        "avaliacao_inicial(df_hipoteses)"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {},
      "outputs": [],
      "source": [
        "\n",
        "new_col_names = [old_name.strip().lower().replace(' ', '_') for old_name in df_orders.columns]\n",
        "df_orders.columns = new_col_names\n",
        "df_orders['date'] = pd.to_datetime(df_orders['date'])\n",
        "df_orders['group'] = df_orders['group'].astype('category')"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {},
      "outputs": [],
      "source": [
        "# Contar a quantidade de grupos distintos para cada ordersnte\n",
        "grupos_por_orders = df_orders.groupby('visitorid')['group'].nunique()\n",
        "\n",
        "# Identificar os ordersrId que estão em exatamente 2 grupos\n",
        "ids_para_remover = grupos_por_orders[grupos_por_orders == 2].index\n",
        "\n",
        "# Filtrar o DataFrame removendo os ordersntes que estão em 2 grupos\n",
        "df_orders_filtrado = df_orders[~df_orders['visitorid'].isin(ids_para_remover)]\n",
        "\n",
        "# Exibir resultado\n",
        "print(f'Tinha {len(ids_para_remover)} visitantes em 2 grupos')\n",
        "print(f\"Total de entradas: {len(df_orders_filtrado)}\")\n",
        "avaliacao_inicial(df_orders)\n",
        "df_orders\n"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {},
      "outputs": [],
      "source": [
        "df_visits['date'] = pd.to_datetime(df_visits['date'])\n",
        "df_visits['group'] = df_visits['group'].astype('category')\n",
        "avaliacao_inicial(df_visits)\n",
        "df_visits"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {},
      "outputs": [],
      "source": [
        "# ICE       \n",
        "print(df_hipoteses)\n",
        "\n",
        "df_hipoteses['ICE'] = (df_hipoteses['impact']*df_hipoteses['confidence'])/df_hipoteses['effort']\n",
        "df_hipoteses[['hypothesis','ICE']].sort_values(by='ICE', ascending=False)\n"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {},
      "outputs": [],
      "source": [
        "# RICE\n",
        "print(df_hipoteses)\n",
        "\n",
        "df_hipoteses['RICE'] = (df_hipoteses['reach']*df_hipoteses['impact']*df_hipoteses['confidence'])/df_hipoteses['effort']\n",
        "df_hipoteses[['hypothesis','RICE']].sort_values(by='RICE', ascending=False)"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {},
      "outputs": [],
      "source": [
        "# ICE RICE\n",
        "df_hipoteses.sort_values(by='RICE', ascending=False)"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        "Como o RICE leva em conta o alcanse e no caso a loja é online é uma metrica mais importante. E a hipótese de ID 7 tem o alcanse de 10 que seria ignorado pelo ICE."
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {},
      "outputs": [],
      "source": [
        "# Função para calcular o tamanho médio acumulado do pedido por grupo\n",
        "def calcular_tamanho_medio_acumulado(df_orders, df_visits):\n",
        "    # Filtrando e agrupando os dados\n",
        "    df_merged = pd.merge(df_orders, df_visits, on='date')\n",
        "    contas = {'revenue': 'sum', 'visits': 'max'}\n",
        "    df_agg = df_merged.groupby('date')[['revenue', 'visits']].agg(contas).reset_index()\n",
        "\n",
        "    # Calculando as somas acumuladas\n",
        "    df_agg['revenue_cumsum'] = df_agg['revenue'].cumsum()\n",
        "    df_agg['visits_cumsum'] = df_agg['visits'].cumsum()\n",
        "\n",
        "    # Calculando o tamanho médio acumulado do pedido\n",
        "    df_agg['mean_order_size'] = df_agg['revenue_cumsum'] / df_agg['visits_cumsum']\n",
        "\n",
        "    return df_agg\n",
        "\n",
        "# Calculando para cada grupo\n",
        "df_orders_a = df_orders[df_orders['group'] == 'A']\n",
        "df_orders_b = df_orders[df_orders['group'] == 'B']\n",
        "df_visits_a = df_visits[df_visits['group'] == 'A']\n",
        "df_visits_b = df_visits[df_visits['group'] == 'B']\n",
        "\n",
        "df_merge_a = calcular_tamanho_medio_acumulado(df_orders_a, df_visits_a)\n",
        "df_merge_b = calcular_tamanho_medio_acumulado(df_orders_b, df_visits_b)\n",
        "\n",
        "# Plotando o gráfico\n",
        "plt.figure(figsize=(10, 6))\n",
        "plt.plot(df_merge_a['date'], df_merge_a['mean_order_size'], label='Grupo A', color='blue')\n",
        "plt.plot(df_merge_b['date'], df_merge_b['mean_order_size'], label='Grupo B', color='green')\n",
        "plt.title(\"Tamanho Médio Acumulado do Pedido por Grupo\")\n",
        "plt.xlabel(\"Data\")\n",
        "plt.ylabel(\"Tamanho Médio Acumulado do Pedido\")\n",
        "plt.xticks(rotation=15) \n",
        "plt.legend()\n",
        "plt.show()\n"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        "O Grupo B começou melhor porém logo o grupo A subiu abruptamente e se manteve até o final.\n",
        "O grupo A se mostrou mais instável com 3 momentos de medias muito grandes, enquanto o grupo B se mostrou mas estável.\n",
        "\n",
        "Grupo A apresenta um tamanho médio acumulado de pedido maior que o Grupo B ao longo do tempo, indicando uma estratégia mais eficaz de conversão de vendas."
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {},
      "outputs": [],
      "source": [
        "df_merge_b"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {},
      "outputs": [],
      "source": [
        "# Plotando o gráfico\n",
        "plt.figure(figsize=(10, 6))\n",
        "plt.plot(df_merge_a['date'], df_merge_b['mean_order_size'] - df_merge_a['mean_order_size'], color='blue')\n",
        "plt.title(\"Diferença media acumulado entre B e A\")\n",
        "plt.xlabel(\"Data\")\n",
        "plt.xticks(rotation=15) \n",
        "plt.legend()\n",
        "plt.show()\n",
        "\n"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        "Neste gráfrico fica mais claro que no começo o grupo A tinha uma media maior, e logo o grupo B tinha mais media e se manteve até o final do periodo. "
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {},
      "outputs": [],
      "source": [
        "\n",
        "# Merge para os grupos A e B (dados consistentes: orders e visits do mesmo grupo)\n",
        "df_merge_a = pd.merge(df_orders_a, df_visits_a, on='date')\n",
        "df_merge_b = pd.merge(df_orders_b, df_visits_b, on='date')\n",
        "\n",
        "# Criando o merge geral concatenando os dados dos dois grupos\n",
        "df_merge_all = pd.concat([df_merge_a, df_merge_b])\n",
        "\n",
        "# Função para agrupar por data, contando visitantes únicos e obtendo o máximo de visitas por dia\n",
        "def agrupar_por_data(df):\n",
        "    return (\n",
        "        df\n",
        "        .groupby('date')\n",
        "        .agg(\n",
        "            visitor_count=('visitorid', 'count'),\n",
        "            max_visits=('visits', 'max')\n",
        "        )\n",
        "        .reset_index()\n",
        "    )\n",
        "\n",
        "# Agrupando os dados\n",
        "df_agrupado_a = agrupar_por_data(df_merge_a)\n",
        "df_agrupado_b = agrupar_por_data(df_merge_b)\n",
        "df_agrupado_all = agrupar_por_data(df_merge_all)\n",
        "\n",
        "# Calculando a taxa de conversão: soma dos visitantes contados / soma dos máximos de visitas\n",
        "taxa_conversao_a = df_agrupado_a['visitor_count'].sum() / df_agrupado_a['max_visits'].sum()\n",
        "taxa_conversao_b = df_agrupado_b['visitor_count'].sum() / df_agrupado_b['max_visits'].sum()\n",
        "taxa_conversao_all = df_agrupado_all['visitor_count'].sum() / df_agrupado_all['max_visits'].sum()\n",
        "\n",
        "# Exibindo as taxas de conversão\n",
        "print(f\"\"\"A taxa de conversão do Grupo A é de: {taxa_conversao_a * 100:.2f}% \n",
        "A taxa de conversão do Grupo B é de: {taxa_conversao_b * 100:.2f}% \n",
        "A taxa de conversão geral é de: {taxa_conversao_all * 100:.2f}%\"\"\")"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        "A taxa de converção de B é maior em relação a A, porém em relação ao panorama geral a diferença não é tão acentuada. Porém é uma diferença importante.\n",
        "\n",
        "O que indicia que a estrategia usada no grupo B deu certo."
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {},
      "outputs": [],
      "source": [
        "# Acumulando os pedidos e visitas ao longo do tempo\n",
        "df_agrupado_a['pedidos_acumulados'] = df_agrupado_a['visitor_count'].cumsum()\n",
        "df_agrupado_a['visitas_acumuladas'] = df_agrupado_a['max_visits'].cumsum()\n",
        "df_agrupado_a['taxa_cumulativa'] = df_agrupado_a['pedidos_acumulados'] / df_agrupado_a['visitas_acumuladas']\n",
        "\n",
        "df_agrupado_b['pedidos_acumulados'] = df_agrupado_b['visitor_count'].cumsum()\n",
        "df_agrupado_b['visitas_acumuladas'] = df_agrupado_b['max_visits'].cumsum()\n",
        "df_agrupado_b['taxa_cumulativa'] = df_agrupado_b['pedidos_acumulados'] / df_agrupado_b['visitas_acumuladas']\n",
        "# Juntando os dois DataFrames pela data\n",
        "df_taxas = pd.merge(\n",
        "    df_agrupado_a[['date', 'taxa_cumulativa']],\n",
        "    df_agrupado_b[['date', 'taxa_cumulativa']],\n",
        "    on='date',\n",
        "    suffixes=('_a', '_b')\n",
        ")\n",
        "\n",
        "# Calculando a diferença relativa do grupo B em relação ao A\n",
        "df_taxas['diferenca_relativa'] = (df_taxas['taxa_cumulativa_b'] - df_taxas['taxa_cumulativa_a']) / df_taxas['taxa_cumulativa_a']\n",
        "plt.figure(figsize=(10,6))\n",
        "plt.plot(df_taxas['date'], df_taxas['diferenca_relativa'] * 100, color='purple')\n",
        "plt.axhline(0, color='gray', linestyle='--')\n",
        "plt.title('Diferença Relativa na Conversão Cumulativa (Grupo B vs A)')\n",
        "plt.xlabel('Data')\n",
        "plt.ylabel('Diferença Relativa (%)')\n",
        "plt.show()\n"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        "Até o dia 06/08 o Grupo A estava com uma converção maior porém depois deste dia o Grupo A nunca teve uma converção maior, oque indica que o Grupo B tem uma estrategia melhor."
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {},
      "outputs": [],
      "source": [
        "# Agrupando por visitante (sem considerar o grupo)\n",
        "df_orders_agrupado = df_orders.groupby('visitorid')['transactionid'].count().reset_index()\n",
        "df_orders_agrupado = df_orders_agrupado.rename(columns={'transactionid': 'n_pedidos'})\n",
        "\n",
        "# Pegando o grupo de cada visitante (apenas o primeiro registro de cada visitante)\n",
        "grupo_por_visitante = df_orders[['visitorid', 'group']].drop_duplicates(subset='visitorid')\n",
        "\n",
        "# Fazendo o merge para adicionar a coluna 'group'\n",
        "df_orders_agrupado = df_orders_agrupado.merge(grupo_por_visitante, on='visitorid', how='left')\n",
        "\n",
        "# Exibindo os percentis 95 e 99\n",
        "print(np.percentile(df_orders_agrupado['n_pedidos'], [95, 99]))\n"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        "Uma grande maioria dos usuários tem apenas 1 transação. porém 5% tem mais de 2 e 1% tem mais de 4 transações.\n",
        "\n",
        "O ponto em que os dados se tornam anomalia é 2 transações."
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {},
      "outputs": [],
      "source": [
        "x_values = pd.Series(range(0,len(df_orders)))\n",
        "plt.scatter(x_values,df_orders['revenue'])"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        "Tem 2 outlayers de numeros muito atipicos, que são de pedidos extraordinários. "
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {},
      "outputs": [],
      "source": [
        "\n",
        "print(np.percentile(df_orders['revenue'], [ 95, 99]))"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        "Uma grande maioria das transações gastam menos de 436 reaos. porém 5% tem mais de 436 reais e 1% tem mais de 901 reais.\n",
        "\n",
        "O ponto em que os dados se tornam anomalia é 436 reais"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {},
      "outputs": [],
      "source": [
        "alpha = 0.05  # nível de significância\n",
        "\n",
        "def significancia_estatistica(df1, df2):\n",
        "    results = st.mannwhitneyu(df1, df2, alternative='less')\n",
        "\n",
        "    print(\"🔍 Teste de Mann-Whitney U\")\n",
        "    print(\"Hipóteses:\")\n",
        "    print(\" - H₀ (nula): A taxa de conversão cumulativa do grupo A é maior ou igual à do grupo B.\")\n",
        "    print(\" - H₁ (alternativa): A taxa de conversão cumulativa do grupo A é menor que a do grupo B.\")\n",
        "    print()\n",
        "    print(f\"📊 p-value: {results.pvalue:.10f}\")\n",
        "    print()\n",
        "\n",
        "    if results.pvalue < alpha:\n",
        "        print(\"✅ Resultado: Hipótese nula rejeitada.\")\n",
        "        print(\"Conclusão: Há evidência estatística de que o grupo B possui uma taxa de conversão cumulativa maior que o grupo A.\")\n",
        "    else:\n",
        "        print(\"❌ Resultado: Falha ao rejeitar a hipótese nula.\")\n",
        "        print(\"Conclusão: Não há evidência estatística suficiente para afirmar que o grupo B converte melhor que o grupo A.\")\n",
        "\n",
        "\n",
        "significancia_estatistica(df_agrupado_a['taxa_cumulativa'], df_agrupado_b['taxa_cumulativa'])"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        "O grupo A com certeza possui uma taxa de conversão menor que o grupo B "
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {},
      "outputs": [],
      "source": [
        "df_orders_agrupado_a = df_orders_agrupado[df_orders_agrupado['group'] == 'A']\n",
        "df_orders_agrupado_b = df_orders_agrupado[df_orders_agrupado['group'] == 'B']\n",
        "\n",
        "def significancia_estatistica0(df1, df2):\n",
        "    results = st.mannwhitneyu(df1, df2, alternative='less')\n",
        "\n",
        "    print(\"🔍 Teste de Mann-Whitney U\")\n",
        "    print(\"Hipóteses:\")\n",
        "    print(\" - H₀ (nula): O número cumulativo de pedidos do grupo A é maior ou igual ao do grupo B.\")\n",
        "    print(\" - H₁ (alternativa): O número cumulativo de pedidos do grupo A é menor que o do grupo B.\")\n",
        "    print()\n",
        "    print(f\"📊 p-value: {results.pvalue:.5f}\")\n",
        "    print()\n",
        "\n",
        "    if results.pvalue < alpha:\n",
        "        print(\"✅ Resultado: Hipótese nula rejeitada.\")\n",
        "        print(\"Conclusão: Há evidência estatística de que o grupo B possui um número cumulativo de pedidos maior que o do grupo A.\")\n",
        "    else:\n",
        "        print(\"❌ Resultado: Falha ao rejeitar a hipótese nula.\")\n",
        "        print(\"Conclusão: Não há evidência estatística suficiente para afirmar que o grupo B possui um número cumulativo de pedidos maior que o do grupo A.\")\n",
        "\n",
        "# Exemplo de chamada da função:\n",
        "significancia_estatistica0(df_orders_agrupado_a['n_pedidos'], df_orders_agrupado_b['n_pedidos'])\n"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        "Portanto o grupo B tem mais pedidos."
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {},
      "outputs": [],
      "source": [
        "df_orders_agrupado, df_orders_a"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {},
      "outputs": [],
      "source": [
        "df_orders"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {},
      "outputs": [],
      "source": [
        "df_visitors = df_orders_agrupado[df_orders_agrupado['n_pedidos']>2]['visitorid']\n",
        "\n",
        "df_revenue = df_orders[df_orders['revenue']>436]['visitorid']\n",
        "series_outlayers  = pd.concat([df_revenue, df_visitors], join='outer')\n",
        "# len(df_visitors)\n",
        "# series_outlayers = list(series_outlayers.astype(str))\n",
        "df_filtrado = df_orders.drop(df_orders[df_orders['visitorid'].isin(series_outlayers)].index)\n",
        "df_filtrado, len(series_outlayers)"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {},
      "outputs": [],
      "source": [
        "df_filtrado_a = df_filtrado[df_filtrado['group'] == 'A']\n",
        "df_filtrado_b = df_filtrado[df_filtrado['group'] == 'B']"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {},
      "outputs": [],
      "source": [
        "df_merge_a = pd.merge(df_filtrado_a, df_visits_a, on='date')\n",
        "df_merge_b = pd.merge(df_filtrado_b, df_visits_b, on='date')\n",
        "df_agrupado_a_f = agrupar_por_data(df_merge_a)\n",
        "df_agrupado_b_f = agrupar_por_data(df_merge_b)\n",
        "df_agrupado_a_f['pedidos_acumulados'] = df_agrupado_a_f['visitor_count'].cumsum()\n",
        "df_agrupado_a_f['visitas_acumuladas'] = df_agrupado_a_f['max_visits'].cumsum()\n",
        "df_agrupado_a_f['taxa_cumulativa'] = df_agrupado_a_f['pedidos_acumulados'] / df_agrupado_a_f['visitas_acumuladas']\n",
        "\n",
        "df_agrupado_b_f['pedidos_acumulados'] = df_agrupado_b_f['visitor_count'].cumsum()\n",
        "df_agrupado_b_f['visitas_acumuladas'] = df_agrupado_b_f['max_visits'].cumsum()\n",
        "df_agrupado_b_f['taxa_cumulativa'] = df_agrupado_b_f['pedidos_acumulados'] / df_agrupado_b_f['visitas_acumuladas']\n",
        "\n",
        "def significancia_estatistica(df1, df2):\n",
        "    results = st.mannwhitneyu(df1, df2, alternative='less')\n",
        "\n",
        "    print(\"🔍 Teste de Mann-Whitney U, dados filtrados\")\n",
        "    print(\"Hipóteses:\")\n",
        "    print(\" - H₀ (nula): A taxa de conversão cumulativa do grupo A é maior ou igual à do grupo B.\")\n",
        "    print(\" - H₁ (alternativa): A taxa de conversão cumulativa do grupo A é menor que a do grupo B.\")\n",
        "    print()\n",
        "    print(f\"📊 p-value: {results.pvalue:.10f}\")\n",
        "    print()\n",
        "\n",
        "    if results.pvalue < alpha:\n",
        "        print(\"✅ Resultado: Hipótese nula rejeitada.\")\n",
        "        print(\"Conclusão: Há evidência estatística de que o grupo B possui uma taxa de conversão cumulativa maior que o grupo A.\")\n",
        "    else:\n",
        "        print(\"❌ Resultado: Falha ao rejeitar a hipótese nula.\")\n",
        "        print(\"Conclusão: Não há evidência estatística suficiente para afirmar que o grupo B converte melhor que o grupo A.\")\n",
        "\n",
        "\n",
        "significancia_estatistica(df_agrupado_a_f['taxa_cumulativa'], df_agrupado_b_f['taxa_cumulativa'])"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        "```\n",
        "Valor p dos dados não filtrados:0.0000000124\n",
        "Valor p dos dados     filtrados:0.0000000003\n",
        "```\n",
        "\n",
        "Existe uma confirmação mais certeira qu a hipótese deve ser rejeitada nos dados filtrados. "
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {},
      "outputs": [],
      "source": [
        "df_orders_agrupado = df_orders_filtrado.groupby('visitorid')['transactionid'].count().reset_index()\n",
        "df_orders_agrupado = df_orders_agrupado.rename(columns={'transactionid': 'n_pedidos'})\n",
        "\n",
        "# Pegando o grupo de cada visitante (apenas o primeiro registro de cada visitante)\n",
        "grupo_por_visitante = df_orders[['visitorid', 'group']].drop_duplicates(subset='visitorid')\n",
        "\n",
        "# Fazendo o merge para adicionar a coluna 'group'\n",
        "df_orders_agrupado = df_orders_agrupado.merge(grupo_por_visitante, on='visitorid', how='left')\n",
        "\n",
        "df_orders_agrupado_a_f = df_orders_agrupado[df_orders_agrupado['group'] == 'A']\n",
        "df_orders_agrupado_b_f = df_orders_agrupado[df_orders_agrupado['group'] == 'B']\n",
        "\n",
        "def significancia_estatistica0(df1, df2):\n",
        "    results = st.mannwhitneyu(df1, df2, alternative='less')\n",
        "\n",
        "    print(\"🔍 Teste de Mann-Whitney U, dados filtrados\")\n",
        "    print(\"Hipóteses:\")\n",
        "    print(\" - H₀ (nula): O número cumulativo de pedidos do grupo A é maior ou igual ao do grupo B.\")\n",
        "    print(\" - H₁ (alternativa): O número cumulativo de pedidos do grupo A é menor que o do grupo B.\")\n",
        "    print()\n",
        "    print(f\"📊 p-value: {results.pvalue:.5f}\")\n",
        "    print()\n",
        "\n",
        "    if results.pvalue < alpha:\n",
        "        print(\"✅ Resultado: Hipótese nula rejeitada.\")\n",
        "        print(\"Conclusão: Há evidência estatística de que o grupo B possui um número cumulativo de pedidos maior que o do grupo A.\")\n",
        "    else:\n",
        "        print(\"❌ Resultado: Falha ao rejeitar a hipótese nula.\")\n",
        "        print(\"Conclusão: Não há evidência estatística suficiente para afirmar que o grupo B possui um número cumulativo de pedidos maior que o do grupo A.\")\n",
        "\n",
        "# Exemplo de chamada da função:\n",
        "significancia_estatistica0(df_orders_agrupado_a_f['n_pedidos'], df_orders_agrupado_b_f['n_pedidos'])"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        "```\n",
        "Valor p dos dados não filtrados:0.84250\n",
        "Valor p dos dados     filtrados:0.70623\n",
        "```\n",
        "\n",
        "Existe uma confirmação menos certeira que \" Falha ao rejeitar a hipótese nula\" em comparação com os dados não filtardos, oque mostra como os outlayers influenciam. "
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        "# Análise Final\n",
        "Com base nos dados analisados, os testes indicam que o grupo B deve ser considerado o líder. \n",
        "\n",
        "Contudo, um estudo com um período de observação mais longo traria maior certeza sobre essa conclusão. "
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        "# Análise Final e Conclusões do Teste A/B\n",
        "\n",
        "Após analisar os dados do teste A/B, cheguei à conclusão de que **o Grupo B se destacou em relação ao Grupo A**.  Percebi que o Grupo B não só teve uma **taxa de conversão maior**, como também essa taxa se mostrou mais **estável** ao longo do tempo.  Enquanto o Grupo A oscilou bastante, o Grupo B manteve uma conversão consistentemente superior, especialmente depois de um período inicial.\n",
        "\n",
        "Os testes estatísticos que realizei, o Mann-Whitney U, me mostraram com clareza que **a taxa de conversão do Grupo B é estatisticamente superior à do Grupo A**.  Essa conclusão se manteve firme mesmo depois que limpei os dados, removendo aqueles *outliers* que poderiam estar distorcendo a análise.\n",
        "\n",
        "É interessante notar que, embora a conversão do Grupo B seja melhor, quando olhei para o número total de pedidos, a diferença entre os grupos não foi tão significativa estatisticamente. Isso me leva a pensar que a grande vantagem do Grupo B está em **converter mais visitas em pedidos**, e não necessariamente em ter um volume total de pedidos drasticamente maior.\n",
        "\n",
        "**Em resumo, o que os dados me dizem é que a estratégia utilizada no Grupo B parece ser mais eficaz para aumentar a conversão.**  Claro, seria ótimo ter mais tempo de observação para ter ainda mais certeza, mas com as informações que tenho agora, **minha recomendação seria considerar seriamente a adoção da estratégia do Grupo B.**  Acredito que ela tem um potencial maior de trazer resultados positivos."
      ]
    }
  ],
  "metadata": {
    "kernelspec": {
      "display_name": "Python 3",
      "language": "python",
      "name": "python3"
    },
    "language_info": {
      "codemirror_mode": {
        "name": "ipython",
        "version": 3
      },
      "file_extension": ".py",
      "mimetype": "text/x-python",
      "name": "python",
      "nbconvert_exporter": "python",
      "pygments_lexer": "ipython3",
      "version": "3.12.5"
    }
  },
  "nbformat": 4,
  "nbformat_minor": 2
}


=== DIRETÓRIO: Sprints\sprint 1 ===

--- ARQUIVO: Sprints\sprint 1\sprint 1.ipynb (sem output) ---
{
  "cells": [
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "FnPB8Fx5TMRb"
      },
      "source": [
        "Uma empresa de comércio eletrônico, Store 1, começou recentemente a coletar dados sobre seus clientes. O objetivo da Store 1 é entender melhor o comportamento dos clientes e tomar decisões baseadas em dados para melhorar experiência online deles.\n",
        "\n",
        "Como parte da equipe analítica, sua primeira tarefa é avaliar a qualidade de uma amostra de dados coletados e preparar elas para análises futuras."
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "vLW81iYmTMRe"
      },
      "source": [
        "# Quiz\n",
        "\n",
        "A Store 1 visa garantir a consistência na coleta de dados. Como parte desse esforço, a qualidade dos dados coletados sobre os usuários precisa ser avaliada. Foi pedido que você revise os dados coletados e proponha alterações. Abaixo, você verá dados sobre um determinado usuário. Revise os dados e identifique possíveis problemas."
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "i7_O27ZRTMRe"
      },
      "outputs": [],
      "source": [
        "user_id = '32415'\n",
        "user_name = ' mike_reed '\n",
        "user_age = 32.0\n",
        "fav_categories = ['ELECTRONICS', 'SPORT', 'BOOKS']"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "Dyjbn7MhTMRg"
      },
      "source": [
        "**Opções:**\n",
        "\n",
        "1. O tipo de dados de `user_id` deve ser alterado de string para número inteiro (integer).\n",
        "    \n",
        "2. A variável `user_name` contém uma string com espaçamento desnecessário e um sublinhado entre o nome e o sobrenome.\n",
        "    \n",
        "3. O tipo de dados de `user_age` está incorreto.\n",
        "    \n",
        "4. A lista `fav_categories` contém strings em letras maiúsculas. Em vez disso, devemos converter os valores da lista para letras minúsculas."
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "AIsnk-vCTMRg"
      },
      "source": [
        "Escreva na célula Markdown abaixo o número de opções que você identificou como problemas. Se você identificou vários problemas, separe o número por vírgulas. Por exemplo, se você acha que os números 1 e 3 estão incorretos, escreva 1, 3, e explique o motivo."
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "70wSe_MjTMRh"
      },
      "source": [
        "**Escreva sua resposta e explique seu raciocínio:** 2, 3 e 4\n",
        "\n",
        "2- Espaços extras, antes e depois do nome, e **underline** no meio atrapalham no processamento de texto.\n",
        "\n",
        "3- Mesmo incompleta, pois não diz qual tipo de variável deveria ser (**int**), a terceira opção está correta, pois uma pessoa não terá idade em números flutuantes.\n",
        "\n",
        "4- Pois é necessário a normalização dos dados para, no caso, **minúsculas**."
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "IH19D6NiTMRh"
      },
      "source": [
        "# Tarefa 1\n",
        "\n",
        "Vamos implementar as mudanças que identificamos. Primeiro, queremos corrigir os problemas com a variável `user_name`. Como verificamos, ela possui espaços desnecessários e um sublinhado como separador entre o nome e o sobrenome. Seu objetivo é remover os espaços e depois substituir o sublinhado por espaço."
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "HxZLfyLeTMRh"
      },
      "outputs": [],
      "source": [
        "user_name = ' mike_reed '\n",
        "user_name = user_name.strip()# remova os espaços na string original\n",
        "user_name = user_name.replace(\"_\", \" \") # substitua o sublinhado por espaço\n",
        "\n",
        "print(user_name)"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "LYGHRijzTMRi"
      },
      "source": [
        "# Tarefa 2\n",
        "\n",
        "Em seguida, precisamos dividir o `user_name` atualizado em duas substrings para obter uma lista que contém dois valores: a string para o nome e a string para o sobrenome."
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "NOErvTX0TMRi"
      },
      "outputs": [],
      "source": [
        "user_name = 'mike reed'\n",
        "name_split = user_name.split()# divida a string user_name aqui\n",
        "\n",
        "print(name_split)"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "9uRRxzLlTMRj"
      },
      "source": [
        "# Tarefa 3\n",
        "\n",
        "Ótimo! Agora queremos trabalhar com a variável `user_age`. Como mencionamos antes, ela possui um tipo de dados incorretos. Vamos corrigir esse problema transformando o tipo de dados e imprimindo o resultado final."
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "j9TH2Z4dTMRk"
      },
      "outputs": [],
      "source": [
        "user_age = 32.0\n",
        "user_age = int(user_age)# altere o tipo de dados da idade de um usuário\n",
        "\n",
        "print(user_age)"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "pAjBZI5_TMRk"
      },
      "source": [
        "# Tarefa 4\n",
        "\n",
        "Como sabemos, os dados nem sempre são perfeitos. Temos que considerar cenários em que o valor de `user_age` não pode ser convertido em um número inteiro. Para evitar que nosso sistema falhe, devemos tomar medidas com antecedência.\n",
        "\n",
        "Escreva um código que tenta converter a variável `user_age` em um número inteiro e atribua o valor transformado a `user_age_int`. Se a tentativa falhar, vamos exibir uma mensagem solicitando que o usuário forneça sua idade como um valor numérico com a mensagem: `Forneça sua idade como um valor numérico.`"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "rB6ggdMXTMRl"
      },
      "outputs": [],
      "source": [
        "user_age = 'thirty two' # esta é a variável que armazena a idade como uma string.\n",
        "\n",
        "try:\n",
        "    user_age = int(user_age)\n",
        "except:\n",
        "    print(\"Forneça sua idade como um valor numérico\")# escreva um código que vai tentar transformar user_age em um número inteiro e, se falhar, vai imprimir a mensagem especificada"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "mRiGSPmOTMRl"
      },
      "source": [
        "# Tarefa 5\n",
        "\n",
        "Por fim, observe que todas as categorias de favoritos são armazenadas em letras maiúsculas. Para preencher uma nova lista chamada `fav_categories_low` com as mesmas categorias, mas em letras minúsculas, repita os valores na lista `fav_categories`, os modifique e anexe os novos valores à lista `fav_categories_low`. Como sempre, imprima o resultado final."
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "WpeCezPvTMRl"
      },
      "outputs": [],
      "source": [
        "fav_categories = ['ELECTRONICS', 'SPORT', 'BOOKS']\n",
        "fav_categories_low = []\n",
        "\n",
        "for categori in fav_categories:\n",
        "    fav_categories_low.append(categori.lower())# escreva seu código aqui\n",
        "\n",
        "# não remova a instrução de impressão abaixo\n",
        "print(fav_categories_low)"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "wtdhH2U3TMRm"
      },
      "source": [
        "# Tarefa 6\n",
        "\n",
        "Conseguimos informações adicionais sobre os hábitos de consumo de nossos usuários, incluindo o valor gasto em cada uma de suas categorias favoritas. A administração está interessada nas seguintes métricas:\n",
        "\n",
        "- Valor total gasto pelo usuário\n",
        "- Valor mínimo gasto\n",
        "- Valor máximo gasto\n",
        "\n",
        "Vamos calcular e imprimir esses valores:"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "FJrkCnPTTMRm"
      },
      "outputs": [],
      "source": [
        "fav_categories_low = ['electronics', 'sport', 'books']\n",
        "spendings_per_category = [894, 213, 173]\n",
        "\n",
        "total_amount = sum(spendings_per_category) # escreva seu código aqui\n",
        "max_amount = max(spendings_per_category) # escreva seu código aqui\n",
        "min_amount = min(spendings_per_category) # escreva seu código aqui\n",
        "\n",
        "# não remova a instrução de impressão abaixo\n",
        "print(total_amount)\n",
        "print(max_amount)\n",
        "print(min_amount)"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "teiKWjy4TMRn"
      },
      "source": [
        "# Tarefa 7\n",
        "\n",
        "A empresa quer oferecer descontos aos seus clientes fiéis. Clientes que fizerem compras totalizando mais de $1.500 são considerados fiéis e vão receber um desconto.\n",
        "\n",
        "Nosso objetivo é criar um ciclo `while` que verifique o valor total gasto e pare quando ele for atingido. Para simular novas compras, a variável `new_purchase` gera um número entre 30 e 80 em cada ciclo. Isso representa a quantidade de dinheiro gasto em uma nova compra, e é o que você precisa adicionar ao total.\n",
        "\n",
        "Assim que o valor alvo for atingido e o ciclo `while` for encerrado, o valor final será impresso."
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "HPvkbyzATMRn"
      },
      "outputs": [],
      "source": [
        "from random import randint\n",
        "\n",
        "total_amount_spent = 1280\n",
        "target_amount = 1500\n",
        "\n",
        "while total_amount_spent < target_amount: # escreva seu código aqui\n",
        "\tnew_purchase = randint(30, 80) # geramos um número aleatório de 30 a 80\n",
        "\ttotal_amount_spent += new_purchase# escreva seu código aqui\n",
        "\n",
        "print(total_amount_spent)"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "jwzs5Ad2TMRn"
      },
      "source": [
        "# Tarefa 8\n",
        "\n",
        "Agora temos todas as informações sobre um cliente da maneira que queremos. A administração de uma empresa nos pediu para encontrar uma maneira de resumir toda a informação sobre um usuário. Seu objetivo é criar uma string formatada que usa informações das variáveis ​​`user_id`, `user_name` e `user_age`.\n",
        "\n",
        "Aqui está a string final que queremos criar: `Usuário 32415 chama-se mike e tem 32 anos.`"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "Da4RJ_gLTMRo"
      },
      "outputs": [],
      "source": [
        "user_id = '32415'\n",
        "user_name = ['mike', 'reed']\n",
        "user_age = 32\n",
        "\n",
        "user_info = f\"Usuário {user_id} chama-se {user_name[0]} e tem {user_age} anos.\" # escreva seu código aqui\n",
        "\n",
        "# não remova a instrução de impressão abaixo\n",
        "print(user_info)"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "DAfqUxKhTMRo"
      },
      "source": [
        "Como você já deve saber, as empresas coletam e armazenam dados de uma maneira específica. A Store 1 deseja armazenar todas as informações sobre seus clientes em uma tabela.\n",
        "\n",
        "| user_id | user_name | user_age | purchase_category | spending_per_category |\n",
        "| --- | --- | --- | --- | --- |\n",
        "| '32415' | 'mike', 'reed' | 32 | 'electronics', 'sport', 'books' | 894, 213, 173 |\n",
        "| '31980' | 'kate', 'morgan' | 24 | 'clothes', 'shoes' | 439, 390 |\n",
        "\n",
        "Em termos técnicos, uma tabela é simplesmente uma lista aninhada que possui uma sublista para cada usuário.\n",
        "\n",
        "A Store 1 criou essa tabela para seus usuários. Ela está armazenada na variável `users`. Cada sublista contém o ID do usuário, nome e sobrenome, idade, categorias favoritas e o valor gasto em cada categoria."
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "ZAN1CrBGTMRp"
      },
      "source": [
        "# Tarefa 9\n",
        "\n",
        "Para calcular a receita da empresa, siga estas etapas:\n",
        "\n",
        "1. Use um ciclo `for` para iterar na lista `users`.\n",
        "2. Extraia a lista de gastos de cada usuário e some os valores.\n",
        "3. Atualize o valor da receita com o total de cada usuário.\n",
        "\n",
        "Isso vai fornecer a receita total da empresa, que você vai imprimir no final."
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "ehCh9ub0TMRp"
      },
      "outputs": [],
      "source": [
        "users = [\n",
        "\t  # este é o começo da primeira sublista\n",
        "    ['32415', ['mike', 'reed'], 32, ['electronics', 'sport', 'books'],\n",
        "        [894, 213, 173]\n",
        "    ], # este é o fim da primeira sublista\n",
        "\n",
        "    # este é o começo da segunda sublista\n",
        "    ['31980', ['kate', 'morgan'], 24, ['clothes', 'shoes'],\n",
        "        [439, 390]\n",
        "    ] # este é o fim da segunda sublista\n",
        "]\n",
        "\n",
        "revenue = 0\n",
        "\n",
        "for user in users:\n",
        "\tspendings_list = user[-1]# extraia a lista de gastos para cada usuário e some os valores\n",
        "\ttotal_spendings = sum(spendings_list) # some os gastos em todas as categorias para obter um total para um usuário específico\n",
        "\trevenue += total_spendings# atualize a receita\n",
        "\n",
        "# não remova a instrução de impressão abaixo\n",
        "print(revenue)"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "sWwO-Qa1TMRp"
      },
      "source": [
        "# Tarefa 10\n",
        "\n",
        "Use um ciclo for para percorrer a lista de usuários que fornecemos e imprima os nomes dos clientes com menos de 30 anos."
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "dRl-c6NvTMRq"
      },
      "outputs": [],
      "source": [
        "users = [\n",
        "    ['32415', ['mike', 'reed'], 32, ['electronics', 'sport', 'books'],\n",
        "     [894, 213, 173]],\n",
        "    ['31980', ['kate', 'morgan'], 24, ['clothes', 'books'], [439,\n",
        "     390]],\n",
        "    ['32156', ['john', 'doe'], 37, ['electronics', 'home', 'food'],\n",
        "     [459, 120, 99]],\n",
        "    ['32761', ['samantha', 'smith'], 29, ['clothes', 'electronics',\n",
        "     'beauty'], [299, 679, 85]],\n",
        "    ['32984', ['david', 'white'], 41, ['books', 'home', 'sport'], [234,\n",
        "     329, 243]],\n",
        "    ['33001', ['emily', 'brown'], 26, ['beauty', 'home', 'food'], [213,\n",
        "     659, 79]],\n",
        "    ['33767', ['maria', 'garcia'], 33, ['clothes', 'food', 'beauty'],\n",
        "     [499, 189, 63]],\n",
        "    ['33912', ['jose', 'martinez'], 22, ['sport', 'electronics', 'home'\n",
        "     ], [259, 549, 109]],\n",
        "    ['34009', ['lisa', 'wilson'], 35, ['home', 'books', 'clothes'],\n",
        "     [329, 189, 329]],\n",
        "    ['34278', ['james', 'lee'], 28, ['beauty', 'clothes', 'electronics'\n",
        "     ], [189, 299, 579]],\n",
        "    ]\n",
        "\n",
        "for user in users:\n",
        "    if user[2] < 30:\n",
        "        print(user[1])\n",
        "        # print(user[1][0].title(), user[1][1].title()) # Este seria com o nome todo com as primeiras letra em maiúsculo"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "zicEj6hhTMRq"
      },
      "source": [
        "# Tarefa 11\n",
        "\n",
        "Vamos juntar as tarefas 9 e 10 e imprimir os nomes de usuários com menos de 30 anos com gastos totais acima de 1.000 dólares."
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "ubyQ0OzeTMRq"
      },
      "outputs": [],
      "source": [
        "users = [\n",
        "    ['32415', ['mike', 'reed'], 32, ['electronics', 'sport', 'books'],\n",
        "     [894, 213, 173]],\n",
        "    ['31980', ['kate', 'morgan'], 24, ['clothes', 'books'], [439,\n",
        "     390]],\n",
        "    ['32156', ['john', 'doe'], 37, ['electronics', 'home', 'food'],\n",
        "     [459, 120, 99]],\n",
        "    ['32761', ['samantha', 'smith'], 29, ['clothes', 'electronics',\n",
        "     'beauty'], [299, 679, 85]],\n",
        "    ['32984', ['david', 'white'], 41, ['books', 'home', 'sport'], [234,\n",
        "     329, 243]],\n",
        "    ['33001', ['emily', 'brown'], 26, ['beauty', 'home', 'food'], [213,\n",
        "     659, 79]],\n",
        "    ['33767', ['maria', 'garcia'], 33, ['clothes', 'food', 'beauty'],\n",
        "     [499, 189, 63]],\n",
        "    ['33912', ['jose', 'martinez'], 22, ['sport', 'electronics', 'home'\n",
        "     ], [259, 549, 109]],\n",
        "    ['34009', ['lisa', 'wilson'], 35, ['home', 'books', 'clothes'],\n",
        "     [329, 189, 329]],\n",
        "    ['34278', ['james', 'lee'], 28, ['beauty', 'clothes', 'electronics'\n",
        "     ], [189, 299, 579]],\n",
        "    ]\n",
        "\n",
        "\n",
        "for user in users:\n",
        "    soma = sum(user[-1])\n",
        "    if user[2] < 30 and soma > 1000:\n",
        "        print(user[1])# escreva seu código aqui"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "kQX82mWVTMRr"
      },
      "source": [
        "# Tarefa 12\n",
        "\n",
        "Agora vamos imprimir o nome e a idade de todos os usuários que compraram roupas (clothes). Imprima o nome e a idade na mesma instrução de impressão."
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "obZTnKq2TMRr"
      },
      "outputs": [],
      "source": [
        "users = [\n",
        "    ['32415', ['mike', 'reed'], 32, ['electronics', 'sport', 'books'],\n",
        "     [894, 213, 173]],\n",
        "    ['31980', ['kate', 'morgan'], 24, ['clothes', 'books'], [439,\n",
        "     390]],\n",
        "    ['32156', ['john', 'doe'], 37, ['electronics', 'home', 'food'],\n",
        "     [459, 120, 99]],\n",
        "    ['32761', ['samantha', 'smith'], 29, ['clothes', 'electronics',\n",
        "     'beauty'], [299, 679, 85]],\n",
        "    ['32984', ['david', 'white'], 41, ['books', 'home', 'sport'], [234,\n",
        "     329, 243]],\n",
        "    ['33001', ['emily', 'brown'], 26, ['beauty', 'home', 'food'], [213,\n",
        "     659, 79]],\n",
        "    ['33767', ['maria', 'garcia'], 33, ['clothes', 'food', 'beauty'],\n",
        "     [499, 189, 63]],\n",
        "    ['33912', ['jose', 'martinez'], 22, ['sport', 'electronics', 'home'\n",
        "     ], [259, 549, 109]],\n",
        "    ['34009', ['lisa', 'wilson'], 35, ['home', 'books', 'clothes'],\n",
        "     [329, 189, 329]],\n",
        "    ['34278', ['james', 'lee'], 28, ['beauty', 'clothes', 'electronics'\n",
        "     ], [189, 299, 579]],\n",
        "    ]\n",
        "\n",
        "\n",
        "for user in users:\n",
        "    # repetido = 0 #variável que garante a não repetição do print\n",
        "    for shopping in user[3]: #and repetido == 0:\n",
        "        if shopping in 'clothes':\n",
        "            print(f\"O nome é {user[1][0]} {user[1][1]} e tem {user[2]} anos.\") # poderia colocar o metodo title para deixar o nome correto, porém não foi ensinado.\n",
        "            # repetido += 1  #Soma para garantir que ouve uma repetição."
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "JJaO-qysTMRs"
      },
      "source": [
        "# Escreva quaisquer comentários ou ideias finais aqui\n",
        "Eu já conheço bem o Python, tive dificuldade com a primeira questão. Mas logo percebi que as respostas estão nas perguntas seguintes. Minha dificuldade era que eu só via um problema real na instância 2, pois dificultaria o tratamento com str, como encontrar o primeiro nome ou ordenar alfabeticamente pelo segundo nome.\n",
        "\n",
        "Em algumas tarefas, sugeri soluções \"novas\" que não foram abordadas no curso. Na última questão, em especial, apresentei um tratamento que até seria possível de ser cobrado, pois os conceitos que utilizei foram dados até agora."
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": []
    }
  ],
  "metadata": {
    "colab": {
      "provenance": []
    },
    "kernelspec": {
      "display_name": "Python 3",
      "language": "python",
      "name": "python3"
    },
    "language_info": {
      "codemirror_mode": {
        "name": "ipython",
        "version": 3
      },
      "file_extension": ".py",
      "mimetype": "text/x-python",
      "name": "python",
      "nbconvert_exporter": "python",
      "pygments_lexer": "ipython3",
      "version": "3.12.5"
    },
    "toc": {
      "base_numbering": 1,
      "nav_menu": {},
      "number_sections": true,
      "sideBar": true,
      "skip_h1_title": true,
      "title_cell": "Table of Contents",
      "title_sidebar": "Contents",
      "toc_cell": false,
      "toc_position": {},
      "toc_section_display": true,
      "toc_window_display": false
    }
  },
  "nbformat": 4,
  "nbformat_minor": 1
}


=== DIRETÓRIO: Sprints\sprint 10 ===

--- ARQUIVO: Sprints\sprint 10\Análise de Dados de Restaurantes nos EUA.pptx (latin-1) ---
PK     ! »Õeé
  
   [Content_Types].xml ¢(                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                  ÌMoÛ0ïú]XI·µÝ§v;í£@;`WÍfµúÄdÍ¿d'¸s2Å«/$/Ez|õ$E²ë¸V¥CÊuÁÕ,#?î?.Iâ©	­ #+päjròf|¿2àï­\Fææ#¥.d.Õ_j+ú¡QÃòG6z6Ó\+d2¾)[L>=ùéäÁÀ$×a.@¹@}jv	óÍÛqaÆ3ôët©½ÖûH½giãæÜ¸SoðB°òrµßw Ü2ßôVÔ¤Æó~¥múw¥T=ò
/¤wIëbR<¦qµÙDL¾p¨åO)(G·V7Ú=°ÈaûGîÉpÖ·ÿ!$~ò+sè/n}(;YRÓÞiMÓ
Ç!ñ©K±ï^@i·ÉÍÚàè9QÓnc
åmí¢ÂmK¿;!Ø
· ¡ú?R¦5"û%àW¾ëô^7â[é®ïE5è¦FUÚÿÊÔMÕcê¦Å1uSÙâÞ÷é¼L=dºì!Ó2}zÍJ^{Uãwë«ê-Ë·ÞwÐ·i^÷ÀìÕml#zéèýAè(]uHGj´ÓòcÆä   ÿÿ PK     ! G¿Ð  u   _rels/.rels ¢(                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                  ¬ÛJÄ0ïß!ä~îz@dÓ½aïDêÉ´6©ì¾½¡à¡P«à^fæo²ÝlÏÞ0&ãäë¢äòÚ¸Vò§ú~uÃY"pzïPò#&¾«ÎÏ¶Øå¡ÔX¦¸$yGnHªC©ð]î4>Z |­ ^¡E±)Ëk¿3x5a²½<îõgõ1àÿØÂ"¡|ÄUy:É»°b$¹öê!Ó(2y¡Íi¨ì³ÓÏ¨|öíOBë¿ù¦1
ï¼,:ó&¾B "¦\ÓK7tuJ!5$òö'3KJ§TÂ¡Ó¨¥ #1ù,Õ;   ÿÿ PK     ! è  Y     ppt/presentation.xmlìÍnÛ8Çïô^¾¨)²§ÀHT,¢N}ú }±%EÚÂ(>äp3?Mý}ù~Ûë	3Þt4Þ,LË®jèc
>Ýv,.­é(NÁæàýâÝ_ý¼gc*®Cù¥`-D?w^®qøE×c*muÇZ$ä=:CÏ2|Kßu#§E
ÆýW×M¯»rÓÊãuÉ_7=ßEë'Ú¸iJ=áÕæcQtTpI,dÙTÿ".0û§ºåâhÅjªøaDP²csµ"-8KçWî´Z; ¿r§cKÿÔÌÑkó¸øµy62'
Ç¬¾Xå63B×íU¾¤ JÂd^6/Æn}ÀPqÛïTn»Ã®
×hCÄ=Þx!xqÔÚrÉÌènÉ,TcjZ
Ù·'âõr"²õ¬DÈ£jùqgÃââ¨½¼/s\Ñ²ÖöêkVûÕ¤÷3õ­M§OéHS
!ÃDõ,¾"LÇ[oe¼Kµ=0Ö¨(ïsë#~¶îºÉ.îQ®Ô6DôäÇY®=m²BsFî·ÔÆHJ>2d¬AäØYã¼S8=OÖWh[ÄnS ÃXUxýv ]:8Öß3è7­èÐð Úb/:~SÒ
¯!H'~I¿)i×¤}?vOZzÝ£ÕÃË=F·4gÕ+5Ôf¦Ò´7®|»[nh)ô+Óÿ£g8Æ#1¦×Ýãi
á8*ÓÛìÌñ4GÏp8Fa<½«ÎOsTð%óZbôs96ÚF¬
kRð5Ï¯gv±
ßÎr¿°ó~7	ü¦Ä£çJjÊ;êÁW:µmJÖñ®e×ÁëôÝ3f}××sµJµ(je+üóÇÏïµDO0hµ¯G0w¡í{^fÃ+7ùù®ç70ñfWWIì<H¸Ýl¯&ø:ZÔÂðhqÇFÀNÐS]ÁtfÌôøM¹¶
ý<´ùNfÏ® ½<óÜL×ª>l
BÜ×ÄµÈRÒÏ]ãÿ  ÿÿ PK     ! <Â%ÝÀ   7      ppt/slides/_rels/slide4.xml.relsÏ½jÃ0ð½Ðw·W²-¥XÎR
L%}C:Û"²$trß¾mèÐñ¾~®;?/îÙÅ ¡

&Z&
?×¯w\0Xô1ÎýóS÷MK=âÙ%U	¬a.%}(Åf¦YÆD¡NÆ,µÌJhn8:5ÍÊ{ú)«!¶qÝýÇãè}F³.Ê½³tÁ-®¥²'*¤Ü÷K¯²Fê;ux·ÿ  ÿÿ PK     ! #®÷×   ¾      ppt/slides/_rels/slide2.xml.rels¬»j1Eû@þALoi×àµnBÀà*80H³ZÕ¼4^p"å¼Î=Ìþp
³ø¢Â>E
½ì@P4Éúè4|ß6Ï ¸b´8§Hb8ûw±¶#|fÑ(5Lµæ¥ØLeÊÛdL%`meq*£ùDGjÛuOªÜ2`X1ÅÑj(G»q^2ýÆÑzMæ(Ö;ÊÝXU
Rª@Öão¿9:P÷5úÿÔàÙ[:á.u%sÓ_-ídø1S«¯ß   ÿÿ PK     ! c\#´À   7      ppt/slides/_rels/slide1.xml.relsÏ½jÃ0ð=Ðw·W²;,e)C§>À!mQ[:¹Äo1tÈx_¿?×]îË,þ(³AC+lt>~n_ï'\08c 
1\ÌÛ¡»Ò¥ñäªÖ0ÎJ±hA1Q¨!æK-ó¨Ú_I}4ÍQågÌÎ½Ó{×¸m^±ã0xKÑ®òOâÙ;úÆ-®¥²G*¤|îïZY#@NíÞ5   ÿÿ PK     ! 'RQ  ¤   ppt/_rels/presentation.xml.rels ¢(                                                                                                                                                                                                                                                                  ¼ÍjÃ0ï¾Ñ½¤éqr)
¥M!WÕ^;¢¶$´´yû¤¸v"áã¤ÙY	Í?MíÀ¢Ô*ci°T®©ª}¬oîY$T!j­ c{@¶__ÍÞ äáFÂmÌ#ço kÊ­Ú6\i+nDþ%*à£$rÛõ`óg´,2fë¿Ú¸Ä[¥ÌáIçÛiÁ±8Ca+ Ê?u;7ÆÏC¤ã$>kx§}í²lY:¢$(H¾EÒÍÚuk1âø_å ûhî";Û¡8G1õAe¸d.#o$CÓx³tKüÍd'áûÕjÓyÀ­ä£¸(
ï<Ò$$±'Q´b<ö$£ØÛá
ç!$ÒxÕ{;Z,Þû[ç¿   ÿÿ PK     ! ;ßaÞ   E      ppt/slides/_rels/slide3.xml.rels¼MK1ïÿ!ÌÝd»Ei¶
¤þ!Í7dRqÿ½/](âA<Î×ó>0»ýGÅ;ö)jØÈE¬NÃëñéæWçIÃBûáúj÷B3ÖvÄÏ,%²©Öü ²Lb©¬­,Ne4oèHõ]w§Ê9S¬r°[Ç%ÓoØi½¡ÇdNb½¡|hÙ
ÅQÕ ¥
d=~÷·2Gê²FÿoýO¿ÔàÙ[zÆ%êJæ¬¿Zº-âËL­?|  ÿÿ PK     ! ñÛÆ  
     ppt/slides/slide1.xmlÌÍnÜ6ÇïúÎõ­Yú$aoh¯PJdIîz7A¦§zÌøÅ2¤$¯¿
8Zä"Rg83ÿI½z½ï)Ú!;6¬,ïÄµÖvÃõÊú¸®íÄBRá¡Å
de´^þüÓ+¾´E`=È%^Y¥øÒqd³!='¾]1Ñc¯âÚi¾¯=u|×w5ÙØ³««®!%k¶=ÔèDD.7³7þo\	nõN!³æ¶º|-Ñ½a÷Fð~&Ìçßvgu-ÔËBî¡,3}¦×ag:Î#óë¹û+ÑërCûÅ?è§£ÇÈ^¡fl£ÍæÃ3sMõÌlg^À¹·¨Îjîi:þÎúöoµ¥yÖÉ;©æ¶¢[YëÚÏ£ªízvèæ¡Waj×~Tþ¢.ü þ¢­½xÙbêüë/^üD£¾kìJ4¬Äy¼p"FÇùÙM¸ÊÐ®ò2¶Ã´Èí¤Ìta¸È¢"ëúËTynMÎñú,äïXó»D©´²£rw3F9uË7H8T©QbÝ)J`|ZYl±PDLvãdÓ9Ö}âBísÖô¢ÐA¼¤R]¨%æë	K4ëÍÈCþFã¶ê(¿:ÍÛ?i'	j	*qË¤îØ¹[Et^U3]±Æ=Ú3,ðùãUîûwL<Î1ngfèI
f.¶jÉÿAaò¢Ü]d^`©WÙ¡-ì,;MÜÜ­âpFÿLr{ùLáþhÿAõ§jÏ)pZÖiª ¦KBIÓéóÉ_¯À"rÅ´ûoÿºýJäÂþ
;ñÌN»=.ÉÍPôÒS§~Q.üÈÎ"/z
ßÎ¼<°ËE§^¾|=Hjüár_òg.8
Ó4IÌµÅA¸./IRßóÇÂ_Äi>¸%@*!ÕÂz¤;+KFªã;Ó=<°º£toê)èF`ØR
lEF5iã6É¶
L¾GïáVoîî§¿eV,Ñ{ØHÝ ctÎ
~¦ïþY-ÓËó4ö$·s/¬í°LáÌ¨ãÈ®£ <É ÒÌq/|Ê¾9Înà¬3¿;;a·ÃPÀ  -]7G
Mls{ÇÖôÓPñó;SCXÂq
ô8õ8Eçvß   ÿÿ PK     ! ,!Üë  ¡     ppt/slides/slide2.xmlÌXËÛ6Ýè?ZG#K¢62	¬W mÉº %z¬VYv<
ò/
ºte7]Ö?ÖKÏxÒÔi27ÅÇå¹÷zütÝ6hE¬Ywj¹'#Ñ®dUÝ]Z¯/
;¶T¤«HÃ:zj]Qi=}òí7ùD6ÑSk¡8,´%òqÚAÛ(øN%È°Ú67NKêÎ2ãÅ!ãÙ|^4cå²¥ÚÈå¢ærkb*ÁL?ú¤'àYyÞTú-ù TºÕ3ÁÏù+Ñ7¿z%P]A¼,ÔÂb9¦Átë?»U_pö_nd²V¿Á7´>µ øWúéè:ºV¨*Ë]m¹xù¾å"ÿHog;skRíÕ î¾;ÞÖÍµlr-äT[LKQZoÂK¼Àv%l'9ÛçÇ¹©çïôh7öq~~£7¼ÇQ[I6W'%k
Ù[Í =.6Ñ8ßFÓ<KüÔ§EbOpdÇf0ó4õ£w&yûî½pÇÆõ-¿`åOu¨ÒÌÌÝôèÔo¾@êCT­jú
}ag£µNXu¥'Á»¯$FªsuÕÐþëGC 
Ñ+;9{N«Z¨ÝêÉóN	V-7×ß"i7+BTã¨E$U{hW½"íÛº
Èépv:[ý³ÔðVj¹ädsÍÐ¬G±"CæC@Cþê/Æ>âÔö¢ÔµqLídSÎÓ©ûðúÓjÒÖ»î_AÅxð/§¬Stó'|â#e=Ç±ç®=y#§¹k'Þ6!/Èü ô">$ëòÀO¹áÜ{è­GÏãgï[3VP	Ôo~oQÝõG4ìjP$	àVd)CI¢üõôäÎ?×3wÊeG$â¢îÊZNþúõ¿ú³6ûê­ú/Ð£¯©\ÞÎ©*Ð<<Ý²Qñp¾ây	©zÅPEé6ïZÒ	Ê×¼aTÂ^^**6¤ªKXY¬ÙÛøR5º"];£
-kÒ3hÒòÍ5ÑÍVº;Rz¶¬|ç²K±y{5ù_ue.ÁÑaïcÈ\â8K sE¹$c{»Ù8MóhÓÿ+sÑûyI¨Åiþ§1$×¥[û´Ç§/ÑRïØ0°³qIk8JíÄÅ®»Q8ûEr õ&>DGl|(¥8J{û=Üu/©¹+|_7gMÍºizú¡ÄÂöîçU ª\èâºÁ©ç¶¡AZ¹ã#/èïÙ¾áÈÝ»ãv£(nÜî8Ô0ºsïø©QÖ"] ¥WYAXM£Cãs/Å¾bûbKE_2Jqè¥q¢,l#{ª.ã4ákAqßT&(ÎÞPÁYÝÿuqGFS+ÒÀáz{.
ipvh5ñæoJÙï¹êc
ãi_ÅµZ®».Úw÷7   ÿÿ PK     ! Çh"  û     ppt/slides/slide3.xmlÌËnÜ6÷úV-PZ7ê6HQ iÇy ZâxH¢Jq&v¼K,
èª».ãë!Eãq.çRoÅË9ÿùtHÎ{gm6L5ï-÷À±ëJ^ÕÝé¡õì¸À±I»6¼cÖ9¬{wþéN?
ÁènÑCk%e?³í¡\±¼g¼[rÑR	âÔ®}³¶í9Nh·´î,3^ì3/uÉæ¼\·¬ã$5TåÃªîi¶~ÙzÁF¾bÒ]ð¬|ÚTªúcÁªuû¢Ú?úõï'Õèe¡¶ e¦~ì6ºbï?ªtv¶­*Á7tvhøçê×VmìL¢rl,/[ËÕãô-Wô¶§ì÷U^Æ]w'Ü9¾ø[®BËXòpMkQZ¯ÂËEAp5LàlA\x~¼ð¢"÷üðµí³R0­ó-/nx-Fm]
>ð¥<(yk=1áq!FÙùÊ]xGRgqP`ûóÂÁ$HóláÎ4,^	Àæ©Ô^ØÆcãú¡ÈËçê8JEvÜ¶ÇNUö+$Ï{PIÖ²a¦ßøRW.u6È³Wçj(u#5|*Ï¦zõ£Íª¯8;uL«ZÈËpË»eÝÖ/éÅo9ª8z6@ÁÐ#Ö^ü#jªü½Ö²®zB=ÚûýYmm}i­=òq^âÅÐ-ÁG%6êa=tsÝR¼ty9¬9_Äs(
qå@e^DÐý@¤P]vÿ,}$â7sò8ç¼ìâ_xoi¬ß	2:ØõÒpàØO}ìGi)rI|ÏX/Á~Ú,M¤½ï5vóÅqÝóAe
6 º«ËÖb¶ðÄ@¼¶C6\I#,_´° Ç	ÉZX¦äÍº£ÃÔ&´jUZ±?ÖÚ_ºþ îdüÛ»7;9ë3«åÂ®pÞ0Ú}Ùfì×®]RÉN¹8¿éâ£nøëk¢O »SÂÇ¹n$È;»EïÞ±jmvàdôü G¶´[éÝæ«äSIÀÝL/Ô²fÅH9¢H{ñW4B½ïµÿ¹Î^`rKbR$IÌÄAIå8G.Î"áxq-RÿGm*ABNÄ!LôÿßÝ°¯Kcn]^»·÷èº·uG,|7ÄAL&pfÆYgxºDyD.Ù3øF!ª4Û	?ÔòHÎÒ¡g¥¼BÄVØ}ò*ä:Û'MÝuÓh  Äµ'Ü*½ÇR0Y®Tu	]ÀÑ©íûýF¸>p7#!	/Ð·.n~°sOóuÿr£Ä'~påúAÞg¼EªF-ºY
¦!Ñøl`ü$þÄä²)·¼EiàØÃdÎqìÁ	<ö(ð³8"~öäíÇÛª½XÒ¹è²Å±ãÍqDñ.Kçú¡aÉ÷ßÁ·bI7LnLâêA$ËÐËãgp %N0ÀEàgqûHïë@ã~ôü=¯õÿ9®c(ÙÐ¼&¾ãEkilmÛTnQ0ÿÓxDûÇ­5,Ù#×M½âoìzÙEùãþ  ÿÿ PK     ! ¾ÿÒw  
     ppt/slides/slide4.xmlÌÍÛ6ïúî\I©#Þ@¥"@Ú,v·ÀHôZ¨,²$×±äyzêäº/¡~âf7A}È¶¾ðwf83ßÀ/÷ÛÎÙq¥[Ñ/ÝàÂwÞ×¢iû»¥ûûm×Ñõ
ëDÏîk÷ååÏ?½Ý5h÷zÁîÆ¹ð<]oøé!ywk¡¶ÌÀVÝybïÀê¶ó°ïGÞµ½;é«SôÅzÝÖ|%êû-ïÍhDñð\oZ©gkòkRq
fí¯\ºÈê®±³·s»êw¿(y#¯ÔpýÛîJ9mùrm!-®7]LbÃ¶ß
ïúÝ¼dýZmí±9û¥É?ØÑ³g|oz<¬§õæÍ7dëMù
io~ÀûÇ£6ªÑ¹§áà9Û¿Í}'À<y­ÍìÓ½jîªÂ9-+*X!âçå%IQÃ¤ÄqUà0úhµhQ+>äùÕz	¢'¶m­ksQí{®À©b¬²²ªhî§È(EdUù(	óÑ1¦éêãðy(¼)â)ô¯Eývz¨,ÙÜ§åÆ1	Y2­éø$7^c§:0û\4ûÈ[C¶è´¹1iÁ
(:fO_C¼Ó¦UæÛ\ÐoyÇëÖ6ÐNÃkÃN_86Ú1æÑä÷íNÖ^õ
iÀ×´áø)výHÌ­BãóæÚú~sZ²¿8­¹Ú±F8^qnpðõ0ÈI"JJD(Æ(
ÒÑ*ü4©âTÏ_v¶¬Cû£ø¨¾ËüçB@©=|mx¦¬(.V(ç	Â¥I	CT8£Ñ*µ~þ³n=ÆçJÔÑäL)ûØÒ$ÎP^¬BDr¡,×ú$Î¨üÿª£-ñ?ï2\MÐÃsÜÞôLÁ§~I®*IH\f(cpø¸Ày²ÊÊô¹ÛûkØäÿ=LógwsXM´ò<pä(H?®4FYQTÑ"O²",--§´àð4ZR¼ãJvøßþlÇ:HgRLL)O#£·6ÕÓ¿½îÔ¯L¾Ù
Xà1Hr1I[
£èQÄÆz  ÿÿ PK     ! ÕÑñ¼   7  ,   ppt/slideLayouts/_rels/slideLayout6.xml.relsÏ½
Â0ð]ðÂí&­4uÁÁEôäÚÛ$ä¢èÛÑã}ýþ\³M£xRb¼ZV È`ï5Ü®ÇÕgôÇàIÃöírÑ\hÄ\xpEQ<kr;¥Ø4!ËÉIÒ¹©WÍ{RëªÚ¨ôm@;3ÅÉjH'[¸¾#ýc®sÁ<&òùGâÑY:#gJÅÔSÖ åw¶TËªmÔìÝö  ÿÿ PK     ! ÕÑñ¼   7  ,   ppt/slideLayouts/_rels/slideLayout7.xml.relsÏ½
Â0ð]ðÂí&­4uÁÁEôäÚÛ$ä¢èÛÑã}ýþ\³M£xRb¼ZV È`ï5Ü®ÇÕgôÇàIÃöírÑ\hÄ\xpEQ<kr;¥Ø4!ËÉIÒ¹©WÍ{RëªÚ¨ôm@;3ÅÉjH'[¸¾#ýc®sÁ<&òùGâÑY:#gJÅÔSÖ åw¶TËªmÔìÝö  ÿÿ PK     ! ÕÑñ¼   7  ,   ppt/slideLayouts/_rels/slideLayout8.xml.relsÏ½
Â0ð]ðÂí&­4uÁÁEôäÚÛ$ä¢èÛÑã}ýþ\³M£xRb¼ZV È`ï5Ü®ÇÕgôÇàIÃöírÑ\hÄ\xpEQ<kr;¥Ø4!ËÉIÒ¹©WÍ{RëªÚ¨ôm@;3ÅÉjH'[¸¾#ýc®sÁ<&òùGâÑY:#gJÅÔSÖ åw¶TËªmÔìÝö  ÿÿ PK     ! ÕÑñ¼   7  ,   ppt/slideLayouts/_rels/slideLayout9.xml.relsÏ½
Â0ð]ðÂí&­4uÁÁEôäÚÛ$ä¢èÛÑã}ýþ\³M£xRb¼ZV È`ï5Ü®ÇÕgôÇàIÃöírÑ\hÄ\xpEQ<kr;¥Ø4!ËÉIÒ¹©WÍ{RëªÚ¨ôm@;3ÅÉjH'[¸¾#ýc®sÁ<&òùGâÑY:#gJÅÔSÖ åw¶TËªmÔìÝö  ÿÿ PK     ! ÕÑñ¼   7  -   ppt/slideLayouts/_rels/slideLayout10.xml.relsÏ½
Â0ð]ðÂí&­4uÁÁEôäÚÛ$ä¢èÛÑã}ýþ\³M£xRb¼ZV È`ï5Ü®ÇÕgôÇàIÃöírÑ\hÄ\xpEQ<kr;¥Ø4!ËÉIÒ¹©WÍ{RëªÚ¨ôm@;3ÅÉjH'[¸¾#ýc®sÁ<&òùGâÑY:#gJÅÔSÖ åw¶TËªmÔìÝö  ÿÿ PK     ! ÕÑñ¼   7  -   ppt/slideLayouts/_rels/slideLayout11.xml.relsÏ½
Â0ð]ðÂí&­4uÁÁEôäÚÛ$ä¢èÛÑã}ýþ\³M£xRb¼ZV È`ï5Ü®ÇÕgôÇàIÃöírÑ\hÄ\xpEQ<kr;¥Ø4!ËÉIÒ¹©WÍ{RëªÚ¨ôm@;3ÅÉjH'[¸¾#ýc®sÁ<&òùGâÑY:#gJÅÔSÖ åw¶TËªmÔìÝö  ÿÿ PK     ! ÕÑñ¼   7  ,   ppt/slideLayouts/_rels/slideLayout5.xml.relsÏ½
Â0ð]ðÂí&­4uÁÁEôäÚÛ$ä¢èÛÑã}ýþ\³M£xRb¼ZV È`ï5Ü®ÇÕgôÇàIÃöírÑ\hÄ\xpEQ<kr;¥Ø4!ËÉIÒ¹©WÍ{RëªÚ¨ôm@;3ÅÉjH'[¸¾#ýc®sÁ<&òùGâÑY:#gJÅÔSÖ åw¶TËªmÔìÝö  ÿÿ PK     ! ûúà  "  !   ppt/slideLayouts/slideLayout1.xmlìZÛrÛ6}ïLÿÃwF¼òDÎèê>ØÇr¦Ï0	I@²ÕLgòCýæ±ý|I©%ËÎÅu&µÇ#àî{°{ôòÕMAÑp³²c¹/2eY^N;ÖÛËXHH\f²t¬%Ö«ãzY	â%K¤lâw¬ÕQ«%Ò)°xÁ*RªgÆ,Õ-¶2¯í¶<ÇZÎK«ÖçÑgIKç)¥1Â	ÅRÍ_ÌòJ4ÖªX«8ÊhoOIÌØõð±²¤PËJ¹/sI@/Tk+(Ò1ÍPÕ1¦yFú¿üçO9§ê¢[åâWãêÚëÅ9Gy¦ÍÔêV«~PÁm¹Fëú´iâ£	/ôUÁn`¾KýÙÒ}äF¢Ôt¦ëÞtöfl:în5´6­ò0lü:ál^¡ø¶{zL0sÊÒwÂø¸ùô>ßÑÕõË}<ê!Ñv$|ãaQàúC%\©¾Û>¨ÙÓ rAR[SJ·B¦ELPÉú3%Cº³ëÁÐá²jNëIl Då	ÇËczÉâ£yBXt£cqåØÅS!h#bg£RÄü5³ñë\r@g*i ¦[ðéUr´ÀTuÁ_=©ØáÉ] k2/eýØø«ª¶Vöâ®­\jh^"¬Y4)¦½Ö¨qéRLß§¦L&
]+,Nm]/Óçë}Ûõ§çµíQÄv0
B»;í¸í^;rv0ý¡çîG³<ËHy¤ál7ØáÉ"O9l"_¤¬¨	·ámE®SSäµJ¤Ð
,LÑ^ã"+äMãðT+rE4/:V²ÂéY0SÓnmÏ¬)¶èB'üÄãÐ·èØ½dÔ·»}7âa¯ßºÛH]ñõ`l-¤Ö\Yv²\ç¶=EòY®ª×éTÝTrkojÜÂñj
$ÑÚ0npX»SíÚ)s5b4EÈËz´+uUtqÍ±*x¥*öj~e:cÜÌ
9KJà¦§Ëìs|¡4)D;)í·ãzÕ£ÞË«JQ
´|±K(ÎÁV7x1öÆVTùO±â*×uªëdru\ÜMFQ¦ßíK)UcëÌ©³¨ÞµÕTCÂBÐØÌ°{ä>ö0&xÑÐÁÀîúÜ8ø~p+¡2|Ü`Ï-ëÏlñXlñ_·E
ÁcÂáÍ¤;Po
î(°ÏlðÌ?$ø[l Éøtlà·cöûÙ!<ÓÁ3üè Ø¢è©ß'
Ê÷³?x~exfóÖ{ù!Ú=mMÄ	¯ÌyüÃÏ]õµÕ¡Ð¾4ßß;ÖosÌµÞá=\â:Qè%Ô/^­ÎÇRãØ´æ×
üõIäê<úAk íuëyddrap£[·7ÄaÅ4'*Õa*hóÕúUÒî]hÏ9c<îÓü·9AZmD²\bæËtFäDg
Þ·laõw£»):ÄüjOt¨Éè5ÿü(C/ª£ÄOÈ»%
#Zú+£BµËKÅk¦ó+åå
¸¿VEO\*¦r[C
ý§´d7Ò\°÷H¡É}Af(þÎ é<
_|ó}_{Ë#á9ÑetP8¢þ Õo­;ú^ò«¹f¯çÅ>LaýNhh¼w}Çó{ÝÄNnWíLµË8=»×©]j·öµÕ[9+"T®l³Ôj=Ïjúôá¯òï>|\Sô·@Í/4ÔcmG])?ÃÕx^ÀoúÐUé-¥]hÍ9ÿ  ÿÿ PK     ! ­9+w  d  !   ppt/slideLayouts/slideLayout2.xmlÌQnÛ8ßè½+²lÙq:EäÄÒ6»`¤Q¬]dIZµ[èzæqs¤CJ´4í&ë Ý¢?g>ÇóüÅªb¤¥KÁÇA¼×	ðLä%¿oæÓpm(Ï)ÆÁtðâðÙoÏåH³ü®ÅÒÔàzDÇÁÂ9"- ¢zOHàø­ª¢_Õe+úµ+u;ATÑí~õý¢(ÊE¶¬FD£ý×Rj¯&¢&hq»o»dÖ£Ä©_ãàãÎf,'V¸0¿þlL Á
\_åÂh9W vÆëßÉ3åv¾ªÏ)s«Ô*Qû¡5s¯¼vèÎöK?¥£U¡*;"²xkkûì¬ÉÅl»-^ßc-Nî±üÑCmTsßÓõáÌKÃÄ¨¼¿ZìoM¸ÀxløMx&f;ÊEËÞX©Ö®ùè&[gZXf|m¹ÀÑ-ÒÓffÖÜ´çBµ©-M7Ìáo@$U@^ª ¦½Û ËÄ82Nx~Öç=àáYËN:W½_÷c|=Ïe7äÑå Hw7e¾Ú<GiC®Ù&ËUäY2s sÕÖ·7ïéâøù3¸\ò\~ý¹ö MÇ÷çsPê¢½ýsIydòÉß/ùÔø=¦n¥«|×ß~nð_ç=VpÊ Má¦2íÃn^³¸u+â¼)³7íü¹»§%×÷ä¦Bäu»â]ÙF5ðÞÚåùí\þüßXA^-«;ûOA¾¤+¿d}Eð!Ýïõ{Ãa8¦avã0Mûýpÿ`0ÒþÑñIüÑ÷0ÚrâËíÂ±¹WbÚòõÓþÏÕ×OWÛâþ·Kto°ÎjÓÎÈR6ô`ÐÓ0âø`?<úá´ßKI:<ôN>Úv*NF×¤ýûö.N¾kðª2SBÂìe¢j;ÅHw ¤(]³wÚö®¦¶ò÷{xØK:>!Ð7?:omÌlü82õÊ×µ»1<óaâ$v³m:mMlì¾;>ü  ÿÿ PK     ! ­>Çë8     !   ppt/slideLayouts/slideLayout3.xmlÔÝnÛ6ÇïìÝ;¨OuØ·iÔé0£D¢]»C¾Ë.vµX/7éì¢,ÛM:Ç
0ìÆ¤©Ãyþçè|ñrU2´¤².x5tüÏA´Êx^TwCçíÍ¤:¨V¤Ê	ã:kZ;/OüáÔ,¿$k¾PU= Cg®¸nÍiIê.hÏf\DÁ_yçæ¼vÉ\ìy±[¢rì|yÈ|>=çÙ¢¤j 2¢`ÿõ¼uKÐ¤5`ÌìÝ-©µ okýLIî c(0ä;§à{6e9ªH	crKïÿ lÎQNÐú÷¿scTI©îUË¤kiæ^-¯%*rÍ²Çµ¬ù[-MÇÝ~×vÉ`5¥nA´:»µþuõ])5Y7Í_?`Í/°vÛÜ­EµWÍæ¾v·îÜQäo¼j÷[KýZ£?ÚýÆ½Eã³nÅÜF@iµkN·H0üÀ¸^Ü÷öDIuÖbì%Ñ¾Ë
ZÔjÄóµ}-¸JªlÎ!YUÃdµª5£¦¿d¾Ð&ìÞ&æè±ÎÞÀPýöâé5oMà3
Æì²vfÓß"
ýc\ aD¿BõFoÅÕéï	"	¢y¡D©û?ÕqôÖJRÍTl@´Ê¯ÁZoªáÑª÷vj÷!ï­ÏFo=Ø]{ÍHFçåT"üñ×;°Ðª3?*
pßè#
"ÏóÓäÉipûxD^wª¨r(3ºk +¨¥fÖVr`{É`º¸CQõ~áùé6OC,/èx}?4þÄ·ybyaÇóÄÔKobÑ0Å©öã ¦X`Ü1Ncó>¨)l08<&;@M±À´jÚáAÙjö·qMy¸$i<l>!O-Q5ÒT0hs¼m±ªwªÕ1)l+Ò9Qt§"×ÿ{+R®£Ô°Y[É-MfÕýòXÕèrÀáykyÔ*7á\^ÛÚÏ¡ÝLÉF¼w"aV¿)íÿýâV¿)+ ­¯åíæñ½*ÂÁÐ
i¾¹ÿ38k	~;Ã)Gþy/è÷q/L}¸Bà~Ð»EgE^4Â7çk­S¾ìVML±UäË§¿ª¿?ùô¹+°èqA4M{8âsY+ÛCY£Q?ÆãtÔùá¤÷ÞÙ$z(Ãñ(=õ!ß¤æñKÞ^=üð«ËGYd×|¦N2^Ú[+ø{*/ÌEÆ÷ìÕcI>
¤~ÄköÖ¶f·:G¦Úh|EÄë¥,ù06CnZ6:í{{s;ý  ÿÿ PK     ! ÂçÆp    !   ppt/slideLayouts/slideLayout4.xmlìXÝnÛ6¾°w t¯èÇ²,MØiÕé0mk£H¤»C¾P`¹\Þ¤O²CJôOâÆÉ]ÈxD}<<çãá'oÞ.*æDª³C/:=DXÎM½C?óÒrF½%QÞÛ£z#zgxÉg¦zøÐj-zA ò)©°:à0x6æ²Ânå$($¾ß
â0L
ÌkÆËÇçãqÏ*ÂtíD5Ä¯¦¥PÎx7!7vôvHz) [}ÍÏ¯~÷ÅÉ9ôDÞ¤h® ãdºÀR
ir{SpSâRb,6ÿE¸vøûùDeaÜ5n¼ yÐÀì-[#¸3|âLÜ[eeZ -=X½¥¹¦,4ÊëÎ|ÝOÏw`óéétà&6&5YÕÁÝO'vé\­²rñ*qÆó?bò1é×é­uÎ¦S·ÆU«ZcLC^ôy±4\Ak;q*=ÒKJì0x)6%.´ßÿPs ´ü4#H`)J%âHß~Ó3ÊÑ;¢´$m±+`íñ?Âü£;aCuq¸Ó×rôÙ*b]P)§(~ê3lLÇÌ´XÀèÚÂ4ÍÂºj¢nÁfÙ®³V¡úI¢(1è;UTûÞ³XÖÓ¨£ cÃ¯I ^»Ü ïÀ&X ³µkâ^a Ìä>6ÚÁÀlïÃ: é>¬ÙÙu 0³}X ³»[½±0v	Sïsº§n*`3[ÉÔP@n{©­ýUï¡»sÚÒ}xÎÌXÁ»ý6'ô>íæzØç%9)å¶ö;ýmo'¸Lã²d»]¾´\%ÉMþÅäÊ®ÏäªÆ]#Q¯rõ*W¯rõ*W N®N°&[ZeÃ|îwj¡½{Yuu>ã»u§¶ÜQ]ÿ²Ì¥¹!çøÚä®ýÜµ¬Éûd
HÇß¯ÔÿÇß  ïgÕÕÓ`~ÈÁõN"÷¼?ÿ;"Çð£l(ø3ã8í¶üa§úÉ0mùYØmû'Q·§qtÚÆ_Ü·2<1Èe[8V`%¦ï_ÿbß|ÿz³ôß-¢mÜ/;èüÒf²,úýn²¾ß¡t;þñ0mûÃv+IýìxÐ:ýb~ý£¤Kb~-ÜDÜ;¨Ê\rÅÇú çUsº~M¤à¥=àÂæHbÍÛ$n§ínØÎlÅ66×ÚhMLþÐRùó¹]1êa`»DÉ&M9­!&ww¢sô   ÿÿ PK     ! 0[Ï  6  !   ppt/slideLayouts/slideLayout5.xmlìÝnÛ6ÇïìÝ»õm£I9ñ0 M²Ø} F¢cm©R´cwÐwÙÅ®ú ëåò&}dY¬:ìÃ7-þÈsù×±ùúÍ"Á³,¢äD¯t
`Ð0"÷'Ú»ñ°ãi ã(¦hKioN¿ÿîuÚÏâð-éÁ YhSÎÓ~·S ìM1Ï&%¯ì¾2ô ØIÜ5tÝé&("ZÑíÒN&QÏi0K0á9áq1ÿl¥YIKw¡¥g£z×§Ä©ð?Ðñbü@¯ï~Ö2fsqj§Âÿ` DÜÐ$E=þñø;UÏ²tÌ0-2ÿ¥£ô©.Wó¢P"®Z·xP©¯d®Ýî÷eõÈ«Xh"mKùÙ÷ð ¿Twéum0½h°ît×^å{êQº3x\yUÎ7K/iðKþH÷s÷V¹ÏòNËàKTa?Tj2°lW¤Q¹h¸czõxÑsäsé+©ëO<ÎÉi/|.eï;qUAý8ã#¾±jÏcXÌ"ÄÛ<gk·e{Í<Ê°ÅHn±wüÛ|ütGïgÈ¥pqÄ üñÅ¼ÅgX2¹"+&á°¾]ñ0é¼¥ÊÒåX{ÍUe¸nbà)CÌqÊ(jb Ee¾W^¡mÚõÄZº¥CÏËë=×QsÞ%¯ `JüÜåÈ±KµG"
ÅM]	YT½ò ²báYr¦w¥µ"F,½Ú*êU¢
ªYQ{ÐR3Ø
½§T*¨VE¦ÕÖÙ	«,ëXÉ*°öÖ3<5}±U`
k£¶/V²
¬»u-sç5a%«ÀzV2wOYV²
lo
ëØîR&YÍ:&«Ésu-BÏ¢X\C¸ØÅ¥Âe5ÛGÆ¬RÆpávMÉlì¯d2PSO
Ë5fß÷t-Ïµ[tÌìÙPìÃ½ *yÚ&LM¢³Mn¤d4-¶mÊÐj»±Ý[m7öp«íÆÆlµÝØm­¶ÿ-´9¦ZæícðýÇOsïÀT»¡9Æ,À{´xÏ·A!Æ´vAF¤yè¢ËÞZt©i¦èËò½fr©°>O¹ËÖ
»µ®Ð³c	v,Á%ØÿºsÚJ0Uñ¼¬«kÊ½µl[ViÙ±;aÇ2ì¿]¹¥b#krå¢y^­ývùêÜ*[jÔoòäa#çR*4¹;÷±pÖTÁÂ¯üøo_¯ß(\Í»(ª7ÏK£Å¡@7ò+ÿb|»@NâPàWWÚ¾}nv|Ëó;vÑñLÃï½s¡Ó¾¸ø­<Édð¥.«$()äËÇ?É_¿|ü\t¿$ªKy®#tþ2ãEÌX$¼ðýc>´ë¼çvÎÝÚ¦e
|ïl`
/DhõÕ±Óay`­'GVI0Ñ	Ð¤8ûê¦ô³FêøêÅÕIöLÛ1Ä$òZEÍ­¼ªÙÊ52þkÌÞ¢ôz®2&ëa n¥¹/Se"}/ÏûNÿ  ÿÿ PK     ! ]­`Æ  j  !   ppt/slideLayouts/slideLayout7.xmlÔUÝNÛ0¾´w°rÒ¤é¯héÏ4AµÂÄ!íÙnÖnBâµÆå'Ù±CLBÒ´ãóóï¸ÇGÛ¢HUr6ñÂKyV²«wq¾ôR³SÎÈÄÛåMß¿;cE³¼ã Sc<ñ
­Å8TZ
«.³Ë
køWA&ñWÈ]Ñ êtúAKæµñò5ñ<ÏËÌyº©ÓMI(Ö_¥P.xM6!46úwHz' ÛKÙµ¬¬ÁzSè<]Ó1\aQ¡Db`Ì(q.	1«?H±+iýOëDefâÛ8/hZ7ûÉj«OÂ¯ÇÛ\VF
h;ñ`Z;óÙj6ÆôÑg/ø¦ÅâïÀö®pÏÛ\;s¬	ZQÓH>4è +qÂÓkÖM§MûF¢¥?Ópù¾Á 1Í=(pÃ¨s¶Ê#ÎG½Mx¶3E/AZ#S¥×zGÕk¶°2nXß3}Ï]XzY¶Â3[ÿÂüuK°P\ÝÀqögæº¹%çøÚç.zîr-ò¾l°
?ûó;þÖ´Ì:ÝTOXì¾°ã õDÚ)ý"sX>ïñhÞ£ÁÈ_$½GÃÈOæÈâpGÙ|ÑoÜ*S'½òù yOOïo°w÷·w¦¾¶( èß
Ñ
·aE(Ýjh#Kè"IFýh6Lü$~<
üãe¿ç/{Ý8%ÃãYwqc¶kSIì®þ¹-ÆÏö|U¦+ëWíþHÁKûfvË×ÂUñ°?ê÷Ú4'-XsEÖ¦}T~Ââ¬¶ZpfÖ$àMkoÓ£iÝ½Ó_   ÿÿ PK     ! ³³´<¾    !   ppt/slideLayouts/slideLayout8.xmlÔXÝrâ6½ïLßAã{òÙdt:Í¦Kö[[YòÊíìÌ¾Ð>@sÙ¼É>I?ÉHÒö}ÈGGú~tdëÍÛeÆÐÊ"üÔÁ'-Q$åÓSçãõ¨9¨P'	NO-·g?ÿô&ï,¹ +1W8xÑ%§ÎL©¼Ûlñf¤89åðl"dFüÓf"ÉgàÎXÓmµÂfFRîTãå!ãÅdÆô\ÄórUHÊõ³4/,[~[.i4fôöÔ*oÅÍï×K\@vÎÀóxÌÄIÁ½»ME.èB¨¨È¯%¥Úâ_d>Î¯¤{¹¸(M4WÅá4«Ìüåc4kÃ§Ö$ÝåDfº å©[éß¦î£Kâ²3¾ïgïw`ãÙpºi'hnLª½*÷Ð×ºs*F^{e×[ä"þ£@\?ÚýÒ½5¢ôY·ù¬¿ÒT®|hûÅì´!ÆE·íµZL¼V+ò°WúqèVMKæ¼«}¬ôèhÁSÂãJ½)9Y¡ÆjÅ¨±çÂ¦°£û:ù ]ÅXJK¯éÆ:¾ÆöO®_2¢wb®ýåêlÀÒOsr"	¢IªD©»ïjÎzG%©æTÙAQ^Z/¥ä£¼ñq\­#7[OóOgÚ³6ÅÏºb$¦3Á*û²¼§ÉòrxÊ½ è4>ó cÜÖÏuÎ(ð0À9,Ñµüzºæj5¦ûëFX ÓÛõ7± ¦¿«klµ 0}X 3Üµ 0Ûû° f´k`vöaKÀ®£·  ÖòvìN*ì AP¤ ì*¶6U¹qêsÊ}zÎ1Î9üîû²8ÍzóÊ¦òRSýOþ6'RAéBòÝ¯­Qþú4Ò°)PÆóLZS3Â&N)[&QÏ=©°ï¸¬ðG*?ìàVøbÙBæ¬Oyê­M3j~	oxfÔÆ®Ã[êSSµÊzqßJÖ¯âë`_Ïzß*ÔÔ±âÃ^vPPË¹ðãùj*[ñ¹n£ùjJlùÚ¾9ç«©uÅ§ÉNÈ_MÑ-_´ÿê'E¢s¢èÅ|©%êá2d*õø×^[_WÄC¹
âµ»à5b7Q²Þ'}ÖQiã·çôÿ¿¶ß¥PÖóì¦Åð5¢X°¨wrÏøïr_è:ö^÷ý^Ã­ïz^£ÓF^ÐvF~Ïö¢¯ö{¿ÐqâàË¶z¬`t¦Rßþâßþøv{/0éóh{] âsQ¨ÊBsj/úÐDýFû£Þi7z£0hÏ÷ý¨7ð_õµö»±¤æBã×Ä^`ÿÁeHÆRb¢NbU·*Í\|¦2©¹XÁ­ê*dAôûbè&FUFam¶5«Õ52ÖþCËä;¿_ÁdPÓ§|ZÓ=DûnoÎþ  ÿÿ PK     ! =5ã  z  !   ppt/slideLayouts/slideLayout9.xmlÔ[nÛ8ß=zWu¿ØhRÄN<(¦A.h[Jd)Úµ;(Ð
uÓÇéNº9¤(ËÊ¥uwy1)úð#Ï9ä/Ï_¬KVDÔ«N,ïk!Re,/ªùõöfb§ª%®rLYEN¬
©­§¿ÿök_â
[Jªâk!%:N-Hëg
þ1Qb	bîä¿vIßuc§ÄEeþbþl6+2rÎ²eI*Ù@¡XÂüëEÁëÆ÷¡qAjÀèÞý)É
oyÝ¬-¤ÍÄ
<ë<Ï¦4G.¡áeç¤D+Ñ%¶¨ù DÕªÕOùµÐ¯V×¹å?~¬VºâÜé>o«x¸R´>± mõë¨6²(k³®5[¼~À6[\<`í´8;*¯ÉÝwÇoÝ¹)$%ÈÛzÕÎ·æ,û³Fû{[ÆgUò	¾T(c×ü©+Ýd|?Mµa
	uïD%
Ó8t·Q'Az×åÍr=bùFu¾\ÅU¶`°No$­åTn(Ñõõ¸2¡sØHÔRm9½¦úÈUCÞ¶oíú«í®«}È¥=zÓ)OÇ´x·$cÉbH~ý,¡W¤(¦Ôd
Uy
Öj*
TöÛ©×·jç¿ê MõuÉ¥ èâ,Í@þ1»Î¡T2þØó$úNöCÏSKdßô?óK½*9QUÝky©{í¬Àß¸]ºêw¨0JÕ^<¿óÀ@/èx/ÔNïÅS[^Øñ¼ ñÔÆÚ¨þ¨(í SHÚa@E1À¸Â"õûy ¢`²LB¹biT´ýÒ*vqE9X*¾~Î`Fp^dð:YZúýøK)Ü¾{Ô&ßU£àj¤ö¾¥c¶ÀtfIëÜÁÂðÖi^;(SêÂS3È&L^oã?]¼Ð=]¼Þ=0
¬K=Þd©Ç;*õxG¥ïÔã=.IÛ#ìÏj¤B$aûµÇ¦º'SHQÔJÑ9ýQx)Êå=!ò=ªDzÔ}õ¢ËÇgÔãxÜFnÂxíÆNá»MðÞ-±Úøýàù_ÒÆoJXÖWËòöNãcD¾ùý` ðJüuÁÇ¸
Á_çþE¥î=òcßÇkÎ.|;O¼³Qê¹ÿcûi_«8UàK_=¶IÐ:cTäÛ§¿«¾|ûô¥ô°$ê¢½ ñ¹¬¥©¡¥(ÀÑhûãtd¼pbçÄ>Ä=0Ò³qpñQ]2xá0Dß]¼ÌÛ[/¼wïQ`5Ég+ÍÃÙ{"8+ôç[¦êtâpêãè©µ¥¬Z"Så>T¼ÂüõJ'Æå0ÖM¼¨æf5u&ÊõöÎèô_   ÿÿ PK     ! DdÆÝ    "   ppt/slideLayouts/slideLayout10.xmlÌVÛnÛ8}_ ÿ@è]eËmÔ)|],¶iìî;+ba)%iÕÞEþP?`û¸ý~Ihç¶mÒh_D9s4§Ï¶%#(]>
â£V@§"+øÅ(x½ZýhCyFà0
v g'O~{*e§t'6 ×C:
ÖÆÈaét
%ÕGBÇo¹P%5øª.¢LÑw]²¨Ýjõ¢<hî«»Üy^¤0é¦nj_¯©=¼T ÆÝ¾ÙIÌ1«m@ªð$N0õtÉ2Âi«ÏÍ	d[#Èx¥H)svZ®Ýñêw%òL¹ë/ª3EÌÂ50AÔ|hÌÜ+¯Ü&ºvýÂoép«Ò®HÙ¬ÞÎ>#{á´>L§éúå-¶éz~uäDÚ¬êàn¦Óöé¬
ÃÄû¬|¼Zô/M¸À|lúuz{:g»ÊuSc¡»ú£ÛiÈ2ÛÈvÖÉ\Ý!2mfÇÀ½Hûpa(Q+qiÂÉyÍ9²âí¤È
CÄ4~Ú(°Ç¡õùxøzÙp']¨>®È÷ÿôu<}^DNSäÑÖe Hû1(µD¨µ_<@ÿÛÃåûðl»¢ µA×LÞd]Z*¶×Û}« 	²_0\3 Æýhu=ôÔ¤_÷é²ú¶Ï%\lx&ÿü±vLWoc®@¥P¨{v¾újC¹drÈßùØúN¼¾gÔÀY»Ì*ëe¬ÿÆ¾OYî]÷±t·¯XÜA~^7åKÇvÉÜUàqëzæBäë2w®Äå.7ª&ï­(Ïßt_¿çoÉ
ì /6åk,vEúV"]ÃøDæ8ªX
þ9n
³y<»I;	Å¸ö;ãyØõÇö¼ßßûÉG[8ærµqìàZLÓ@¾|øÿ÷éËOæN¬nñCöùSmÙ¨³L½ö´?	'q²Ùà8/zÝpÑí$ÉtÒO;ó÷vøaªÀvd~(caY¤Jh£TÍ|Iñ1ãV3VÔ6é~<8î·»=ßZ06¿ºh­F6\zNåËÊU¡¦îHâÜÈé`bs÷3õÉW   ÿÿ PK     ! ÔÏÊ  {  "   ppt/slideLayouts/slideLayout11.xmlÔWÝnÛ6¾°w t¯H²~buÈ±iÅîîYQ$KÒªÝ¡@_¨°^®oÒ'Ù!%9¶ã¥ÉaØIQÏù>£ãgÏ×5E
ªâlì'¾ËyQ±±óz1sR³SÎÈØÙå<?ûñgb¤hq7|¥`05Âcg©µyÊ¤ÆêÂà]Ée5<Ê¯ø`×Ôø~âÕ¸bN·_>d?/Ë*'<_ÕéD5ø¯P=xDÝ½ïÞÑJSrÎÅÚAÖ^6ð&pÎ|NÄp
²Ö´øòI¯(G¿ÂÖ*ÇÔÚ)±k~b.®¤Ýþ²¹¨*\ãxÝÎÌ>²ÆN¼í7ýÖ¥¬Íô õØ7æ×3kàÊÛÅüv5_¾:b/§G¬½þ oçPUëÜÝp}8=È²mx½ãJ\òü7Àm[6x3e'6Pâ²éZº]­©Üúx d&ßøiâp¤QhßâhD­Å.-´éuÆÙýF`Àx4v6Á·°Té¹ÞPbù±NI0¦ØdÐnvÝÚê³	­Þ®XbDJc8ÒÝ½zAÄ8¢­;°â
¬¯·x¹¯çÃÂzÛ{i¿_½ð®z+s²ä´ 
BHC×p¾aÿÑz~ïÑ3NNôßÔSêºM¤Çê«èZQ´­%­ÒjOêVÎÃ3-_÷9'7+VpÄ¾|j} ¦Uø~Ì9©ä#@Ãoþ²ÂR?2zdÅC>uæD}æ\`MöÆFþ½	S@¨÷ðaÃ´ìS¥½Æ+öÔÃ½wí¼¡AçVAÊëök³³læ;æV§e.îq®¯]î¬ÄßË]©eKÞ[sÁìùûF­ù¿ðôüÍiäåª~sÀbü,BÏÐG´ã¿ ²ÌPð{æGþ4	®enÄSwLî$Å4i}è[;exbË~áØ`KLW@¾~üýùùëÇÏ·Åýg"Ú¡ï¡Î_*ÝÍÐJV&,MaæfA4s£ôÔ=%±;Ã(dÃóI8ý`ºÊ åØÞõç¢ïzèNß[W¹äú$çu×@{¿#RðÊöÐßu½
6_ð4Oý0ì/øÖÖ[sGæ&~©|Å«Æ*Á}Ø%M~wnMLìý³¿   ÿÿ PK     !  ±Eô	  ú`  !   ppt/slideMasters/slideMaster1.xmlì]ËrÛ8ÝOÕüÛ)E|?T»lYÊ¤ÊÉxÚîê5DBÇ$È!ÙNWWå[fß0½þ|ÉàEHYV";#.ñ88·?Üe©¶¸LrÔ×Í7®Aåq¦}ý§ëQ'Ðµ 4G°¯ßÃRÿáä¯y[ôÊ4þ J±FË@eôõ!E¯Û-£Ì@ù&/ ¢ygÐ¯xÚ1¸¥egi×2¯éò~¼ÏýùdDð<æDDa
m9K²*­Ø§´ÃÃï^kÒ	í_tÆìs</ñÉ[Ð+ó4GIò/¬h8H±¶ i_OM½{ò¶»a'°¼ª$~Á
.k!»Bw¸¸*X.­ýãâkIL¢kd{V6Ïfü+ZðîÆíÓêôî&8c:í®¯Sß³¿]Þ´;¢E"1Z¥F³4ØF³au·ª [«T^îêa/ûõçóBó7»ÇêäÅ\äÑM)úXÏ}¨ïÚøöCÓòÁäú¾H¦ø-zè®çö~¨¸ËÛÛw`SJ`P±¼
éhBÍZ"SÁR
L4fÔbßÎ K6\P5á´jD
¡¼Ãà~o\+hé(è¸$ï`iì¢¯cÚ^.XÈ	°2|h8'?'dv5dòÌÞ#.´"/«äOÇË9gð²Ó²níò¶;¸%È2À»FDd¶èkBÌeóYÐP¹*mw»øìO 
0ua¦H!ìò·Fì/ÊÙw+Rê¼Â#Kgnã¤¯ÿcYagä~Ç9n'ô cáYèNè~cm7Þ,c.+>7-Íçe>!o¢<d\q:¥OÓ~K'k¹Iî3K¬¤IÖ×% ÇFøÅÂa IÅuw½õ¼4
Á:§#×ð;èø¾kw{htÎÑ s:0=Ï
Îæ:Cnùõ`¬¹O­9íÝÕ,¾ÕâÍÛ
-JqBÐòå é
rD°Þ85¶D·V¸ÀaUo
&ÙµRâS	j`AîÎòøÕ6¦.n1 ²èB¶E³r¤%¹"÷)ä_
Þi_~¤w¦|´CÔùéJ¶³àUUUðZäF¿âF>J9-ï¤EØõ=Cí¬hÙ¼Ô/.`]·XÎ¸sMu6L6.M<ý;-ú¦iJQ3GÎ"p`7ie¦k)Dü¢>Ã°{á0NÇ±¼aÇ1ÎÏ;§£ÓñF¦ïÛçÁùÆäÊðM&`=×JWlq,¶x*RÖHÁ96)SÝìàÀÝâÆåòSqBÂ*:PtðIáðÉøt`>ÇöûY#(>P|ðøÀ6ÖøÀ{îÁ1¾DQAbÅ
ÇcjÇõA~°¶÷[$ñbG~ÿWöYÌä 	I¡´í\Ò¶om0²j#ôªí±Q|ß·ÏHÅ4{µyà.íµ¼ù3y(4¬öõjUñß7Üb]@L;Ëñ']n·¿Ì¦*¾GcBËð]]#üã¶O_Ï×sÐ<ä)'¬ú~­ü2 X<ËË³tUDÌ´âë».$CÚø9Ç§(-ÿ*:ÒÌãÝÒÅê!7ÃÛ¬NÇÞÉ M~C­ ¼¯Á8! k¹K¤¹çùów2§MÂU,@ÏhY)ÚÛJÀnI	N:­ú73Lk§"8TµR¥J"«¥+mÒ=Ø¬R>»ÛUåÒø7×Ð¿/`ºGr¯oW×G0Á(T?ÙUè?é (RnAì.2A»|´¼:Ûòjr·I_c:®ËOtæt"uVL×oxÙ!%éJgÍÐ`N¤Îº¾b%³JfÌ¾4/7ìâ×ÔdÌÁ:Ã7¼^Æ¦Ôs
òNØæãK
`ÄÝâºVêqvêÝà3èH1a.a=fË):°¤HpJÿ
°]Ãe¼ß*VºlÏN	%J$¾¨!þô¢á¤¼¹ë¨ü×êEÆçYdðpê+$Ãmg§d¨¸BI%ß©dG0&iÌ©þ×3{d
)åu<ïÃó¡Ý9³l¿c®í£ÑÐ°~Ó,PoQnÝÛoÎ±
­/ÿþûÇÏ¬ö·&ì¿Toò1ïF)þ 
m<5ûz|cÑFÞìõ ~,ÍdiK£¹¹V&S¬*eicW)vâT)NâV)nâU)T;gìÐüìVZ?Ä_ò¼ ÷t¼ùP_Káî±LÇwÛsB:t{,¿eÜÖfë5[©Ù­¶fÍV¾óÑjkÕlåQðV[»f+Ï¶Ú:5[y¬ÕÖ­ÙÊ[m½­<vÒjË¨¡²&[mº/ä.k«ñãªÐ¶ãÉ%¿fÇXZØ ¥Å¾§¿b0DN¹Áp%OEt'òê2ª¿Çä®{:áºÐb'sk¬ãðçÉ²¦[	Ã{Éq2Íß²uR"j`#ùzh¹²lÑ¶uäÖëò'ö5\B®Ûà5ÚláÈÀ8Ú
ÇÃqdàIãá82ð$®ÂñpxGá|±ª¢Ê ¨ú+TCS´Y¡zªJj°BÕ´}oû+Xa)a
k°VÀÉ+Xa)ÚÚ¾àqÿÖ_@n;VÈûh¤MËíT	GrUû%Ç»a<ç?Ü±´|õÒ^P´8d}ýËçTk´Þ¸C·@ ¶ µhß B¸Ê§aÁöÒUVàú,á¸Êb´pWíëÍPDò|£æ+8¦.|W.a<ø.Ùj¤K(ü|ù*]²üõ¢çqÉf$\b®/4S¹äÉ]ÒkY®ép(<½K5+ôM¾öU.yz4Gyb)¬\ò,.ií ð¼?KÑe-,z9A¼.éÂq²áÛ\W&ë¡hÝÔæ¯>­6°ÜÊ;Õö¬Zxµþ¬Óë
ÄìÇq_Vè·µ7újñiÄ¶v9_->-QÑÖ~å«¨9FÙÞy|µ µD\f@íëwßáû
 ¶Õ4m®"é]k[ý¾¤¨¾Ò¬/.ù9½êØ8Õ$þÏÿ  ÿÿ PK     ! i¢_!  Ç  ,   ppt/slideMasters/_rels/slideMaster1.xml.relsÄÕMjÃ0à}¡w0³%;ÈÙB «@XãjKFRJ}ûBah! Àõæãm´?|}òÖuFÈR	êÊ¨N7ÞÎÏ-$ÎK­do4
ÐÁ¡||Ø¿b/}¸äÚntIHÑN@ëýøÄ«Z¤KÍ:ÔÆÒOÛ°QVï²As^0{å,39)ö¤Âüó4â_²M]wMuPû#ë;/r2b¥mÐHÓëýÙOÛ4 v[¶)[R²MLÙeù=i>ÜÅê{çgÍ(Ç]ÿm(')#;+bÊ
²³¸¥­­cÒÖdk<jk²­bÒVlS¶û±Ùó[~  ÿÿ PK     ! ÕÑñ¼   7  ,   ppt/slideLayouts/_rels/slideLayout1.xml.relsÏ½
Â0ð]ðÂí&­4uÁÁEôäÚÛ$ä¢èÛÑã}ýþ\³M£xRb¼ZV È`ï5Ü®ÇÕgôÇàIÃöírÑ\hÄ\xpEQ<kr;¥Ø4!ËÉIÒ¹©WÍ{RëªÚ¨ôm@;3ÅÉjH'[¸¾#ýc®sÁ<&òùGâÑY:#gJÅÔSÖ åw¶TËªmÔìÝö  ÿÿ PK     ! ÕÑñ¼   7  ,   ppt/slideLayouts/_rels/slideLayout2.xml.relsÏ½
Â0ð]ðÂí&­4uÁÁEôäÚÛ$ä¢èÛÑã}ýþ\³M£xRb¼ZV È`ï5Ü®ÇÕgôÇàIÃöírÑ\hÄ\xpEQ<kr;¥Ø4!ËÉIÒ¹©WÍ{RëªÚ¨ôm@;3ÅÉjH'[¸¾#ýc®sÁ<&òùGâÑY:#gJÅÔSÖ åw¶TËªmÔìÝö  ÿÿ PK     ! ÕÑñ¼   7  ,   ppt/slideLayouts/_rels/slideLayout3.xml.relsÏ½
Â0ð]ðÂí&­4uÁÁEôäÚÛ$ä¢èÛÑã}ýþ\³M£xRb¼ZV È`ï5Ü®ÇÕgôÇàIÃöírÑ\hÄ\xpEQ<kr;¥Ø4!ËÉIÒ¹©WÍ{RëªÚ¨ôm@;3ÅÉjH'[¸¾#ýc®sÁ<&òùGâÑY:#gJÅÔSÖ åw¶TËªmÔìÝö  ÿÿ PK     ! ÕÑñ¼   7  ,   ppt/slideLayouts/_rels/slideLayout4.xml.relsÏ½
Â0ð]ðÂí&­4uÁÁEôäÚÛ$ä¢èÛÑã}ýþ\³M£xRb¼ZV È`ï5Ü®ÇÕgôÇàIÃöírÑ\hÄ\xpEQ<kr;¥Ø4!ËÉIÒ¹©WÍ{RëªÚ¨ôm@;3ÅÉjH'[¸¾#ýc®sÁ<&òùGâÑY:#gJÅÔSÖ åw¶TËªmÔìÝö  ÿÿ PK     ! ûÕ  ³  !   ppt/slideLayouts/slideLayout6.xmlÔVYnÛ0ý/Ð;úWdÅòØAdGE,Fì¨X(E2$­Ú-äB=@óÙÞ$'ég)´þ£á,oÞPíí¯K*"UÁÙÈwZ",åYÁ.GÞù"ñûR³SÎÈÈÛåíß¿ÛCE³#¼á+ SC<òZa¨tIJ¬v¸ ör.K¬áU^Ä!vIÝV«¸`^ã/_ãÏó¼HÉ§«0]b
øÕ²ÊE¯&$QÆz?¤7ªÕ¦äÑ¬©¬@zc¨>Ó1\bÎ
?¿éåv[$ÄH¬ú Å\Ì¤õ:©fÒx{A³ÑÙWVY!xâ~éD<\ç²4+Ö#ú¶1ÏÀèÈZ£´V¦Útyúmº<|Á:p	­¤¦ªÜórv]9C
ï«rx8âé'zLùuy÷uÍfËmö»zÓ
`²ô:æÙÆ$¹Õ*ñ*=×Jì0C^ÍáÚÏjôxB«AKHVh,Gºî':&JKb8Ñ°lÖg÷ñóÏç
wÂBu¸GÜïék;ú¦Òâ,9ÍD»oÁd¦á+þ_¦¹	¡ÛaÝç¿`ÖÊ
XÉÏêC»¥6ò¹íÃÛ29æÎ5ðµÍ]û-¸Ëµ¬É»Za	Î÷?ç¯ãøÓ"#èdU^<a1zaX@è´'ü_Ã
n(ø&ñA?vüÉ´Ûö£nØóû^ÇvzívÄIÒ\» Ojy|Ü77øôøîæ;ûq{wsûpy@Ò?k¢]ÜPþHéFB+Y@q<èîNú±QâGÓAÏ?Hº?é´£h÷&íÃk3ÂhJbÞÇÌË0z60Ë"\ñ\ï¤¼l&o øg"/ìð
[Í¸¬0y½n?ôZ=w³ 4·Z°æÌMù°RyÅie¹à8L¬JÀÏAsLLéîgcü  ÿÿ PK     !  °zñ  à  !   ppt/notesMasters/notesMaster1.xmlìYÍrÛ6¾w¦ïáµÃHü§43¢l¥q×v "!cd H±ÓÉLÞ&ÓC=4ÇúMò$] %Ë®e»n§è",öÃåzþâ¢ hI¸ÈK6°g]YÎfëç³±[HHÌ2LKFÖ%Ö½ï¿{^õY)x$&úx`Í¥¬úHç¤ÀâYY}ÓXÂ#u2ß÷vÜn7ì8gÏï3¾Nóìé¢ LÖN8¡XBbW¢ñVÝÇ[Å 7zôµ%íAé)ÍT;Õ¿'dòìpêv°À}í(GKLÖdæX½çcl$5XTg%±åK^VÇ\ÏðzyÌÁ'¸´Ã ¬èc¦ÙRá³FÄý)/Tð X!ìã¥úí(¹(­éJÎßÜbÎn±î4tÖ&UQÕ»Ûs *|õ©D'3_â¬Dæð\}Ât^"
ÛÄ"ª£2=«¦½µ¨ñPm5Gò²iæ¢¾Xo#ÍÚN«5ß0·9q× áqÇ×ÐÀýùRÂÀâ$xy$dmÚèuÔ³W}yÙ¥²@ Áñó¿·=db`õß©¥~ðÈ¾Þ3¹Ö#é¨¤mTÈSyIÔi¦38ãT¯/#ÓP)Ä ½ÊXÖòJÂ²cØ:5b*i''fd¥£k¢ÒÞMoAö±ÄÈ}
jdÒ2§öÁ¤ðâØï[¡,5¦4ÓúËÁØÑ8²û±íGÃ;z$I¹Ã$pzÉ«Ù,Ì2ÎgNÞ,jxø¿(äÌÚ äÓët}HÖn #õ¢¦*W?5Ký-,=,ð(#èæðëm',H'¥4Òhk$CQ9îÇfA³Ãbf­ÏÇíx*ÚkÇ÷ºõ¯xí¶åµ×C§¥À£¡NçÖÔcèbU>58% ¦z·«7)Åé¹wÍJýW§aJý>Y_?üI1ØB·!Ô\ ¿úä?EnT]oÖÄÒ<~±Â8Ð´QÙÐïv`W~Ë+  _[|E	sµë*eBBl-4 ËäªÍß.H½$Ë%æ¨Sh!gH¨D¯@µè*Õ©¶îÚz_ïóÌHÃ®~[z:ÜíóðäüN5îvúbÝ\jÒos³»\>ìD[NäIáêêW<ÅiÊ"¶>:èG³1I×1»ð÷uKôÿ?m&|%Õm´6¯¯>ÎR[8OÁ¨
^/Û(¤éùèÒ÷[$Ò?¯C7ÀÛ#@ÇöÇ£Äaqvtà
÷ÄÓÖÂB±ÁæÝ·þòñöçç/??A¬æ~ö¶ÇHhÁs%Iz¡;;qü±íïCE?=<ß%ñpä|PW&ßO9Ñ·)Ysãø7nb<å¥(§òYZæJ§Sï¯Ê\ßê8]s5¤ËA'ôã b¿É°¶¦Õ«U'ÃÜÖ¤¿ÂÌHÊlyRvÒdæ*«t®ÒÓ0	Fh4n£im¼Fã5¿Ñø&h4A£	
¼Jæ4gç j,4-éµ¢ê$ /ÖnÐ²Àü¨¦°It<¦gxrúÞ¾&º6!ø%ü\d¨1f¡K}pälv¼`õÇm,Gç«Û@%ß(Ó7®¼ Üe:¬ZÍª¹=Å)ðûÙT7:6wOb£#Æw½ÂëOî
}ØwøP>Þ
>
¿Â§ý4Þ¤P1 k Ån¬ßø;* pëÆ¡ºPÙ¤Q1 Ek E¾·ËÑ-* xBg¤[T@½5Â Ú%éú[n­^lëÿe÷þ  ÿÿ PK     ! Ôaò×  Ä     ppt/theme/theme1.xmlìX[oÛ6~°ÿ@è½u$ÙÄ);ÂÖmH<ìhI
uÈ\úï{xHÊe7Ê¥[±V,òèÓ¹ò#)xÌ9¹gµÈÊbî¸ïOÂ¨³";¯ÃwSIò²`sç3Î_9§g2e9#ð~!ÎèÜI¥¬ÎF#÷eÅ
x¶-ëJÖÉ(®éèÍùÈ;9	F9Í
4µkxÄ%ùs»Í"æ\XõW~
) âõRÎÌ;KÖ(rñøÖU7Q'%¯É=åsg¨æ.ÎG
Ë>.ÄËà ¾õz¸¼}à²SÚÐ(hú¶ }ß`[ Ýíë^.}¿ÑÝé®ßÃ/ðêà¤»ã~µP­GîNzøËi.V<t7èãgÞjÏ¥<+nf¼©LÙü·#ð)4ß¡F­¤ß/äÑù³)§Ê:Ê¬ òsÅ¶4ô¢Î(WFè£-¹Eât´§3ÏãÖYÎù=ë2§ÅLí´c"l¸|~(vzq~#?sö»@¿DÉ³8!ð¥&ÕU
]c®Kj}RòL¦7)­Àfi"êDªP1Ô+AVH-XêÊe¬Å~%¸tXC¾R0Ôú:c®´æ¢k}kMÈ­áÍd¦9¡jÙvO&"¢Å*ïZ-ËH¤4f¦F*î~ .æm@Ú¦Og­em¦Ô¾ÂÚ"µÍ³Õ{M¬]o÷èÈî<WoâVsgËtó
ô"qå	lì4¡<IæýOK÷ähÀU-äT¿ìXìü÷&c·	àÀj4Ìêþ^à­]Z¶Ý²HìæYy'Y}ÆdÃïêk
~«©
ñÄb;¨¡øF]æ8ëàVÎ«5IQÔF¨áØo|ÀQË½f´çûCAÊ¿Q(íiü¢f.+ã)5%jÎ²i	«PfQXÃÁm_h¡\"\}-(_ÙýnÝÒ:ô"¤ò:KHÁJ'Ó±¿¤ó	e®Y
3"³Î4îJß7ìñµbo âwHjWÄí­;6ÉØ$¨ßëÉGOçvôûCµýÖV0{ÏÜjõÕ3çMoµ)Q?°pguÄwçÛuy
Õ'ÍÀD|§DQQ÷6à³jkJÕ·=FíJÐØýÏV²ãÒ^²¿nîåÉ6½N®Ûóè@ªG}ªãýÁQï?ró	l¯àëèK¡?¡eMöKÐn­áÏ~þÛðÆÿ6Àà#­È&qçHð=(<LýÄS2WÉ<%§¦*sÇt¬Ä³ã[o%c+[ÉÄJ&VXI [¦òxîàÍ!68­OgÆ;J½IþjÒÌfj?Må¥jCI35:æ¯á¤éÄ64
"Ír±§ÿ«¤	.UN%\I*Ï"
RITAÒ U4H©ÿ#iü4CwÎÄ~4
 Í,Píû!Í§ÚpÒLOUJñJµÁ¤¹Z¨ö¦'²?<î]|  ÿÿ PK     ! ´ÏX¹   $  ,   ppt/notesMasters/_rels/notesMaster1.xml.relsÏÁ
Â0à»à;Üm·Ddí."ì*óJuÅ­-m÷övqàÁK 	ÿR7ïy"/Ñ8Ë¡¤´ÊõÆj÷îz8IÚ^NÎ"#4b¿«o8ÉCq4>¬ØÈaLÉjÄYFê<Ú¼\eÊmÐÌKõYUG¾
´=Ðö%nñøíÁ(¼8õÑ¦'XÊYÌ J×ÉZ+=`¢fßÄ  ÿÿ PK
       ! ÛO¿eN  eN     ppt/media/image3.pngPNG

   
IHDR  Ý     Î.ò   sRGB ®Îé   gAMA  ±üa   	pHYs  Ã  ÃÇo¨d  MúIDATx^í½m¬]Wyï;¹GÞN±cä%¦5ôsÙ`åè#åP¤!HP8)8-¦/ñ¹ØÖUb$ûKÐm!@%\¨sM8R{$BNâ ±ZÉ&!ØNÒlGlë}I¶?pý^ÿgÏµÖ\os¯µ÷ÿ'Mí5ßÆs¼<Ïx1÷x^óÚó'[c1fèü¿Æc2VºÆcLMXéc15a¥k1ÆÔÄPîW\QüèGO>y¸øç>TÜüÙ83¼ëÝï*þçÿü§âûïo©åaçm·5,l(ÚË¨¶SêÒuhÌlªtï»ï¾bÝºõÅ-·l-N<Õ8jL9Ò>ðÇ(ö}g_ñ¶·½½¸ä5Å_ÿÍß4ÎqP©©ª yä)­nùúÿø³ÍÆ1cÌèÒÒE0  æÛÈõ¥^jü2sÉï¯^]ÌÌÌ¼qd<Ð ác7ÜöwïÚÕâíg~&=[Û
ög3£ÁÌÌéâG4öÎ<Þ%cæÊJE»sç­ÅÏ~ú³s¬|Ä]ÕU*×ªîË­ÜÈÏGW$[·£üÇ}¬¸ôÒ÷#¨$â{åiÇsÑFþ<ô`JCyço´dâ{ýí×¿^¬X±¢qæ,­Ò¼Ìò´;Ñé~Þ[çò÷â>M~b}ôâV¼è¢ÆÞ«Tyv«2ãêû9~Ç_JÙ']ÈÛY^×U¡=Ý~û¥KÿÉÓ±<m)ÿäM,/_^ìÞ½ë¼C»¶Ð®cüþtóùñaØe¶mûöäéÂã¹ÿ{KÏ_zN~YTRºtBÃ}ÿ9
Îöüar!k´Mg«Âõ7û÷íO÷ÈJøÿ<ý·l)þåÿ¥.
ÁtúïßX|ù/7Ïrÿæ?xsqá¦tyï(¡Äßß¼üæsü£Wmºª)@&MWüéåÅÝß¸;½×É']ye:Ç5ýìgïÅù©©©t:¥MùüõÉæù2¡Ö
ÒÀ
ku?u0$Ozöæë7§²®Þ<?zäXqÙe¥ãä×°ê¶ßÛ
	Ò^²dISIAvÏnWf«Þ°ªxø§{6lØPì¹ó®¤Üßµ~Ã9õA;¦®ió½0u|*Õ÷Ê+Óþ5×|¸¸õÖÛi¿þw_ÒÖÔåuâÄfÿ.õNïÕ¥K[nüDj¤sYfìÒ¿ôÅ/Vj#ÆÌ:*]"
á+S:íûÿðýÊ?rÓMj
:â³?6)ºÈßôÆB!°víÚÆÞ`AÞöùé÷cLKÈ3yO<ñDÊË^µXQ:\¿ÞWîüjúS%mw/g#xïÜ³§qäUTZ
lÈ#ï½aýú´¸35¸9tèPRÒÔõV}bÍä÷¶ôÞ¸iO:ÕT@¼üòÆgiõìNeF] GM¿%2sz¦Y´c®Y³fMÚïÊe"®»î£Í¾ÁßÿíÅ¦BîD¶ÀàPÖ&[®øÔógBQ¿ÜA1¶JÒksppüøñô·[èh¸­$0ÞýÞÝ8s)=\°¹@¡£3çºw¤s¸º=bÀ¢\p)ßxX SÚ(§¬Á2·^+È?pê5Vó©êe'ÉûÀ úS¾ËÜæýÒêÙýÔ©Ug¬:µ1¶¼vya0 h³J
%Y*ïÏéÆ1/Æùq-£TfM4½ÆÌwÚ*]Ñ22EóºP¸qkI`<ú¿m=Ï9,m,îFë¸ã8ÏyÇíCU¼Ï?ÿ|ú»ýsÛÒ_¹aÉ[¯åS%m'çäÖ«ªxÿV teÍVqU¨?ò·ªS
ýÐo}`Õé^m¹]¬ÀÉÉå©¬TÒfõ¡J²*sÝÎÚ12cúöK;îµ¼7*Íé"8é(à±6§9ÝÕ<S
«µgüéÆÞ¹tR(ýÀ<*Ê'Z
¸eeñþU­,IÒB8Â/·«¦Åå#ë*%ÿ<;Î¹ßûßÛ¬Kæ¡I_nÆv`RíÜ²®ºù ¨*½ÖG»2è®|àÑ@yP
6h³òponéÒ®Ék+7|¯ïUaY;(O<úô§SÛ3f¡PIéVå¶m;·¼õ-³&#T:ot5I0Iøã
åM¬e	\Íñq× ¬zêét Àâ×¤ÁõfJ[>\TFêó1Ò>pà@qñêUé×¼ðÂ­Ê÷ ,¸¢õÓ.m)-Îé<e/a'È?ïÁû(èÏëëøÁÜ	êE²´I?õQV&líkÚ°Ú¨¬6êÊÍ±ç¥sçóMÒ~Þ«sYfºNÓÆ,$Ú¯ò­[-1ÆÊ®1ÆcúÃJ×c©	»1Æ°¥k1ÆÔ®1ÆSVºÆcLMXéc15a¥k1ÆÔn¥ë&x©VjbÅ¦|yKcÚ*Ý|ÙA¶Qxù2lu-;8l´Î/åO=Dò%2ãò{ñ^¶²u\ä÷ÕÏ+{qGåÉÖm¤n6?v[%_±½Ä¾ïÕÛKÞ=`5¦,]EI!±\G¡±Ö/y1X»	è>ªP¶1<k!+" ¤?Êz½î¢õ¨Ej¢kµìuËR*5JiPD¬A¬À¬µL÷¹XäùbMè/µP[ÉË5¥vÆ½1=ÁPvQ÷ Îq¤+÷òTIT|ÄGËtBöã¨9*ìü^¶hõ3æZ¶8BABGçòè/\«s1Oº/Zlº6¦¯¼Çòè÷ (c y¦¼`2âX W´U *iãw7tG»úhW×eÈ¢þ1ié½to¼?g¬Çø\ïéB^×ùù^!]ÖèFùh°G}Å(R­PY` {&â{y-Ê(Ë×wï½7ER¾.ÿ¦]/îåIY©×ÀÿÆ,$ºRº1V¨¸æ§#xe	Ga2#À9ç±ÀP*x7nÙ,OI
Nà£iÒæÞv'¬MîgÔÃÖa="t8Ç#ý Ø>ðÇHyây"
ùFyG¡Í8Æµ¼[/0H/1<¡ßà÷W¯NÏB¿éÍoêI¨×<V©Vu-c1kî ¾t^_(Å£%<«UG=ÅºGxÃ(²'x"íó®´%KÌK\Ï'´±'N4ó=$¢×ØÓjUýtêÌ¶¥|¡ _y%µµ¥ª}kåÊ©ßªÉ'uO^UæÆr*)]ûÄwíùÚ,Á}Ýumv>þÒé!{Ûçw¦ßÄá¤ãK  Ã
=~°>Ñ¼?sF	åÎ¯¦}ÒFv3F@+ì D©¢¼îÜ³'ËY»vmzñd±ðó¼F0×¼s®Ì¸¡Ú%Á=Ä'ÆL.]~Snü^vþ²¦)sgª¾ØÊ¬Â^¨R­êº*ñþX_ ¸ÛÉäVÐÖª*«nYrFÙ`Ic­Ú]ì½@^HD¯eÛa+¸þÙ?;kÐÂÀCq9\}¦n4`f@DxÌhI3R;*óØ ¤9÷Æ7½±¸ûß¬\_Æ,d*Ïé2ÚF)¢"êxÚr7m+y#@$´X²¯zÃª¦+
!PX[Qà<Ð<
ùg?ýY\­w/
BÏ>zìh*wY¼'Oõ<ÜQØÉ"d5:Å[G} (¤`(ß÷¼ç´R q òÓ@x18wP ì7ÿ·ÿ#eÎ üD+³Wr¯G7hp¤úZ|ÞâË7¦*äv&K2S;¢ïóNQñÒÏQê#.îßymÊ/ýÚÓÊîe!E.C`TÌè¥¬Zæþ+ôpùÑy
ÌmEë¢+R[/sP½DÂ­Yðÿõ_ÿõK³XÈzæOüi²0fÑÕ\ÒBÙ¹¬NÄ6ÈÝ´ ÁÈ "8ÒVÔ6ärîUYFH'º©Iiè_(CÇÞ½÷&RRß«js="ÁñfáijßSNWsºr³~èÊ+Gn
QUKW.^Íe±É¸'5o:h<4¹é4'%pyó5ftµEt0Ë äÿþë¿NÇò|r
óeen¹ªð|æð¸ï$ÌP¢¹ûß+³©W¯jzúaõA;!èöí)ê£ûX2GnêKÏm¾ÅÇtIò¶(4`.bÒ&ïôÃn \vìØÚ«Ú	m< õqõÃ»ñ
Ò5L} iÎcZÓÒEÈÐq%d°$X©,.¬*p/ÊB.?m²@Ì7Ñãy#HHâVäÃÒ©úQiãZKw2ÖÀjáã)½Ò ã½¹Ne«uÖiè(\Ê ZlÌyâêÓ5 k¼ÅcPDÛ¶íhÞ¯2£¬(3½¿Ê´ê£
äoÊµj}Å÷bp$×¿ÊÁéÆ¶¤¯ËÙâË¸[±Èâ P$Xom7^Òá'½Þ[¶nMí¢
y[_(S¯äU.bÊ>ZíP]³ñ/f|=5üeF[¡~ÉO^fù·j!
Þ!¦o)gÎâé"X®ýÈµÅ®]»S'Ö1
"*c
f÷®]IÉËÜ3ÿèÊÒ$ÌUáVè#-Í]SXÌ²­p1ÃdÎ,]`þ,Î¥âÞËcoÌ©Ò5Æcsæ^6ÆcVºÆcLMXéc15a¥k1ÆÔ®1ÆSVéÆúYªq.aÕ!­¼4×ÄU£ªÆ}¨µA¬*6HÈ[7«~cF¶J7.%×«PBø>òÈ+-÷W'¢'(WîÛ¿oÿ¬eµ_¯ºWEÎÿV¨µ´Ôù2u)C¨¬£N"E=Ó ÆÓ.V((·YwyÔ¬
ñªMWiA©°F0kø* ×ò=»^5eB}GÃÓ]¹ ÑIrëD®Zg!øåË7V®GYeº·[+¿çE:º
»qyæÖib­s?¿9·oßwRºßþö·Ò¾Òç=ÒP¹äùRÙ(oÝ¾7a@1SïËrÄþñeã )ºÕÙdMwÞû¸_ìÇ¼çùV]¢%Ñ¶zU´íÊ´òî§-è<ip¬ìÙS¾ØÊ´*¤zèÝYÆáÑõ®Âø)¦ë5×|8-ÝeELäÜXÇ'NhZË1Îéõ7'÷(ÇÓ
UCÇ!¸´@½,#§%$^DQüW"ÁL!Õ/@[<±8Åpe½h¢=r¬¹v4qK3LàC$$VªòMÜÓªQiÀÿ1à»ÀMÊó{ãË*¢õÂIuÁ5äAP7qsc¶ªë~¡Nóø¦7¿©©|¢²ï×ù©¬Li'Ä;Ö9µ³íÛþöK§¶ÀyE{¢ÌØò$ßß¿1õå;~¼õM½cÆ®.Á*®»î£M¡Ì_BÞU
}ÓMj*`	ÂìUAñ?ïÜ³§qäUf( V!Ê/[Ú¼?sm*oÕÆ»µz/BÀUµ¶"ÜÃ`@âÝÀ}^Dù¨¾°*£èD?uÝpK.)¿¬©|HeY¥g6·üAíä»÷Þö©z(ùªJ½Úç|Q^eeFÐ*åO}$MFÔ`ÌxÐµÒE@Æè@¹{¬j{KS÷'µ*.íÔñ©ÆÙ ìdÄÄ¹p»±W\´")^éVYGú©ëNðñU@¡Èhg¼o'ÐàñÐ +§];KP(d¾ <ÛY÷´åªåa]ºVºcñ¦y«?½|+³ê Ü½¸}uo7_wR(Â~Õ A9àþäq-RU/Ê%Ò+ÑÊÕ\~êº
å¨)nyé¥¿Ê¡Þ£²*+9WÈ­OyâÀM^¦xÉ3ÉQ<cªÓÒE1`ò5%£t9Ý´(9[?T\+·®'BU>þx¦esÀrãáN;N.È2WpÔÜ÷ç08ë®?ÝØë
«®[Wçóù?ãæÁå®W .9ö®õG^¥S]÷
õ5ýËéô1à7ÇÔÎÚñÄO¯^U:p¡æÔ©ÏÜÍÞºÚB»dòìXóÔ¥?¤2f|è¨t,YÒüòKËL_2JG¹ñ2çfÇ;Î	JZ_ÓêËN#øt«÷©§nÜÕîç£÷³E÷s\)¹p¹îöÛ¿Â¯H9Î åÁo	.Þ÷â½¹ÿðáÃÉý9$$gA9tóÕî¡Cf)ÏÜ´|ä¤gèX>ÒáY±>5ß(¨S®QªL;Õ5
ã¤Í×ê\§º®.w¬nÒ`ªóäí®=_Kï£ûõpÞN¨OÚ>XõA; =ð[e6Ì¶ 2ÓVVÀ{ð
 õnoOwAóå6kÙ×®f~rfsËÖ­çXºÆñâß-Zü;ÿWã·îùô¥ïeÿõ²â¼Åç<Ø8cæx
ðíý»½ÅþýûG1ãJ×RÑ ªW*ÿ0·M=SßÆñÇîec1¦&léc15a¥k1ÆÔ®1ÆSVºÆcLMXéc15±`n+ë%ô6Ô¿ÚBÏ6®XÕÍ
[ÆSFßJÿ%h;Â ß­'4<[Ë9v«<YÉ©Û ¦5}TJª²õ å¯ÍWå&[p`IFBç·×åã /æsØ«?Æ÷Ñ×sÝ²Àqa îÌË3ÍH1'OÕFÎü¥/~1­£«¨7¬M;l!oZsêÔÿW96ï 9}útË s	Ö}FiÓFYúk>Ü8;¾;øc7ÜÞÈS¬å¾gLgúRºxYâYEîW½aU:6ì¨¨AM,ND·a7®Aò®ó!ZNüæÜ¾}ßIé~ûÛßJûJ_?iÈ-Y§u3¼ðÂiaþVïÚª>QfÏ>ûl±áÝu&d	ÇöH»íÆ+Ò+¼'bþ^wÝGÓoÈ­Ævù$=YíÊßôGO(ÀÅ°Üãô9<F¬ýÙÏ|¦í³ßX·ñê{¸7öEàÇùNÆ¾..Z¢mQ/£ßn¢ætáÎÿ­G`µF£qâöÉ(vö^!ÔÛâÅie÷ð.9Ö´ò&M4#Æð|
-7ùÕÿþUª2³S}ô[f?æçÅ¯õëÒsí÷xìñòµ±QÑ
¦=QUH«2K¾yâÄfúÄíÖr%¤_<ýÌ3m­P±HNÎþøÅ¶m;Ò{BxR6#}Ò½ïïïX¿6¦ú!Õ^Ø1 xÐf(C)å¯ÜùÕ$á$øÒoÜle1z"¢lÄ¶ÅâAã«ÖG¿eöäá'gÅäe8æq}¨ÆÁ[F¥g~Ñ	ÞwV¼gÚÆäÍþ¤#ï@þ^
÷kð@ßT¿6¦zVºrÛE²âæî ¹«ë¦>Xÿá?þÆ³ô[Ñ¥Xær
~V_|qú;´\?N\tÑEÅÄÄDc¯=ÌP´(\åô/§J´xI¨o¯b³!wV¬xugÌ¨Ó³Òezé¥ïkºqaõá"ã¸,a@Ú|@¹rG  n+3|°8ß÷¾K{gé·>°q'j+kcìãi¹4{ö\B\ÞÖå½råÊÆ¯³YË8åÅ9Uá#JÜíÂP¸ÜW%8?ý]õÌmmÓYÆ¸åR9]u;
¦¹ÀbÃ-Åî;)e}xUæ
.bàþÏ~ö3gö4ÎN¨¥TQUùî½÷\pÁ9VíK©x·éé³Â/bÝ}ë[ÿOR ¸Mq»s.ÿ¦2ã,<®aî²ª5	üG×ÛõÊ|ýÅ«Wû÷ío*ÆvÏæ¦8o¢m`÷ëÞÑTÌüeßOq¥o¥«¹d¹,©o;ê®=_KP®&FÍñò¿q?qávûí_H!{ã`ÜâüÖ¢¤àËKî?|øðÑÛÿh.D(ãç=_,Yòê@¥]}<ÏXöIe vâÇ½)Pf|9Ë9MðErkÓøéª_Ìòì[¶nM¿õÞ;vl/î¹çÿMÇøùI}á«¢x`Þ¸wçÎ[ÏZU!bñòï<¤?È/}qéÆºä£§è"îôl}PE;ÉÛ Êræ>þ2o­~Í_öu-ÿÚQÆñt1µÜºõbïßí¥¬[7f¾0Ð¯1¦
7nÙRé*cæVºÆÚÐ)ÌUÇmY(Ø½l1ÆÔ-]c1¦&¬t1Æ°Ò5ÆcjÂJ×c©	+]c1¦&¬t1Æ°Ò5ÆcjÂJ×c©	+]c1¦&¬t1Æ°Ò5Æcj¢£Ò%&±0[Å®T¼QmÄ©UÀnÐçÚ§t´K;ÆÌÕF^E§÷fÚóaY»v6Ì´¡÷fÚý´á~éç½YÆ:x`1ÆÔÝËÆcLMXéc15a¥k1ÆÔ®1ÆSVºÆcLMXéc15a¥k1ÆÔ®1ÆSVºÆcLMXéc15a¥k1ÆÔÄØ+];gÑó¸|ÏN7fÊf¨í³ n¿¹x¶1ãJßJA@PçwÄKTeJb(¬ã½ÚòÔBòý7S\rÉâËw|¹i}þìÏ·½ííÅ£ÿëÑÆñ:l'+:Õul/Lq¢/¥KCÿìg?SüË?ÿKêüw®{GG«sHðlÛ¾½qÄÌÔù^òÅ-·lMõA mHòágûàå§}òÐ9¶X§Ù«6]U¼85Õ8bæ
òzìNu"~ãÞX|ìR;¹ôÒ÷=úXã¬1£M_J÷ò?ù`±téÒâ»÷ÞöéG+Ö¬YöI´°32Î£áMWoj5úÞÿüÞ¤hï»ï¾t6111Q¼ký´O[9ùë=	hêvÙë%á:óò¹_;ÈÛLµÜ
U¥¶­+îU¦óü®Ï` AJ?Zeû\ÿÈ#?,mË£eÒª<Ú½ùÞ\¼û?½»y^eÞ©®9?qÞDqËÖ­V´f,éKé®\¹²xñß^l
Z:iéùKdXðÌuëÖ'ËêäÉS£¯BÇ×¾ïìk1Ãâùçoü*©ãSÉ%zÑE¥}b¯Ì¼2k*:ª¹M®nìuÏÄ¢â?½¼¸ûw'ëèäÉÅ®¼2CÑm¾~sqßßßÚ	íåõ¿ûúY6}á6Ûí**ív0(ýÀ Ø¶mGJ} ã'Êã§iM«2gû¢gC±Nu½víÚôw÷®]ÍvëÊQg R!<iü¸|îþæ7³â¢³õ#ËëûÿðýæÀ,gþl*s
¶þâÆ?/V¬8Û8Æ@lõêÕÅ­·ÞÖÄ(ÂhÕY>¥@W^QòE	ßÿ½Ò>ívC[Ö»LMM·}~gú}ðñÇÓ`â÷Ï¼K¸eOºlR¬Îwú)³vPo¯?Ó®öïÛÚÑ\LiÓ}+]F´[,\BK~çµ©aéÃWîüjúû·_ÿzRÏ[\{îXqüøñtâ %7=}¢i	Ëb£-¡¤­x[Û»WW%±lV ÃåÇ?úI@¦´Â@ÆÌúRº¸O:UÜ~ûBÆß3ã	õÍ KsïÞ{[÷G¤s´ªë±Fë"éFçïÍæúÇK/½ÔôR3ô¥tqÁ[¶¤¿ÌÙ0wsèÐ¡´?WHÈë.\¸2M=ÐvìØ^<ü-m"Îê#<µ¡õË°vôÄOËó¬jÃäv4l(¦bPú|í½téÆù
Ê3ºð«B}1ç®i	þ²ÏqcÆ¾.9:=nµÝ»w%b#}Í#óÌåË¼é³¾b¾sÏf¾ô¡ÌÌéî¾|5ÕQ}$÷êÎ[Ó<flüæëfêkø¸¶CÊ]´Øòñâ®=_kÞ"ÔXLg°ñ{îgÜ<Ai?òYGæÌñòLÜòõQ ¾ô¥mÓÆ¹N_^Ç2c.|eÒ¼>4ßÍMùtòÝ©®©/deÂqÚ
mMîfcF×¼öüÉß6~c1fäëec1ÆtÆJ×c©	+]c1¦&¬t1Æ°Ò5ÆcjÂJ×c©	+]c1¦&¬t1Æ·JÕqª¬Î£}b\ScFVWS^­DÑUqÅ¦QÕÉªô'÷=³Òp¥?×P-ÎgTeJ(2EïÕGëYhí¥
/¹dM
_Gä®Ef".­yªJß¹ o¥°¼jÓUÅSãÊOQbØêXà~¾ #P ÚQ¬_Ìþ|²j@Ñx¸\Ä ælqýãqogæ\Ü÷ÌB¤/¥å±ìuËR§y¹þ`¹u[F-+÷æ#c®Õ¹HAÄÙãýÊS\­ªuÆýleù<ï1ßÜ·oßwR¾Øî¸ãKç<»Ó{õÏ'¦2VQ¾{ï½ÅÄÄDñ®õÒ>Q|ü+Ú*ôÓÎÈÛLï­úÊ­pYÐ*¼¼ØmßUàÔi(ýX_û\ÿÈ#?Hve&þêæÏ)3Þ5¶_¶X÷­¼¼ó4TÊÓ¦«7+V¬hSÈëÛ¹¤/¥ûkÓ¦«{õÀÕ¾ïìKb¢ÀBñBLçlCçÓ[Uî#
®Å­Çy"©H¿®CÉ(
Öåò{æégfYnÝ(µòM(4	¥ë7o.öïÛÎìþâÆ?Oáßÿû?(öíß_<y²xûÛß^ÜýÍoL6R»÷êâ+©ãSÉ%ª õY|eæYÂ:¬B¿í¸¾´
¢ÑPfÍ®¼2ãÝ2¡=*
zÚ1\9O;!
;Aè>Ê|Û¶)möFp\©Rf(½eç/Kçioí¯Sß£ã!Qß"mîU[áüî]»Ò Ni¬[·>
öä§¦¦¦R]ÇóÆcù!/·¬pE=r¬X»vmÚJ·uÃúõéo;H´.ìþï=µîE`³¯ðd&æ8¡XÄ\núT3_0½Ç ÞÁ?þã?¦ßÄ=uF8NïÕ+ÊG0@ðÇ¿zõêÎAX6HêÅ3Pïê² Ú¡ãb¬Wømß~ÓLüþw©×¢ìIP~ÝÉEº-³Ç?®}³xFÁ©¾EÚ´YÅÆVfBw3¥ÒÑ²êÄÔË_rT ¸©¤@ó´àun=òYNïÕy|ÔÅç-.=w¬8~üx:f( °§§O4-ayØ°PPÒV¼­è§.Q2¹»´ª?ÎtSf\ÇõU =¬zÃªf;bmýþlÌ82ÖJ7Z²¦Z¥Å@;òzØôa®ß¹@n½ÿè'Í<åî¹N´{¯~@°F·áÞ½÷$·î/i
Ýª×cÖíFtcæï=¨òuº)3õÍªäèÖ¦énÚÆ"c©t%ãÜÜN|ÀS.1\}¸º:qèÐ¡âëÞ1ËõÁå{ñêUm-st·
	òG>«Òé½uÂ7îmY¶<»¬¾äöè½¸gØPËó¬ä|wÚÙ°¡ÒNË\ºtIãÌèÒmµ«ë®áÚøB¤Óy``Í5úÏQ¢/¥KgÓ1|lÂÆï:Ü¸#ëÙ½{Wz¦>å
xËÖ­)
s¼éÍûãÌ
Þµçké:»[Q&ßâëLÒÄê}ê©§g;Óé½úÒÜ¹óÖTÑâãw¬/>.b~w¢Ü¢ö[>ÊW÷³åuIþÈgÌû°àÌñòLÚÉáÃ'O5Îý<Q_Ë/O×©¾bá~­³ïU)³øõp¬ëNp
×¢Ä¹W¸eçó6LþÈÚù Ú¸1à5¯=ò·ßó½ü;1¦wÜ÷ÌBc¬çt#`FÍs5OkÌBÅ}Ï,D¤¥Ë!.ÌE&Ò>ÿ¢SÇH;n9é_ÌUß3fT°{Ùc©ï^6ÆcêÂJ×c©	+]c1¦&¬t1Æ°Ò5ÆcjbÁ(]V´ÉW°OMfÌ\Ã¿×(¸EÙªJZ±­¨ªÒ©¯	­ªUåZcæ}+Ý¸üAa&Q	´Zzå k¢¢÷jÓÒBJhÌ0a9CâÃuÃs©Û óªJß¹ /¥P%ªÉýfAÑÍø cu!µÖ¾e	>Y5Gy¤¸/JùªMW/N9¤Û|AØê.aÌ(ÐÒeñq:2'úT
ðÝ/ÑÊ.³¢õDÎ³`¼À¢zäùéO'óùÈ¹U§ç·Òe÷Q9ygð¢U[ Ú¡éH3÷ëeõ!êcÙë¥¶6óò¹_;ÈÛLmCe×Gtã²EKûØõÍï*ðê4~¬kÇ}®§Ý·¨]¿ºùæsÊw}-oÿyÿÈË;OCõ©<Ñ×cÀ¼¾KÆvNNDä YEû¾³/E3QçB EËóíÛîg9º!Ö¶Üø-4¦PfyÚ¹UGØ±öºuëÊnÜ²%Ý£óóe¤cNJ.Q©_³fMñÊÌ+³)åXÜ¬6]ÝØëâú*
qZ	N¨G ½à!úuA¾þw_?KÐ3 cQ~ÎÓ¨ûªBvC»Ü¶mÇ9íh\©Rf(½eç/KçqSf(EY·gË]ãô!úúis¯Ú
çwïÚUÚ¿ä§bLÞ¼ÿ3LéÒûïß^LØÐ®»î£½³q6òXÙäËëûÿðýÒÎFç¼`²¸sÏÆr*¼ið^
ÔiçV Ú	æaÅÚ¤Ä7¦ÌõN<¼À1¯>S7eC"QÑª#Dò çmUÊ+JP¾(áû¿÷@Ú§N©ÛX?ðÛ>¿3ýí¬
\«y;Wº-3bXsýÚµkÓ~;èC3§g
Æ$m0}·Sß5fTÒÅru´:@0KHÓsÀknãåÃ)Å´-{6×)N*çs÷ÊHî¯ªß(Ç^|ÞââØsÇR@q*ìééMKX±a¡PÆV¼­ÀjêÕÓ@{ÈÝ¥ó¡>;ÑMq×Wö°ê
«íÁ`À:î¹}3Dé"±ìn¿ý=¯nAñL¹xù,5)	6ÜZÑÂGI+_¸Ç¢â¥äbÃõÅ7î:¾ÛÞ½÷$·î/i
Ýª×cÖ
^tcæïÍVG ü¹¦2Ó@5N?´#ºµé[ªi3ªô­t¥pqÊ©8âeTÖ¦¼\R¸0QlE;xÃúõi?¤jB?nù#­ /33§{óÊeÇíÅÃ?x¸Ù&:4k.TnÂèMÔ×;×½#Ý3løøorrysüOòN]Ê`ÅE+bb.sÞaÑmµ«ë®áZ¦'Êètð®pMî1fTèKé"/^½ªX²dIÓÊV[yT:ÜP|¤-]æ|pN}0Wù½nþ×W(óLñõ&[t7? Ü¨ø1iÖ¸[GXêz§;oMóñøËAjyoõ®=_kÞËÁ¿ÑÎðNð,e¤Yg}ðMCÐN><«
3$O¼éÅòåËÓuú7î×AI'ªYüz8Öu'¸kQâÜ«M ²óù×ÉäüPneçKO×3g0°`ÐÛË¿3ìC*cé¬O,Ö^z©qÄù-]cLm0%ÅôÁ¢Eiÿ·kVºÆcLMØ½l1ÆÔ®1ÆSVºÆcLMXéc15a¥k1ÆÔÄ¼UºüÓ}¿«óhE °½=ø÷Å¬-[UIí­¨ùfÜ_ÞEïÅ;3èKéæË÷! ÕÍè@«¥÷¢@-SR4ZVSDÄ°!4AÀEfêf	Óq@ÁBò×ÆÌúRºyÖ7fãù²Î©Zëð;xX]HQXû6ö× 
Ô^òE¸ÌGk9íéÚ\Öûå>"Ð@»Eï1f¨{èe#òa!A.ë§ÌºUtç÷FË4HãeÖ;[«´ìQ´ZÔ>ìO¤?´[}HJô§?ûYú+0L (RU oz0Õê4o'¹-pîc?ZñU]<vEJ?¶3çínnÛAóÖ·½µô½ [ì±ÝÛ	ÒÒ½­úgÙù*mÁa3P¥»víÚbúÓ¢ôh÷®]IøÊrZ·ný¬gyu]9Å Î}ýæÍÅþ}ûK-'Ò ­v1zìÒ*íJu:u|*
À¤0DÂ6
b#2uòòo~Ó8zÇ?ÒåÌ}D·"Ä\ëKD"Q×ZüÐW¦s\E¡¢.©s¢SEÅJ;bQ~ÎG|VÔDÂ"ÊÎ¶m;RÚì+$Þ8BcnØÞ+ï?ÔOôzPf?uLýQÐbßÛþ¹méo'HòÄåÎý¹wó¿yù7éÛôä=Qßl×©¾nµõÀ3ÃE1:	á×
æR  v)ÜtÓ§Aç#ÁZvi/4T~qà &¼p æ«ÏX¬eË1\vÙeI«N"Æà+»¶g®Ïëà½ÿ{¤}\}|ãÞØ|ªßöùé7ñ\ Èúî×"àIP~ÝÉUâ{©L)³Ýð±s¼LÏ0eÀ \ýOp/­É&+
dH#¶êúSllÓ·EYßlÕ©¾.«A dÔ-aà¢³aQõÂ>º±\Mï|åÎ¯¦¿¡ºø¼ÅÅ±ç¥)2 FXNOH0í¥¬4rP~¸ em"tá:¨v·ÜÊÚ[íÔ^È÷#ýô[Ú }UeM{Óàòú ¦.J×Qa îå:Gòí:u'äRÄõ$7Ô|û´nPZñ£º½{ïI®<æa9bkÕ.p=Ç ç®ÞÔÜGå^
<té£ðc:Ý´ßü½Ùâwi|¦|òÉæ¾ l)cA]FËW7ºåË\nj\Çoõå·1sÅ@.Ö#óaUçÚú7·/X¥¸É7®q3ÔìØ±½xø7-ÛCÍ"¥õ/"Úp=ãÒEpJNL,jºtâ¸2û±PmurrysüOòÞoÚUâë\ºtIãÌø 2£)3\¶euKúÍ£òÞ¹;º<¾ªi2Ô.Hù\[ºfèKéÒ©â1ÄÉd§¹¶^¡2?HçÖó«~È½tr,*îÃê}ê©§g_ý:æòåËªì+Ió**3¶;oMí Z|ü[k¥þªZîÅ+A=p/0uqXi«ü+óËªsòó>,x!É;>|¸îé+\ÞvÈujã(¹Qq·ò±¿Ëþ÷y ÈTä©X×úpºÎû­êRßGDÂ;É¬Ûxs²z6[ì÷|SÂGvJû^°¥kF
ÇÓ5Æcjb îec1Æ´ÆJ×c©	+]c1¦&¬t1Æ°Ò5ÆcjÂJ×c©	+]c1¦&¬t1Æ·Jlª¬Î£}ØømÌ¨r­¶ãÆÖµ1¦?¦tµ ;ÿYø¼(ËqD%ÐjINÊ¥LQÄ{µQ)¡ÒÆX¢òKÖ´\´¥Y«zuôÓ?g¢t®ß¿1r7%­îç+(HÖÓUàrÖÞUÐyGØ _;9×?F@³xýS½3ÆQ` J÷Æ-[é_NÏë=Ü^/äÖQnA´¬t^
 Þ[\«seÁâÂìñ~å).ÖÎVÅ:%CÛq¯¬Fò[ñùàÜÝ¾W/~)2,ÿ®õÒ>fz
R@½nYÍ¼ÜÝâõäíÀC6Ë)§P¹«\b]q¬2¯j¡uªÇ}®ä¤Nê ]ÿãwÙ¹*ýrP]±åå?-ÞÏoÏÛ¸ê2¦AÞ¨ê">«ì1ýÒ·Ò¥ÁÎO±NëçFËppD3ýÒK/5ÏÙ-ëVUî#
®Å­Çy¢H¿®CÉ(
YÊrù=óô3³,·*ÊFîÄÚ{×­[Â¢mX¿>ýbÑ©FÊjä}Û¶é~PøÃNïÕ/1ÆñÔñ©ä%V*ÏWf^%L%;A¹lÚtuc¯{ë«H7	AÔZw§(ÊöD{v¤ úÔM[×X¤Í¾Â3OìlòLP6^ÔñØ÷:õõ-Òç9j+´aöÕI¾rÛçw¦óäØ½ê;D§ÊÛ8Ê^õI0!	É·A©¯:BC_JÆI%¬~è¹Ñ²¢Ã=r¬X»vmÚ:¤B)¬Vi+Dáýß{ 	jÝÀfÿ+w~5í×ïJ¾P` ¼`23(:Qc AÀ@§÷ê=:ÀBÑc­Ç«W¯NaÝve¤n=ÝRå½ó2Q]R@¹Ñ£ðBvD+¶o'b}°1@ê&Hþ(B»Cñµê÷»îº6öº+3ÝÌéfß"­ØæiÃÔ×cLûÄ×E1Xù±I'oã±>Q¨xd¸?÷Îð,êKýÅAÐÒE°â2sou-«NL±¼è|U@ Gð·_ÿzS ç(»nRÐõ3 Á­ßI( ðP Þ«$$I´·8Íñ?~<(¤QrÓÓ'°, 6¬ò<hÅÛ~êrÅ©2e«jÁ+R±ns¢¸ºUóÓV½aU³±Ñf}~rryS1æ{»|.Õ7}ç=ïù£t?ý	eK½®\µrÖÖAÐ³Ò¥Qb
àzýAÍv"ZäAÝ
F²b;uH]_Ú4¸Àe=W0ÂG° p8ô;J»÷êÒ.û½{ïInÝ_9Îª×#ëBÑ%¿÷ Ês¡Ni­ÀÅ^®gþÆàüS+Úä~VÿUû|j>®Ðï±«BB®mÜ¸1íË¢6fPô¬tË
.óÃtÉH(ãJÒ\
ódt.\DeàFDPTéDt¼w®{GËÖæÅ«WµµhPÌÑEÙ
ÞE£ùïû9²ó&nÑ2È?ï!ÅÜé½uÂ7ùÂ³ËêKnÿHïa<g,'Í³¹(\£´æ2«Zs,B¾&oÕ¾ñ*á]>´Ìß«Uÿ =P&ú!ç²Ë.Kó´9úÞøÕ§9òéNèº+Î(ù¬¥
EßRÍ¸#ëÁuÅWÊ¨B´Âéà·lÝZ©a©0¨Ñ4[üâÅ]{¾©óñ+TÈÝ­Ý¸JIwÓóó¯m¥¨øZ<Fúº¿¼,¯NïÕ@æÎ·¦º¿c}1h`~ú¢Ü¢ö[>ÊW÷?}Eª^á~ÎëüÏ÷aÁ3P<vrøðáY!#y¢¾/_®S}Å2iPeR,O¼Ñ
¬A(_§Îñ]né¶ê´Ú¥ÓÆÝË,m8ÏéÜ~û*+O®c@¿hÑ¢Ò¡1ýò×?ùÛÆïÂùÎ*_­[o)öþÝÞYVÇ/ ±õ$Haªÿ<0ãÅØZºEÅhx.çi»EÿmÅjX÷ùwô_æuÕÚ@ø*3,¤Ò¥ci±\v¸øâÈyXÄçm°ÛÁë<úc
¸~÷ïÛ?Ë½¬é~û¯ú&®|¾²÷Ö»1ÆXðîec1¦.¬t1Æ°Ò5ÆcjÂJ×c©	+]c1¦&¬tK`õ|)cê&þYÙÊaZ±­®¨"Êß\<Ûq¥o¥«ÿÕF'¤3GT­í%
ëx¯¶|më&äù_QÖ1'vlYEfbÍóq:lõéq°Áæ°OÄÒ%6ª v°3  YÉGeX°ü%,µV0¨­äËìåâúÇhØqêì"úfîÑ `Ë%2P»ö#×¦õ°iDV7ÆÖ½×hY#â8ræw´=?òÈS§æÞ= #ê;îøRú¨ÿêæKÓøÜÜªS¾â5¹Õ6 Ìì¢UÀ< 8Q|X¾MÝ-{Ý²ÕjæåÖ!åÊ oÔ5åO=ÕWnYÅvÓ©µgÐ¦HCéÇ6Æñ¸Ïõ´Qò3êP&­Ê£]éblg¹bõ>XvcÌ|a¬çté¸,LÎkK+
Óv(ðmG+6lØPì¹ó®YJàîËÎ_ÒÆ½GÚvV P7,¸nl¾BqAX7\¢mJì_¢ÍHñ±QUÀ¢Ú´éêÆ^÷×WQ¨°õFÈ7 ½l¾~s¾D]Q§¬åI?íh;DTÚ¶mGJ}g<Qò,£UÉ%Î}Ñ³¡ÁâE«?ÑF£IFcæQº®ÞÔ¤ù¨wìZkÎªr'¸W±3QGM¿ELA ^»vmÚG°>k+«âýÎ7u>¢phq`;põ¢W©Â¶I££UWfù
*Ê[yE!@o:¥nc¬×~Ú×*ä$ë|w$\éµÌ¨<Ôáù4`ñ/ô­t5âec$Ï¶NÅ[ÑÅ%,ºéFhp 0Þó?j*éùHuñycÏKùE¨ ä¦§O4-aY@lX£ñ o+¨[ÕU·Ðp«-°UµàÍ¹¨<e%3 ¦¹LÍ|a îeäçR´Ñ}?c[èÉBQyìÝ{Orë27§AKUë´Ôu+«º±Dó÷f«# þ|×;.ø;÷ìIûÆÊôYTéÚü©æípñön2)Ü^UçõËÛÓ¹,ÛCÍeËðmÜ3lh«Ëó¬ä|wêzØPL;ÐNÇÌ=&óâßF~dbbQÓÍy®ëÇaÌ(ÑÒE@ÅcFiþ%º;wî¼µ8xðìUa>R®RÞ¹H)Fßr{éÝãW¨\*ÊyÌhññ;Y,SÊ-ºh?±åãé_Ftlg| ÃÆïA¸i«<ùeÒT|Ö:¬UggÒÖ>\<yªqöÕ/}ñº|ùòt¾¼eÆ\ø Ë¤y}h.¾i¥|:Bù¦L~ü£¤wæ8çQ¸ü·$cæÇÓ5Æcjb îec1Æ´ÆJ×c©	+]c1¦&¬t1Æ°Ò5ÆcjÂJ×c©	+]c1¦&¬t1ÆèZé²rÌ|hÃêJÃ\a2dµnWñ$ZÑ¨äYØ´yå­aÑK}°2÷ðwhå©aö~pLéve2®ï¦A7õ§ríö½A/í¬¬ìÛÒí%CN±Hë`ûç¶¥åõÊ;¤at=ÝL$<÷´¿¹týÒK}°&ëç±GòJ@þVÊ­râ~þ/{wXHe¦òÒ`ße×ÑX;\#"ZV´LV8p -ÍZVÎóªº«¬é^ÕG>h'+í^^ÐÈÔwLuì_ýúWÅÌÌéÆÑÙ#@ª©N?õÁ:àâÔºuëS¥Aà}	qäÈÆÙp^ëo38-àµÊÏ ÐdÅÝ7nÙÒ¸â,¼;3Ð)e¯[V:õêÚÞÊû®ÚtÕÈ
F@åZ÷Ü­ÚmÁuAH[®É½­deG¥kt8hw$'8@È^÷ÅÄcüÆü&CÁå£7u n{u®ì<Ç<ÝªüÕÍ7·Ltu.Qçùæ»iÈ<K÷æyÏë#¦ÍuìS.²ògó0iyÇë¯ßJ­"ð#ÔZ»úÌËT#KÊw¥ýÅ ±Üò2ËG¥JCçóûc}°ÅNÄoÒþïÿço¦¡ô¹//ÿüX¿õX)oyë[fµ~ïW»v¦zA8Ïu3ç×¬YS|êÓ.~õ¿ÕHñUHcÃ»7$+Z±ÐÊ(TDH±©Òó¡+¯LÊ8·üQôÙo)vãqkPP*½SdòÉfßýNå¢{Ùòreï­d
é´Ò]¢];càÆ£Üi%+;*]ÖaE(£OMMÍ/Kfx #¾ë]ë7¤Pf
ýG¼U¢»ÐI¸/Þ¸Ñ_8§ ùxîÆ÷o,¾|Çg=wPPËÎ_Òå<[aÃ»s¨($Oy¾¹ÊÜeð~<÷å~Ò®°ë7o.öïÛ?+í8b§|í4Ø: ÔÛ´éê.Â½¤AZ÷¦-´ªÏk®ùpJÄq,¹üb	ÑþhªFÅê(±
sºSç¢\ÝS'Ó§gRäþ¼>8O>£àH÷ª«RòÆyÚ9å¯râYôú¬ AÔÇc µaýúÆþ¡ìyßVÊ«U;£Ì({ÊáÄÍrµÊyäF++0É%Kÿréi
Â8HXfÓ¿nÊÚVúRm«,&ù*sÁçHf3(íd¥xï{ÿ¨T¨\8ÎOÇuídJ;Ý%Úµ³ªÉÊ¶JÊeR6?PïÞ{ï¬®]»6jì÷ýýýÍ}D¡qÏÌá§`T if;(Ü(«Beà :èÉ'Ó³h,Tt·J9O¦Ñxwà$åZ+x¿8²ÊËð¦>Õ,/u8ÂBHa°QÞ1(ûE]®:>Õ8Ò=ÜK¤5¨oFtÈVóºë>Ú,²÷jeNR¦Ì¨;
)WêKA:	nIÞMù¢ÝéÙ¯£GÍjwQI«­p?ïB>u-Ï¢.Õ6`õÁ;1¨è&ø~¿tjg½By`ía#5°ÖXfÈ1äVpúÊ¬á^xþùç2¸_:ÉJë ­ýÊÊ*2¥UÛÊ8òxOr¸4HKuNÂ`Ð¡V®ZY±D&W½aUÓ]ÈFÜNAÚ4`F|+s-
uPA!¶kÜ4ª^eDî:YlÎ@Hî©¼Lª0!3hE}SïtøVÐ°õÎlq£C'H½\vl¯øEc^QQÂ nÛå¦§O$e
óy)xñ³þ¬)$`Pe»1wo+x5Ø¦<ÚQ,Ä2ÃaÂ]¡´sN¿ ×H>9:ÉÊ®åNtUdJ'ª´3ä1Öt8DÊdåÐ?¤ÐÙ¸qcÚpjETXÑ]¨à%qÁpk3¡xUÁª@e¹¨k»éÑÝÁ&7ïkF®P¶NsW9ý4BG¿PßÔ{+Ô°c¹tóå7áåÒ¦]ôlb§çs8±ÃèÝ«"÷íA§,j1¨2DyÍóUþB+3Ú?Ö3Ú,:úV¤äÇ*ÊªU­»ªt9Ý>¿¬ì$SªÐ©Q/xÇ­Ü÷e²²­Ò¥")4þYå4y«y MÎ_qFY|ô`º¾óïBXQ9q¾²­
b¿V°\Æä	a[(NóÌ»ÊBâpMî¢lïÍûSíò«w¥Ò±ô»a#Yî%²¬>À2­J÷Æå«çvÞ9GÉ
/4wé)4ßwê@ÊWnùôA'¨s¬[æ|ý«_3D}´õR UQ}åýGrbML,¥¼·³3)·xM/0ÀD«¬<MMU:ÉÊ²ºnE'Ñé<pM;ÝÕ®EçsÊde[¥K¡1ê	ÏÈ°Ì²b¾×°E·^~Ñ¢E³\vBiã@1éx6Î ð.:6,!Íø%,G^6Ö6¥óäñöÛ¿Þ5Ï7×p­Þ /òP²°Tf\G9Dw¨>$!mÎ©Ì°zzêét_Ur¡!¤ëjÉ%éoÙ×Ò(óZèCn]eï­2AQÑyÉÇéÇ;Î	®á~]£urËÖ­IÀ*Ý¶:¿êRÚY¯^ÚÖ-BóÉÃO6¼Ê êCsÅeý«ú ­Ñæx6ívÊïnnÊw¶úÚ8õE_ýù¡þ­ÌhÛ¸/uöL»¦¼@r6*8!YI¦LÚ¸à¾VcQNü»ÏÍÓoG;Y)²ºnG;YÙê¼ú½h«»Ú´³Ë.»ìNhÊo¶ª²ò5¯=ò·ßCAaG×0³{×®4_ÓÊ47ÃÎ$ªÒ©Þht ãP¯*
°~Ê§ÊäÚ\[ìÚµ»4½~`ÇMZ&¬Æ­>ªâ2;L±¡¸{ÉwY_ê÷(Ð(Çë¤]
~ÚY+Y9ô9]0£NPú `9¶r¹¶Cÿ~wj£L,qVeÖLîºëÊIÊ? ôSh±>ôá×ú¨Ëì\h_(\D+j+ÓÜ§yãå:
üñp«iÄaÑO;k%+féj´	ÎdwþàV£ S½?uúÁ+>Xlß¾ã9®¨ps
>à+íwCL¾:	«^êÁÊÿ%â®ëÅÚw\fåy;[yd1V&®gÁÔfV®´¬¬Å½l1ÆÜËÆc9®1ÆSVºÆcLMXéc15a¥k1ÆÔ®1ÆSVºóþ·­Ý²d­Îó¿hZÆ.neiÁÿùå÷²ñ¼~áù,ë¨|ð¿ìóLÈÝïZÛÆ3,¬tç(´[#¢qÇÑ(-VQPçxà&òýgcQ
(ü];øGüx/Ï`­Ö¸Ð÷ `uVÿüÏzv¯+ÈcÌ°i«t±R<ô`²°xî¸ãKé/ûXF «CV«¡ ç¹÷ÛßþV:5"DÖO~oLW×ê>Y]:§gAÙ±VÄ´÷ÉrÎ)_lyºìë\n
æï_ÓªÌ"ä¥[vPZiGaäµ	,ÒBR¤EÊi	åY0¼{%x×XÏÝB½°ßmßÙ8r.¬¬ÓíÂìÆS-]É³üÕÑ#Ç
6{î¼+EçPt~TC0ca`a±Î²ÙÄ¢â÷~ï÷»¿ùÍ´n&U³Â<¿ÐjÀzã>®!(¬2¢Q(88B®åñJ{E·ñý![\~åùÓ<ÅÈúºÊ,1ÎÆéÓ3i-WP§2<E¤"ÊQGÊÖæ'/¬Â.Bù½å­oøzÛ-ÃÏ£äÐ¾hý,ãh1Ã £ÒeZ?CQ9z4ýÝÌ¢Ã±¸&Æ'DaúõÉ@âQçqI,¶ ÖnC)¼hÁp?´²¬z´I³qÓMjì)tÛÙ¸äPQRnt>ÑTlUÊp®[·¾'+(#ee­0ZX§5ÁM»EúÛA(¬é_N¬.ÐxÀhOeyR(5¶²Åì1fèkNËK.G|ÁªTä"å,6ûàE°£Q0+W­eEÚÄL%@<ï»yy.R½3QIPºÀûð^R¢¹ÞoUEÜ
=fP¸ìG°r8ôâ5 °Üc½îu½kU\æZ/¹åú§JX"Îé2øÒ¿Xz1ÆÌ%}H%kX­jtQÊBòªóÆÓ~Ü/Xi\²&½(q*%Ä¥ÐôÞ¸	Tç$ËÌýÑêë§Ìª%ÒnXå+z<`æá²ò¹ßnÀÊeÐ!ïÄ²Ä²ïßMÔ>ùÓd}ã'ï­ÀB}h.ÛcF¾îÁÇOó/nüóÆêp/(*?Bù:TU¦ûgÖÁG6LUäòe>µµYÃÆóÈ7n\
4ª/sÅRµÌzù
¤pË.3Ha0 ùc¹øU +·×{LðY¹¸»­ªP}>÷¡M¡t93ÆAÐÒE¨#Ü´bmU>
ÊïÅÝ0íÆòA°ãJ\´hÑ,ÅÑ	îcþXîc}t¥J±h»âO/Oîf)1)ß/¼ðBÓÒÅªÃí½{÷®YiÈÚOuI¾ø8*>_
÷<ÿãüûPTÎ@ôjåòYnå;÷ìIøtÓ¥l;}le1sÁØÇÓEu°y ø®ýÈµÅ®]»Êcü?,»ef1f~Ð÷î\2Ãªô¿¦ôCÙ¼´¾®²È1ÆùËXZº(ÛOlùx±hÑDrâ6%pçâî¬ÌT6Çj1fa1öîec1f\k÷²1Æ3NXéc15a¥k1ÆÔ®1ÆSVºÆcLMXéc15a¥k1ÆÔ®1ÆSVºÆcLMXéc15a¥k1ÆÔ®1ÆSVºÆcLMXéc15a¥k1ÆÔ®1ÆSVºÆcL-Åÿ@ÄlDîé    IEND®B`PK
       ! òåW'  W'     docProps/thumbnail.jpegÿØÿà JFIF  ` `  ÿÛ C 




ÿÛ C		

ÿÀ  À " ÿÄ           	
ÿÄ µ   } !1AQa"q2¡#B±ÁRÑð$3br	
%&'()*456789:CDEFGHIJSTUVWXYZcdefghijstuvwxyz¢£¤¥¦§¨©ª²³´µ¶·¸¹ºÂÃÄÅÆÇÈÉÊÒÓÔÕÖ×ØÙÚáâãäåæçèéêñòóôõö÷øùúÿÄ        	
ÿÄ µ  w !1AQaq"2B¡±Á	#3RðbrÑ
$4á%ñ&'()*56789:CDEFGHIJSTUVWXYZcdefghijstuvwxyz¢£¤¥¦§¨©ª²³´µ¶·¸¹ºÂÃÄÅÆÇÈÉÊÒÓÔÕÖ×ØÙÚâãäåæçèéêòóôõö÷øùúÿÚ   ? üÞÿ Lsô£þ1ýÏÒ½Ïþ]3þzMÿ ßý²øEtÏùé7þöÊds>ßáø\G³î©==«¯§µOéqé·ndøöÿ dÿ ÓZùï:'üôÿ ÿ  9oÈÅ¢¶³¢ÏI¿ðÿ ñú3¢ÏI¿ðÿ ñúöüZ+k:'üôÿ ÿ £:'üôÿ ÿ  9oÈÅ¢¶³¢ÏI¿ðÿ ñú3¢ÏI¿ðÿ ñúöüZ+k:'üôÿ ÿ £:'üôÿ ÿ  9oÈÅ¢¶³¢ÏI¿ðÿ ñú3¢ÏI¿ðÿ ñúöüZ+k:'üôÿ ÿ £:'üôÿ ÿ  9oÈÅ¢¶³¢ÏI¿ðÿ ñú3¢ÏI¿ðÿ ñúöüZ+k:'üôÿ ÿ £:'üôÿ ÿ  9oÈÅ¢¶³¢ÏI¿ðÿ ñú3¢ÏI¿ðÿ ñúöüZ+k:'üôÿ ÿ £:'üôÿ ÿ  9oÈÅ¢¶³¢ÏI¿ðÿ ñú3¢ÏI¿ðÿ ñúöüZ+k:'üôÿ ÿ £:'üôÿ ÿ  9oÈÅ¢¶³¢ÏI¿ðÿ ñú3¢ÏI¿ðÿ ñúöüZ+k:'üôÿ ÿ £:'üôÿ ÿ  9oÈû_þöhÿ gýõ/øGØ£þßö)xï¼9åøSm¿vÖSÿ øz¿K¼[áýÖ[oK)þCjüÑ ( ( ( ( ( ( ( ( ( ( ( ( ( ( ØïìöhþÀÿ f½ûvì1ýÚ ò/è[<¯¶Þ}Áÿ Èm_ûcñEà/6ÞeÉÿ ÈM_Ô QE QE QE QE QE QE QE QE QE QE QE QE QE QEýdûQýí]ö_µÙ~Ôå4­¿üRqÓJº?ù«ðb¿¡_únß¾-8é¤]üõüõPEPEPEPEPEPEPEPEPEPEPEPEPEPEPôÇýíGöµtdö£ìÔæÿ lvü/ñÇüÁï?ôC×ó_ÒÇÅ«\|+ñÇüÁoôC×óO@SþÍ?
üþ´ÇÒÝüIÕäð¯îîWæÓv@á¯éu5yôY+Î|û=¦© ø÷Wñgàð]¿õKm+R{).¥iekÛ!ù^m8$îyÙñíwã-+Kð¿þø]ðGô-ßO[+;Ó¸¸âåÂnYû
¢¬ü\ý¥4_ñ´6úÕµâùô=GRºyn³â;G;eiÇpwçµ~m
9ôq*¤â«Ê;IIÁ*_,[¤ÝíÌ¹£}ÙÙzVIôÿ 'úØ¡'ìãaáßOÖ<k¤
&ÏÄ6ZÙæyµk[à´\JÒÇr6rX 	ô­sà½µÄë½y¥ë¿u_hÐYè¥EbÈLhÑÀ0¼mÁËn6æ,M`èµ¶gZ6¯èÆoi:æzú¬G.Ð¹÷SteÊ çµGâOÚ»@Õ­­âµÐõµò|ªxGÌÔõ¼Y.gyæIJ©bwÃhÁ8^+´x½H©Â[r·îmÊ6i¹+;;y%kÜ=Õù_uÃRýfñV­©êz¢è~Ð/®ÛÃºÅÌ¬o-ão³#±-c,¥ws¸-r~ýã×µ/Ý'¬î<áÓjxK°¸¼k©.T´1ElªÌ_xm¡
0'¦zOÚSÂ÷.m^ïMñVv¥ÚkÖM£i%ªA(c)JC
Ãjàõ¿uûkÛë"ñ|WÖ>$Ò4
z8
GÃúÂÚëkqgn¦c	3Ì¬ÞbPr¸ ®Nª§R8;rÃþ}«Ú7'nvvV·#÷[_¹{þ§üdøE}ðÄ}÷±êv«a©¦êÃ$h·rÊE GVFOQ}×öý|/eñWÀº|S¤Ï¯êÚíàëdF·Õå$bdvâxÇOÿ ¼Scyc«§XE§Û¾¹ªI¨^Î³4ÓJüovrv U :ëý¦¾ÙøÇÂ=ñ7µËÿ èzl:[½£X]ù6ÿ féãhËDAAPûK n9SèæK;­ÂT½¤¡5.^Nnf½ËÝÙ'¯3vµÉ§ì]vÓ¿Ìç¼
û'OâoxV÷VñBxRñbù-Òn®£hÌr\Ï·Gu àn 
ã>ø$ÚþÒðtøä1x®ÓJÔì'Ñ±vKv#ï)¯Sð/ím§iþðnâ4ñ²ÞxJßìvÖÞñ+iö­ºÈÒGÔaIR/Ë&^7á/_Øÿ ôê6¯?Ù|C¹qmÌûnDÌîI$àXêMtaÞw[ëÅ§kICáÞòååjÏáå¿5Ýú§t³³å\»ÿ W=ÿ Hñ7> ~Ñ×	µß±ðþ§¯ÜxzÛRÐlÏP±s3Cé"¾«l,¬¥XÅpýl|]um§_xêÚË\¼ÔgÓ­ôÍ/KT_+ÌºòãÝ¾îrJØÇ]Èþ;ü(ðwÄmGâGü)â«ïÉyq¨Ø/5c§ÙÝJÌÂcQËgÊ©`2MIàÚ¿IÐ|à3Qµñdw~¹æ{
Z[=;\îLâ[ÅYgcuÜª )<?eaé_-¥8'&|ÉOIIÉY¾Dö¾ú$Ù³täß3Läãýàðî}yãßiþuÛÏXî³óíw6¬«q'îÆRg@däå¸Sï>9~Îþ²ø¯ñ/Y¼×4ÿ ÿ ´n-Í­¬d»iîÝeò <|ªvferã$â°<MûAxâaÖ,|oávóJÄú´7Òu­®#KÙVI­'ß©BQõùîàsÆ´Ç>)j>5ÒüUáb/k:ä~!ÓFyWºuÂÛ-»¡óHÝF8   õµøuáZ¢²;$çNÜï.Tù¹ïgÍËÑ5û­ëçÿ  ¡§þÇ¦½ñ,Má}+L±Ö!Ö4}6ãPþÒówÙåÙB¸_Ý¸rû|²¸9ÈÏøÿ Âö~
ñUÞ§ëÖ^&±FðêvÖ9UÐ0\G]ÛYÊ²Î3^ßmûNxjïÅÒ]Í¡øÃv¤YhÔ<+¯5¾«¥Û[nù^M¢9üâìÏ8ÛùÇíñr/_ÄpéòØÆ¶VÖ"K¹V[»¿&0h¹UUæ|eP:Ù>ÎSS;xÞ\|_³qþâIÚ?ËvÛ|×Õ$îmË'Õ>_wìÿ ÿ fßxGÄÞ'ÑüSâ+UñàýSQ»ð¬µû6I£T¸#cÏhÝ VÃ1Zæ¼5ûjZíìî<IãØG¨éZ+iw2ÀÉ*·Iï|¸dpB¹wÏMûLøRñ'<w©x?\öy¤^I£ölw3Ù5«]ÇÌËð»ßð*îûeX.á½f>¿áí**=/Iñ<z&£äGåÁ,ð !
zÆÀ9@r¹5ór|OÕ¤¥ÌÔy¯ìþ4¥u·³æ{»IéyZìÖ>Çgúùn|±qo%¬òC24rÆÅ`«ãL©.®$¼¹yX¼²¹wbI$rj:ýi^ÚîqzQLAEPEPEPõ3öaGÙý\ÙFÊ áþ.Aÿ £Æù^ÿ è¯æJ¿§Éÿ Æ¿ö½ÿ Ñ_Ì= {¤þxoÁ~
Ö|_ñ+WÑ¯üO¥V+?Â«zÇçË¦ò<ÂÇî¢¹ß³þ·ágü:gñ×öÖm¬hÓé62¯­'Ìü£c9Sm<â½Tý¢ôÿ >øhðGì,ü:©i¬i6×1·ÛîAç2³Âv`½`ÛH<÷Ú¼;ÄòÉâÍ'Æ_ðxjÊ_ÝjúÒi!mdi4©ælåTM_îÑ¼ â¿'þ×ÎpszÉÎÚY>[;UQV´"ãÉyóOÞm=³§$ßOÈøÎOÞ2Æá9<'­§[îè­§L/¸nþôéÍv¿ÿ eßøëÅú÷¤ðÞµ£ë>s«Íeu¥Oç°&h¢í
ºWPORxÉàý'7Äk[x7Ã¶W^ µ¿³ð©¦Þé^!êÖkyçG]5µo8wFqB~lUY&ð¿tÝ*ÇÄ^§©ü?×ôs¡j-UÓôkbm­ãÔI±mça`sW[³ÒjÔ$á&¹¶æ÷­Íðµ«sCUûÆìTa}_Uúò^ðcâô{½[Ið?µ=.Í./lô©å&O¾Õpr	ã½`·5³Ò®Îx-ugx´ù
²íÑºÄq!8$
û·àç<#­|½\ðþ­e¤Ån»­øÕ-Æ?ÚÍi±³`$uÌÞÇ`ãÎGÓ<yá/añWtØ¼âYµ¤Ôµ{{g¶KØ¦hãf
:VÇ1í¥Å5"p©M*iÛ]­V×ÕêÜ ¬Ô_¾.©¹tW-ÓÔùÚÇàßu8µIlüâ¸ô¹gýàÒçqi$ ÒRäh÷.àØ+¸g¦Ý| ñÝSÅW>ñ¿]EÖeÓ'[B¬p­æÛ×Ð´7¬/~xÛMÒ¼Inñê5ÝAá±»W3Z´QçÚ­åö·Ý<à×®êÚÇô½Câk^Ôl5OjVoµ-æ£­·Ø±ke«¿ÝûB
US¸åS±ô©S­*+ßoK;Ú.)îÖ¯µdÚJü­]Åª1råLøþÏÿ °.5ßøB<Dt[xêmDiSý8^5$i6m
QÃ¬C[þ6ýü]àü?ñ5Î¨Í¡i-"]>Q±Ì®°Å¸åDóU@åHÎkè­â~ÓEÇ-¬~Yé·õ±Ñ$C!Ý°7pTó» ó_>2ðÇôÿ  Ôµ½;}7D×4	ZãSX¥Óu¯^ÙæDo:È?~	¼Àâ£ÄY¥(Â¯²[)r¤ýäáY¨]ìù©­Wó%oæQ¥¥ÿ ­?Ìù/Äß|eà½VÃLñõ½R¿À´³Ôté ã$(£(/ÉòE3Æ
|]ðæ[XüWá}gÃR])xW°ÔÊ2WÌQ»=E}7­¼§ü?Ó-ï¼	àýb?G«Z©ñÞ#ÕVG¸¸&aVtR¡¡øÙó¯Úb?CðJH'µðö¼ÚóÊ|'¢øÉ<C§K@|ËõÃ;[±pä%'WnñxM
5(¥¶®µ¾¯Ui=4WåuüÎ*Í©QM§ý^øOá?¼{nøgÂï`g5KÓ¦¹RÑ2.QO*$ÛzúÃ¼aã
róEÐ|+­k:Åï´éö|³OÓµ·¢©eÁàäx¯LK¤þÇþÑtÝxÙßß_Ockw²meh"Ní»¼À¬F29îÿ 5Í?âü-x'Åúnüai­Í$úÔë_`HÀKuCåÜ¡~®XdßchVptâ ÜÒæ´T'óOÉ©]ZÛjìÛIRK_ë_ò>>Ñ>øÏÄ¾$¼ðöá-sS×¬÷}§K³Ó¦æ
§
¾5RË@9­bk:.¡áÝRçLÕ¬.tÍFÕÌsÙÞBÑMªÈÀ>ÄWÜmñN×5ígÃ°êÞñÌámLñ¾«¯¶ý»{kæîÓRóY¡K±È
¶¾nýª?±âÔ¯¡xëÄ0¶eö.µ5ÔÍ¤âWµ[µn,ã5¶SâqøÏ«W£ÈyºöÖöi;»^)Y/yË1S¥Æé>ü0øsq¤Øxâ¦¹i«Þé6Z¬ö>[¢[eA!¾]Øí:W	­|(²´øEwñM×d¿ÓÅRørÚÞk!æmüô¹cæ6ÂÀcçß5õWÄíoÇí×çð>­ð¶÷AÃDõ©ü5%ÒÌQ,¨æï3®ÃtÆyOü7wñà_>ZjZøûKñ±×ZÂMVÎÚè^Õ ì³oXc¨;Q±µ²¹¼»8Æ}^#OXs«ÁòÅ»>hªqpW²w­ß©¤©ÆöKú·©ãþ øaýðÁþ:þÒóÿ á!Ô5°y~ÏöQÏæn;·yý6mêsÇYñËök¾ø+á_k2ë1ë
¨k«[Glb:>¡öx.~É!Üw·pv*ã-{áÿ 
øvßà¼m¯è­ÿ Ö³âÏAm¨Áq1~æH¬¼ÄbM/ÙvÑhªö¿¼û@xâÇn4;¯ë>(ó<Uk©ë¾$îÜêÖåäX4L±<Ñ¸ÿ ã¥mý¹º´êÒJnm(ÙÓYBîÎÑs¼m(·¤µ(ZÒÑ¿Ïú²ûÏ¨¢ý8â
(¢
(¢
(¢?ª]ôoªh÷}£ÜP=ñy¿âÓø×þÀ¿ú!ëù¯é·âäÿ ñj<iÈÿ %ïþzþd¨ ¢( ¢( ¢( ¢( ¢( ¢( ¢( ¢( ¢( ¢( ¢( ¢( ¢( ¢(úû_½k÷®ûCÞíz ©ñjë?
üd3ÿ 0[ßýõüÓ×ôwñVûwÂÿ ÿ Ìóÿ D=8 QE QE QE[ÒtÝ{TµÓtÛI¯õ©{[hÌË#**YàÉ 
íßlô¦ø+ñ+S¿]­Þ¨hém©jDWíÊ×"UUtnF÷Íyo¼â?Æ¯­èZ+@öÙâbãr|À|Ã##¨¥Ðüsâoév:>¿ªé:}ë«Ü[XÞISºgiuRÜpOMÇÖÔ¯>è¾"ø{ãOÃ{x.t}BEO³ÓÖdWì÷P'÷£Ì^<¿2ÜßHð¿ìëá_ü@ìÚÔ(>«q¡jz~µ£ÅR4º]ÝÌB<Ù6ïU¼²	Ï}âÏz]­±¨ë^%ËZênå¾í»¸H®OÎÃÔ9Î+¢ñGÅo|Vø«ø¯Ãòë¶ÚC.¢Ðé×ÓH4ØD+Ò+®<´(Ç)ÏÔí<û&Øø«Åg®üQ6©»øqîä[%® òÌÈ¥Þ#sAÀaæFÌ6ðÃÚ÷õ?éþ!Õ¡´µ²MB!¨iE$ñû;JF';êBpSäìûÅ¼¿1³øâý?û(Úø§Z¶þÉ%ÓüBeû¡b÷eK¹qÍ¦´m~!|CÐü/Ù¼Qâ+ÞMqqÃ©O¼²f9']¡°IfIRy§Ô:³ã/Ù[MðÍ·uM;ÄWú®ánÛRI4ôâGÓ®ì­D®
;j0[î¬r6ÿ ß³¯|J¬ïÓ@³ñ%ÕÍ­qÛA-®ipÆáUH×
ÜìË9Ü0ÇñÇ±Þ-ÚxÛÄIt³\Ü¬ëªÎKp ¸vüî õ|
Ùª×ß<e©-òÞx·\»üÝõ)í»ò¿yù¿wòsTëaõ=ök¼µÔu/h÷º.¨Aká¿jé5öÌ¿hKHùXä\(À%p â¶<9ðÇNø©à}ÄZ®«o7ü$SÛè¾¶VGÓtûÛk,]eY2¾ýªkÄ4k^¸çEÕo´iî-ä¶k¥ÁY#%HÊ0È+Ð]wÃO×Ã¯>¹Ô/´ÿ ìýFÊÒÅu+9/`ò&5Á!Lr ÉUÉ b©þÿ ?ò=N_Ù'K:×¡·ñtÒi~4¾·Ó´;Ç±U{yg°´¼íÉæ(¦ÃÚ[A¡[Í~%|!Àþð·¬u?í=`lâ\ àuÝæE*4®¥dUÜ¨²!edøã}løvokÉå¾«ý%ÄÊÙÚ}¤ç!Ì`·÷ö¸¬/k(ëûÄ×º³ÜinmþÁªË){FEXÊynrV4L``"Â#èë¯Ù¾ÂxÁ¦@5ÿ øú-SU:zù²Gi¦Ë<©.dx¢b ÿ c£çhº_üMqg¢jSjúWÐ^\Z=«ºÉIsÁb»º0WIÄ¯ÓhvÚô~-ñsi:-í¼úêw>U×âGßÊ@¸Á
¬ÄëZÞ£âMVëTÕ¯îµMJéÌ·³4ÓLç«;±%¹4u*(¢
(¢
(¢
(¢?£¿íCýê?µ÷«þ×´kZ ·ñCRÝð×Å£=t±ÿ ^¿ªýçøªøwâºUÐÿ È-_ QE QE Waðræ/
ºº¹ÎÖßZ³kV(â'Fffb  y®>q|­15Ì>Ô/>&k¯¦øTiêz¤Êt[Kqz²Ý\I¡¢¿UB°Ü7o5êZ~m·à»½;CßYCj÷MýªF!kW,¾w6+"WoÈR^èÞ§Ø¾3ñÂûM'SÐxwUð^?mà²¬·ÖÍ$­&Öd¶ý»¼²å
ùBpfk~ðïüUg j>4××IÔ4Û°³ÄÎÁ r03dÉ½l5òmuÿ 
>Íñ[ÆxnÛP·Ó.&¶º¹[¤v-äÁÚ	ÉHÎ ä-ï­Ï×´SkZÖ£j^7´»»ðf­4?4¶Í¾¤HËn·*¾z³yÌK9]©h-à­-Bò×Àë©ñÛÃ"$ ýØé#O3gÚâ Üã9à×Î/õOê&ÇCÓoµ¬X,­YJäì@OR?1RAávëLQEÔfÓàA-Üv4QÈHPà`6YF	ÎHõ¦#ê©m~ë×sÃ«?´xÆ%­Ö$
â}ëí­ qhSûô
ÊjíÝüÿ å½µ¶×ìþG4"ÓôýJ[[Z/°ýuºªåÄdUD÷xæ¾}Òþë×ºOnom®4{ïXÛ_¶}i,w71Íw
ªùjWûÓ©ç¨é©ª|)ñ=­æµöëZ¥Ípê¤ÜF¹Y@Ëöãæ
½¡êcÞµM_ÂßtK¨nü!qâk
AÖÒþ;T¶0ÄfMN9x&2}c¼§ÉËhx¿Áÿ 
¾ hðhî´
ú÷Ä/u]¯,ÞêóÈ3I=¬Y$L¬­>
ÿ 
ïÅcXI>Öµn#ó¡±þÏÏ7Ü©·q\+b:?nüfº[%¥ÏÙ%²k[´më|¯'®àWÌÜ8æ;¯Ù×^ðÏü#ñKþÈ­u-2êÃNôwÔVÖ}A#Õm&8[pmþTR0#<× Añ%çuÏø÷Å·|âýjóTþ95iP^hò@áDq gâ3±^e»K Ì~mÿ oâß·Ggÿ ¶µöÉ ûJ[ÿ gÍæ4[ùvä®àWwLW;FêÁÔûI¢ðÕÖ7¼9oá
KSðýíÎ¿jYIÔbKÕU2â;éá2f(
+½_MáßEªGá-7[ÂH¡Ô49¡º[ìØ"X+fWÛ¶{L"KèÉÈù¦`{O!ð¿ÀÛ«åÃ> &þÛR±Öñ7GØæ´
»ß÷ Àù ÆExµR ¢( ¢( ¢(÷Cûh{õ£ûh{õ¯<þÞÿ oõ£û{ý¿Ö:OÀoønë¦\üÕø_®~7×7ø/_]Ýtû×þµ~FPEPEPEPEP^ðÇÚ_ÃV!Õâ»Ê+ëc+HMÅ¤ÖàüÌ£çnëÎÜwÈóê(Õü?ã¯xgÁþ ð½ºkwkKm4ï6óA>øÑ!°1,dqFÿ a[½ñWíIáßx³Hñn§áýsJÖíu9^îÏAÕþÇkyc&®úVtQ ^VPÀY"?5Ñ@Cx»öð¯<+¨èðXjÖqáx¼6|~ï[:ÆBå>M ¸äZÇhOëºõ+oÙ\ø·ÄWÎ¤PF²Ëh×
sm§¤ÂLÃ2«eávüãE@zZ?íà/2Iá{Ë][AÓ.l/!ì×Ã=³®¢ú
¸+,ÄÄûvmn,<ûSYèwZn·m¡Ïs­Úhí¡Ke¨Ì.,îâþÓ7âyáNJ°+Ë.àróÅ-séKÚ[Ã?§ÚÏÄº§Q?ö.b¼M­?$8ÖÌ)K¨H0,A­|Ö}¸¢[hES ¢( ¢( ¢( ¢(õþ!ýú?á"ß¯,ÿ ýº?á%ÿ n;ßëáü+¬®î¶SüÕù¥_pxÄ[ü?©®þ¶²üp×Ãô QE QE QE QE QE QE QE QE QE QE»àß¿u¨Gck¨HÞð1ÑÆ×Ê<s]ýÇëm5¥Ûáßah
»È¶';
`<nçÔ¼ ôÉ§ê{§øCA°ekY-âü©FbegRß3+BüDr÷ã½ñ·ü.­;¬²Éö=Ò;~bÌI9'$	ä×Ñ@ÿ bÕmµ«hüáøíõ5 ¢Âÿ ¸"(4yn%´äóÆ4¤øõ=ÅÖwqá}æûOXRÉ¡f,L
r[ õøýí¬¾YE oøËÅ6þ+¼¶¸DÓô?*#Ç§FQe%Ù·°þ÷Í8Àµ`QE }Qÿ +Qÿ  ÷þ5/ü,­GþßøÕá?ðïþ´ÂX?¿úÓ¹«úlöÍSâN¢ÚmØþÔ¿æ]·÷M|ýÿ 	§ÿ AM_ÿ 
þ¥?Hþò×Ú¸ú.«úlÞÿ ËSÿ  ¦¯ÿ ÿ 
?á2Ôÿ è)«ÿ àÁ¿Â°h¢áÊ¿¦ÍïøLµ?ú
jÿ ø0oð£þ-Oþ¿þü+.«úlÞÿ ËSÿ  ¦¯ÿ ÿ 
?á2Ôÿ è)«ÿ àÁ¿Â°h¢áÊ¿¦ÍïøLµ?ú
jÿ ø0oð£þ-Oþ¿þü+.«úlÞÿ ËSÿ  ¦¯ÿ ÿ 
?á2Ôÿ è)«ÿ àÁ¿Â°h¢áÊ¿¦ÍïøLµ?ú
jÿ ø0oð£þ-Oþ¿þü+.«úlÞÿ ËSÿ  ¦¯ÿ ÿ 
?á2Ôÿ è)«ÿ àÁ¿Â°h¢áÊ¿¦ÍïøLµ?ú
jÿ ø0oð£þ-Oþ¿þü+.«úlÞÿ ËSÿ  ¦¯ÿ ÿ 
?á2Ôÿ è)«ÿ àÁ¿Â°h¢áÊ¿¦ÍïøLµ?ú
jÿ ø0oð£þ-Oþ¿þü+.«úlÞÿ ËSÿ  ¦¯ÿ ÿ 
?á2Ôÿ è)«ÿ àÁ¿Â°h¢áÊ¿¦ÍïøLµ?ú
jÿ ø0oð£þ-Oþ¿þü+.«úlÞÿ ËSÿ  ¦¯ÿ ÿ 
?á2Ôÿ è)«ÿ àÁ¿Â°h¢áÊ¿¦ÍïøLµ?ú
jÿ ø0oð£þ-Oþ¿þü+.«úlÿÙPK
       ! ´®~  ~     ppt/media/image1.pngPNG

   
IHDR    D   aùUy   sRGB ®Îé   gAMA  ±üa   	pHYs  Ã  ÃÇo¨d  IDATx^í½´UÅï½üîõG[HFÚ ÑDâPÓÚ­1!ø M´ÇMb®ñMGûÞ!ýµÐ£ÁÐ_¢¹-Q(Ñnî Q¢"àñ
t@Cáw~uÖÜÔ®Së±÷ÙgÿßközÔª5kÎY³jov¾Ë¨÷!B!*àÿIÿ
!BÑçì´ç^û*ó)B!*AO!BQ
>B!De(øB!¡àS!BTO!BQ
>B!De(øB!¡àS!BTÏ&ù×ý×äGIþïÿý¿éz>÷¹iÉ½Ë'<°"ùÚg¦gE«(#_ú>¢¯q,÷¶=QeêÄ5îá^1ð`ü1Ë¾DÁ§%0Ã*£)ýË!ÜvÛm¥;²ßMò¿þ×ÿJ8âäoþæoÒ3b AßÐGôUo5jTú/!è_ZiÛª¤U~óOÿtt2|ÄôS1²ßýßîMÂòÁÞ{ï<ñÄµdçàçü<9ðà¶ÿ{rÓ¿ÝüàºëÜyQf©ÌpM6%^z©9KýíEN¾÷Þ³<9úO'#O¶¾ývrùw/Oî½÷Úó/¿ürÍHÏºxVrÂôÜ¿Áï?ðû{ì±dß}÷MFIêÞR¦^aàÎew&óÌÏ|6|ï{ßK.¹äWmÛ:ëôvÚ5È«£}I~E¶lÖ©_95Ùyç67î7¼ñFò¨eÛë×¯ïºgg ïÿù2Ç_¦-|ÂúöÐ¦PööøPÍ6mÞ¼¹fçì½áxßþ¶ÍÿìÚ·Þ«_~:Äü¦=gø²ßÝ{î¹ç}lB­Áä«3ý¾qÃÆ®zìU'SÓ[Î=ùäÉ§?}tÒ¹í¿î_|nÚÔ.ÚýPäO¥	eé?Ã8zíwëö%6Fm·_~õ³Y2Qæ³Eæ/ø×Ñ¢9§oÂñÏ30&kþsÎÙ=\è¹Ä_qü>ì
±zwÜ±îß8¹¿|>O½æÍW3¢\ÿ«£rÿfÀû²ËêlèKô»ÈVA"z±Ç{Ôôþ®{²ÆÁ9çüõÿüµ2}¾õ­oÕ=Ó*ÊØ®ùc ñËìQGêGXÞþ&¸òzKÌÆ ïÂ®úuàßØØ1;oºõÎVðÌ3Ï¸@n·Ýþ$9èÀÝ¹âãîïã+O^ïÔ úöuÑú Ï´Ðð×üHYÂ2è,_bô¶Ý<5f
-A2fìX÷ofm,+üpÉ7£ç¼y:cÁ øìg>ë®¡Ì}b08>üá»ÛýüeR6ÏS×9þÏÿù?Éç?ÿy7[fq:µTFÑÞcÏÚÒ³@+3«d°âp|xÞ®Ãïÿ{÷Í>ÛÛÛ]»h+Æû¸ßÉA¾&O¿ËØÊ&Nt÷>s¡l¶1ùßÿÛËã?<>}¢{Sf8ý÷µ"ëeSü²í&2F{þÙ8W/êgÏ­²1EVy½ÅlÉÛ¯Sàúr´~³ÀÎÇtÁ}Cß£Yá;>úÓÉ7¾ñdþüvçíÙXÖ(/f¿¿óÿ/Ù¸aCí]VÊ|êé§Ý½à×ÍÚË}g}N®?i%V~èG2l<@/1ZÑng¼7ÏÀàfûKÊÔµh<Y{{ëV÷o	× Oæ~&YÏýÙek~×UF+¶Høõb	
l3säý¶Þf >ö<¸££Ã³r^_ÿºûkXÝ)ò²Ê¢
òô»­4çúÛßþ¶æM÷C ,Ì/¾øäWÏ?ïþÍ¤nd%ù÷C>èÆ=×ª_()cSÛ´1Áß869¦,ÂòbÚf°¶øòÆ>!·«dõ.PÇ¯ÎéÚé@¦ô[É~£X¿L~øa.ÐõÛÈYßÞ]vÙ%×´
óú²Xe|ÑÛvsÿ³k×¦â(øl!(¯el¦(Ç§/ÏØ2øÆÕdî6c³Y³
Bfw6ÇeÍÚeòäÉ.S`ÙËè¶?ãÀA ´eaìÑï2¶  'ËaÙ2d;gYAÍÓN;Í]ã®ó,6åøNhÈÁÇèM±¬Ù*æúX[°»È*Ä#¿ßòPúÂ²lv #{Æô 8ßÐïLÈþ©O¹zúøcËÈéèø£;1R%¤·2æ¨¢Ý
>[ 3ø7ß|Ëý»/gA;
Ì<ÉsöìKÜÀÂ9üì¾¹kF(ópö
|¶ÌÝÏa¿gFâ$yïâ³ñÿñÿá10­ø
4Ë²X»zÃOz·«»imãßBôYú]ÆVþò¿t­þ]DÞ8`¼Z&qmAAûí>{½k²6%QoáÞkõ[û-+fÁ}aOËHóM¬?O:éÄôénìYú°¡ýF×(v¡´ÓÇ¯õùEåú*°à=¼ýÂÈ«TÑn- #µhÑ5np
À¬À>Æaö¼°Ç?¬ù¶¬
:S¾ÉYsCÁxþ¿÷wîy2mÉÃhzËêÕ«kî»ï¾ºw6uçÒ7Ñßø<õ»­dO¤?N÷YãÖ§Ñq@±½y6¤lJHÏ#Çþ$Ö ïÂL.ýeûoZg­À`çý{}xÆöv¶ªêYYöDµ/zÆ»ñ/uµöæù*¸ñÆku§m|;ù´*Ú­ZCûV-%4B!ªý¼Ak+¾ÔÕ[ì'¶ì'¥}ûÉ!ÿ¼hÊ|!¥ OfEÁêü£U_TB¡¿O .o÷[Ø~ù¬­¢ïQð)4k×>¹äÓX.ò7[sè>BËÃ­ô(Ïÿi*;ÂmZ1´2Ö?hÙ]!BT2B!¢2|
!BÊPð)B!*CÁ§B!¨ï2J_8B! Ì§B!¨B!¢2|
!BÊPð)B!*CÁ§B!¨B!¢2|
!BÊPð)B!*£ßÏ3f$kÖ¬Nþ9w\:o^z¥µÜ¹lYfÙß¼àdùÏîM=ìP÷9¬X<³víÓ=Îû,¹þúÚõ| V~o¡-Â9®P7êJC¸ßêÈA»i¿aï¢î´Á¿×¿m&_á;ìßBy÷ûò]Ø»­nY×bm5ùå]ê_GÞÓÊzôÑ×µ%,#ÔXÝbåÂþµ~µÓIxO(+¿ìÞø '±>æú)«ïCýå ,«gxÞ'OíyûìSæýFìÞPföIìÂzÛ»cúM¹Yãs\óËòë+ödé>ÏZ]b²Íz®ÕÄÞëG¿î¢wzgÇCl¼Ù¡Hh[cãøþ*O¯û%ø¤Â]taòìÚg	>\}ÕÕÉ´c§V2í³ï>ézÈçwnÒ¶s[z&I.]L4ÙÕÉ[n¾%Ù°aC²ì®;`O;ý´déË2ëM¹{dïä«3gº{:êèäñ§W«O9lJòFWÝ:è ôl=+[Ykç¯¿|ý¬³Ò+Û¡î´{.¾xV²eË×î°mS§NM~ûêkÉè>Ã	Ó§»û2D|FÆÈ:òC¦¼{9î¹ûdÊäÉµëL< Çõæ÷Pt¿}Ì^É¿fõä8ñÀä_®¼2½Í@æÌÜxÃµ{o¹õÖd¯ñãÓ;ÊA9^:·6N8%úø~Ý:þØ,?¿Ç=ê;ìÃjã6¡=_í@ÑÉÛn¿Ý=?ûï/qmç:®^ð××äÊÑÖ­o;ÝnôÝÚÀÁXð~ü	îoû.í=p°ç9Å¸qãÜù"Þïãß<tpÝX*;æ²êýÖÞêÑF°þ¸ä9Ñq[kï¥nÜç'V­^´··×äkÐÇ§~:=ÓÓ 7¯½&·üVgDßAÿµ³ÎL~°øºìù÷þöOïÈþô1vzçÃ*©G~¤&7ÆöÖ0m°{òôºÏÉS¶¶¶ÃÀðüdIüïÿákÆ0æy`°8ò'pÁCgg§3pðøêU]Æ±#3fûÌ{G}pTrùåWôKÀéáLöÛ¿¨ñ÷Á(ã	V(gï½÷^×þf7r¾qþùuæÀYíþ¡Ý¹sçõ¸N_ÒWÍÔ¿Õ èúa\öíË2lÚñ¿<±æÉdæg¤g»'Ïåþ:Xk/vÇëþhß¿|jmü0ÖsY;á¿zÁézþ-_¾Ü]ã¦MÜ°3¦;O=õ³Cy2Z¿~½Ó9?ÈjÔ	»ÿüI'¥g»aH½Ã=÷u¡/@GDZ[vÌqXB!¬÷©§~¥îYÀF0©`^Ë"´·1(>ö'Á`>ÇlwêÍxkf²!>Yþ}ÞyßH?ec6èW_uw4ÌØYì­ÅÆOý|dnþýæ:£CðÃÌ´ÁÊÄÌdÅéz02y Ã;YOÀøáÍYv#ìo¨Ëº×Ö9PgËÆ@æ~Ý(½ráB×¯ÍL"¨ýW
Î-&_ú¾° »?Ù¸q£Ë¾ô¦.¦[6AóA>/¿ôrë¡äùÁc
î6Ù3¡èºô`äßR69Ù¡?¼õ7·ìk+°É:Ú½°MýMÙ1§¯!ã?üáä_ú¢<cýEh³@¦ô³ß_eú|}©Þé/Yæm »/,Ãß¦°£§ËFV¸²R:räHñ·Ö,o&ØÛ
789`Ó±[úÂQ(\ñ¬ÎE#»:þ2=:yçÝwê±ÕÃ?¬V¶ó¡îãöçi^ beýpÉ<±P¶-g5; ûó"pAy(÷ºuëÒ3õ0 yY²|ÊÉ5Ù ïC%`ÁXeÝ3vìX'w+ÃmIF`Ç@È#KÎÌBË8ÛíÉ¬¢õ,ýBÀÃ²e3^ËLBYÛR²û×·6Y£Þá¤©¨ßË÷þ<¸À
'ÒÈ+[oÚzúWOOVÜ¿¢TàÙÞ>Â9{Ú0ãÄéÉ­·Ü995,`n#/³QyXV«Ñ-2­úÚ%[
bÛ>¢_l«Ä½i¦v²ÝÇ/U/líÈé²ÕØ ÛâÃyìÆ,oäI|DlÁxt«ÂÛ:/~ñÖlNï3|f3@þ,e»âòËDÙXBùêË)î<×QÖpOhoYìâà½¬ÊÍûemÚ´©PYbX¦Æ~èLû?PgBà·?ïË&pÏnÞ5÷08	Âq¸'}Á7CÀj BPÂ~Zdaÿ q&Ì´§le8ëëg»²	FbeÇ`z^v,ýk;3Ú2IÈ[-ð³\q)"ëý1ü@dûÙbáþOKðÒÔÝ_zwÁ~GGaÆ´Jbö>²~²6díñ%(²í"léÁí¤&gÍ¬Dí¨4Ò;ª¼±a|	´¿
h÷.;òÞ»ïÕl×ý=¡!*ø¤²E³Úª@X¶öë.¢lÌz|Cê§õ¹å­Z©ïPl¹ Ü[æ³èÚk\°ÝhÐHÛl)wñÏîÚP¹¤Ð,CËúÁuèPó®µ'ÎÌKÓô¡´'k?"rÇÖÀ3ù1BÝu¿«ýeú­ckÃeSV¼ÇBð:ªK¿ñ5jÔÈº_D?@býN_Ò§èl_`*zêïomdÌé«Á_xåB7q(HôAho³ð÷£q¿eh¨j__ÌþàÔI øz½EØZÿÚôSñ&È%Ã¿£S¤ËFÙ>QÞè_ÊÃ>¢÷ôKð[2Ä@}P/[¶nP:'fÆÀ$o9§Ñ>¢=ýTÊ¢L?èáàÝyJãP´1oI Çæï÷(àXòfÐ1lq,02¹YFª 'aûc£Îw;»ÃóéæaÓg4ØS¾Ðã?2(ôu^¿÷5Üùû[Ë¹Fê½yË÷¥LÝF÷ÈCViÓ>çlQY[ÞèVV|É&áÔM/^üÍéÕrßÔ&LP_å{Þ¡2í-yºöÁ&ot½Ú¬@XvØ`²Æxk~	>-M}Î×Ïvi¨Ñ`¯¯ ;A Î~©õ´&CmNëþOôG»|àS´Nf)ö\E¶än4â|5!¯pùL
Ïì5ü	!®ÝVV_=¡]Eû|hí¡]~Yf Ch «®ú~ú©[¿gÝ²	Á¦+
¬LØÞLî³½~6¹!ûiºCÙôK¨¿YXüùïëö"6
ïMüßïýñåtÉ°ìãÀiÑ
ë}ÓMÿVf
;öß?ëßEL>úèRv¶awHØ$£Jü,2ÍÁø0ã;}ôgÊÊsGÃâï/\X§fséØÑä71ãvÂß_ô½~	>1Ì|1$¤ªù@£ß|ìKXú	úù_X`ÙevÂëU·êoö¡-´É_÷÷ÑþDTrá÷}(%(øÞRåá`VIÙþu& y¿Ø(þ(o\ò®/³ÝQj4X¤=´öYY´öÕÙ5Î}ÓÖ^äHvÇï[FYJóþéR@ÄäÎ¾¯;ÍøÌ21¨?'RD¸G`sæÌn¯^,Øõ'¶Öïfíà³ý¥±÷¼ºXYvÌ!gÛbb÷qt¾×1ÏòÉ±Õð¿pÚ[ð¯sø{xé¶m®î1»æÛ?ÚFð·»/A>8v¶HQ¾K@6<6×î£íöå-Ê@}ÛÓÈ¨uèWúòuÌñ=÷ÜÛPÀ(oÌØa6Ç|<?µÓð]F½þ[!B>EßvB!¡àS!BTO!BQ
>B!De(øB!¡àS!BTO!BQ;}pÌ8ýÎ§B!¨e>B!De(øB!¡àS!BTO!BQ
>B!De(øB!¡àS!BTO!BQý|wî9ÉÒew$'OJÏ´[n¾9ù9³ÓOõï>þøãy8yòÉ'zVÏ<þøc=ÎSÆ=÷Ü]÷]íî°¯9Ð'>û×9L'¸f}oúÓEÎqÍ<¾¬Ltgø¡þQoê/ýÊ7ÓÜo×°!Ö/>VFø,ýÄ3aùú1û++Ogóô0ö,Gì^²ýòÁê>G]Ã{ùL}L÷³dWoÊ½×Úþu¿.}u´÷ÙQÔ®ì*´%l_ØbèÚ§"î×àÁôµ³ÎJÚvnKÏ´3¤{dïôL=±wßu×]ÉG|ð!µãÛoO6nÜüôînGÿ¥SOM~z×OÝµ,^|fêT÷®Õ«×$Ó¦[÷,×ß|óÍdÙ²;Ó7ÁÆÖ­o'³gÏqýÉß1»íaHW­ZU×ïÿ8w^z¥y®_²$9jd£äß;Û9¹îºëÒ3Ý _qEòØ£ÖêpÃoHÞ!Êg3f]<+ÙÚ±ÕÉ=øø'>Q3®<`¼sý¿øErÁç÷b°¯¼òJ2úOG§gºøÉO&#w
Ñ>"y}ýz÷wÌs+Ûúøì³ÏNöÚk¯SÍÂ6wüqÏÚµÏ¸zúïtÈÁÝí¸½=@»7ýç¦ôSwx&Oê~-½ãä£ý¨Ókã¸cuòÏ[Y}Gmmmµö`»±áV6}H_Zy}Ý×ôÍHà3ÑOÚtÐÁHô×÷»~P/êçëìíõw³û/w}Îxú«£Êí¯~>ÍÜµùÉOnv ¤ì»1¨êSÎ©cÇxÏd[gg²æ'ÝõÕkÖt«dôèzgbsÌg_ÿú×.¨úç}ïBwÐ!@gxbòD¢>¡^ÂUW/J¾óï¦Dy6Ã:²k"pÿý÷¹Ï¦\4n|c90Ù$à±Ê``ÐýJ ùÖ[oÕéÏR}j}ÿÔSO'çsnzGw 6{v·C'8Ñ[¥Msç^Úc"dlÚ´©+l¯k+r¡=~Pj2\ûÌ3î3 7qÓsà[6oI¦O?Á}æYÉ?$¯ïhÿg~J\MÔùpðêiý#zýù»×Ö%Úcôj0W/ýW~>O>åwô(;Ìz(=SOÙwA7lvv9y3¾Á bÄõÍîÓuÁM¦¿¯þöµdç.=4*'Ïf WÆ=ãß ¢oÎ¿à|<4è'?i`+(0a1cÆº¿>ð@]ÐÃ³AYfgb¶Ä²©a±äµ'l§=~ Êûö·£ÉÒø-û½åýôQ"{ï¼©A3eó^? 6ßcúøËy[ H ÄîË¨ËÝÔËêH}ý¾Û6oî\õßm·ÝÜj¥µ7O^ïgë9ÏuË¾òÏl»ãY>)Ï¯Ég©õ7onÝ{wdh«">úÂQÌÏzep6(³íï~÷rgCõz²Df`¦LR3H¡!í
è:4í¸c{è¢÷ýø¦Üòh+ß/ZOÈug¶ºIEÇÖZPê/QØmÜ¸Á}É3òY:Û(Ô%=
_6ií´ ¬í4ýµûöb%Ïúå/¹ ´·õ7dÃÄ@öûËdcmúÛµï»¯[6ûpéÙ¡ý	õ%Ûo'6|¨ÕÌó3gºk±¶-]¶ÔeßÙÂÆ>nô¨¬¼²3f[Iây¶=Ç&\gÕ­ÈgmÏõURm Ã¤ÚÅOy(øÌ ãØ¹­³i÷Ü$pþeóÝ`gÀøpHYÏÁÏÃÝlÀ¥Ï.¼°GÆß¿E¦öwÚ¾d_C¨Ó¡î§fßÎMÐF`3ÝöÞ6b?F¹F(£³­ÄÏ\RÚA{hí£avÉùúuëÝ}±ì-û÷?>7ëÙ=âW^¹Ð½³?MX	blï'6­YKÕ8zË³½ötOdz.}Æ2Ö}
Ý5×\ãÚG¿]4]ð'ÒøIü%2XÛb4"¯ö]£¨¼_z¹vÝM®¶¼¹ånGyY>_¸ðÊäõ×_O¯ÆQðÖ£.ÿ p}h4»ÀVw]nìÌÄáÌ3·ï«ô]Â9ga#uÅÛ²èÈTíÈÂ¾,Â/K¿ûí·[¢¶ ÓÒ	öwe[vÎî7fûBgýLlÛ>¬-÷YiAé¤Cqm{A0? ãß¶ç¸º,^)?hmP©[É!IdÞÄ&¬VOIÖeã6Éô¿½øAÉ5±îkìGè!}m	tàòÄNªÕv¹Ó¬¶Å(+¯²´º¼
K Óü}ï½÷êìRÏ(¡íGjÑÞL1°` ñ&sÒßËXEPWÕþp:CXðg¾û×sÖÏXæ2+±eæc9¦öì=tP-{±ei[fVé,ÏÒ¬'&åGqôXiAéCumÛeèliÕ¾Òê,ò7oË´Ë¡Ô¹úÙ+V¼ÚG´×ê^~=MdÚ² Hã~Õí_ô±çíèÏe`KÐðkd¾eËæÚ/CØA°bIXÛBW­.oG'Ï.
>#d Qfq6L*_ÀEG^0ìOb)Á5P@¿÷½+ÒOÛ~V¦J4ýNpeûÒãt6îÙèxEû
mrðIoÚïº'KÍ¾M± %-9L_vÞê,ïãË=ø`nÆúî?aû·¢~æÉy,OÜÛÊ±~QÏ÷lX`l ÎymíØØ¡úàkb0ÖM×ðQ|
úý,ã@Ýd	ñÌYQÌÒÇ¬¶É+üU	²ÿd³hDþ¢[mÉÛ*¦à33áÂ³¯áô¯^[.À°û¥ÉL-ì76ýßô9ò»ýå&íËQõËeþ7-ÀHÒ5a²g)çîÿ,èóÌwY=äË¸'cã»Àg4®@ñÅÄ0¸ò±%ù0ÈÄ1e
ÞÁ.Â~.ÊlÅt6Kýý¢|ieVpkà´·mëìTÒ¾áÃÿGmÀ§[U
¿´Ð*Â±Åa{¢i6ÜÚý)Ä×°?Ótï±eóæÚ}ÔúAþ¾;¢¥ëª`ÿ.ýmÄ.1aòûÄú#¯m&l#<yYÀký:lØ°®gzþì¢ÑücPGbÞ·#î·ÇWù[ÊØÀ>8fÜûé¿B!èSùB!¡àS!BTO!BQ
>B!De(øB!¡àS!BTO!BQ;
ße~çS!BT2B!¢2|
!BÊPð)B!*CÁ§B!¨B!¢2|
!BÊPð)B!*CÁ§B!¨~>\}òüóÏ¹cíÚ§o^pAz¥µÜ¹lYré¼yé§zxçòÝzØ¡îó35kV×êåVÏPßð¼á·²(s¨à·ÏÈîÁ¨;oç¹NøçÃþFþuPÞ»`Áüçí ^YÄêk÷S«³uxôÑ×úû­~>áóÍ´;VwÎù÷Äô*lWø®ªðû+¬/PÎáØÇAY×Àä»gCùmØ¯Fì]´2BÙóºñ¢ï n>ö¯/CX½ 'GØvÊ¡<ùBX°=1yÅd¾­OØÖPy}¾3|¶/åÇQÔFÚPEÝúXÿféo+è÷ãu(ac5KáõØx÷éàÎiÖLð1w,½cYrÚé§µ´ÓLñöÙwôL=äsÏ;7iÛ¹-=$K.M&M\«Ç-7ßlØ°!Yv×®~Ôúríê«®N¦;Í½0 L< ¹øâYîú³kM.ºèÂ>Sö*A^£G®Éå«3g&ï¼ûNòøÊÇ£:Ú£Ý[¶lqrá3ç¹+[Y{ö5OöèodLvÏ	Ó§§W¤£ckM¦Ëçt­ìùg>Yý´øÚk_z¹VÏûÀ°>ë£FÚÜtp#Bî¾NqÜs÷=.ø¶û(ïû&<üHí,¾.±K»»^ÔçkgéÞMè¹òJw
CÔÞUkkÇ;Ù»ì'®ã
Æs3m£Ð^Ú1uêÔôL7|^qÿäæ[nI:;;½ÆO¯t÷ßîÚÝ¾n3ÆÝ»aãa÷eÈ.£Ó¡¬.½tnM<³÷Göîá0Â±ìg8½0Ðñõú×ßH¾~ÖYé8O?ý´µß>8tò¤­­-YµzµûÜL}¦Mû\WP£»v"#ßña·üúbã±õ°ÿýkúÊ{éfû¾üúp\2{vzeh³åæ#¥L@ÞÊ÷íèL?þ:ãÛpàßã2g¼ç¥~	>ø§úôSâ»dÊäÉéÞñÅÉÿøßÿÃ9÷SX<0ÒGy8
ÃÀ¡||õ*Wo7Îb3lO=õ3¬cÇu+È1Çyç}#ýÔ·Ý~{Ü×àôlâà§´ãË_>µTÔnß¾úÓ#`àâçÎWÓ)ÀQ¡»è&}ê%PÖeß¾,ýÔ÷ØXA¾pú (Ñ%tç, A>Àó£:È}.ÏÍPV¶Í@;F}pT- ä]´;G I_YÛÀ·{¾nxà5óõ³Ý¹gÍªÓUtI»Ôù'Áõg'²¿ä9uõ/ÂïË,L7C6ÿ~s]ø©vÈtvb¯	´ýú¬[·.ýW=þ³Ô½³ñ'Ø¶Ñ$-_¾ÜK|+ÿæ0übÃ²{>	Îp>7nLÏô	³Û+V¤gê!«ægÖ²0#Ó MÇçO:É}gí843Eu°AgF§HëËÁ òf ÇôC÷ÐÁW^}Õý»U·f Û:3åf¾üÀ*6N¸ß¢ñÜeeÛùÂ¯^p!õ÷'°´`Ü Ø¡.~ÀmÆBÈÂÊása ïcï.ÇÔþðä,ÂöeA´Ï·µËÔÆh¤><±WÔw»c²«úÏß>f©}H ÄîË(Zú(0A³:õæßvÞ¶LÐþÃ?Ì­p>/ÃEøÎ0Zt=5õÙðWfð=üÉðíR|ÌïobF¿d0(ÙùóÔNå¹)äæýÓ¥ÎÓ®fºKt8Ë8ÀØ±c.YRÈþ;ÚÛG¸¥P»ÖAõRa=8Üö.Þ[bíö¡ÍL^p~æ4³26xÆ ýCïXô÷³U3Dïvº¥o¬1Û6×6mÚ¹=¢|ÊÉµzØaKöÈ¶Y,ûù7ßü¦ûìåuÁbW]Æí9Î#³ Ô2 L,&çÜ<ã;´¹(K	ô àh)cqågD² }è·é'ûöööº}Eõ1(INÐ>°uÃÏ "Û§FÆøÂ.ªÙóªÁ3FlÙÙÄ²ÔØ	úÐ¶_Üfhû9ÝãÌÊØoÿýJg°û|ª-³ò`UêNìÚ
?¼ÁÝ_]ùØÊäÅß¼èÎÑ?d½´-báv¢ë¡¬¹¾Ç{´ÄO7ÄGþjV£ô{ðIg¢h_~EÓèbîË/On½åV§p,Ù¡(ñvÖ×Ïv×1ý´úÆöZ²¯Ñv³â@.aPîùôI¸o§/° z3µÛvÉ
ùûÑ=à³ô* ¸£È,4Öü¥}&SÈËìô½ËUUÐìñ$[fm`;Ó>¢ÝÆ²Á	¿ÉÀ°L_KïyÙçf°2Í~Ý²º²-ädþuì:ûgÍ÷%¾]0[J­ÞÈ$o ©mçb{
í@®þêe/1®¬DÛðLÐÆMÀèìßW.\Ø¾d½Ýck%ãÔV[®²æ:úÓ¬LÐþóç»Igo|q¿4 Ål¶YÛ0`×½¶Î)AÖÏ\Qg=J{ÂL)bÆv(@é/|#_¦2gEP@ðZu@^6ãÓ[ÂìjQ»-Ø%¸&+d2(+ËùdeÃÐ¹0ð«
Úâc3Ö]x¡Ë^Ø~ XÔåäÜå-mÉT7C³²mçxafÏ?J2ý »hÙ»
X?KÊ;©»&!eW x?AeÊô%ÐFìöq@ MÆ·EõaÜð%+V ò"ã}Õ±»Npïk;áïæÿÌ'Z õå:Ú`L?Kß+7¹e2ÆUH 
öÍtÚEÐô¿ØèÄ ö>ä}W>lìüÅ§>{±Uv
5è'&hØö2«º[;2Waú%ø¤óË6 j¨-8È&ÏÉeayÑ·c[Mo÷ñùd²YÁµÛ&2~Jða3íØVb¸¯°¯Á04CL(efhV¶­ÂÞ?å°)µ ÓÒ	à3djçóöjúYR?
¡­¼ÓÞ÷Ýû
 {[ÛrÀ7ÔËÊ¸¨>$¬8Yb 0°èoèó(åeê±'ÜÃ7õÙþh-CûÇ@ô±>Ôý_ú¢ûbõ%X$h4èSVu8}ìmfÚÆYÌ^,ýüÑGs¯LÅlC|ÌPÅï'ôÏ'6éÅ.±++@ïà3ü"Ï@Ã_
óÁpú_("H`0`ÌÍAø³f	÷ÙÓ4¡=?úÑMuÍ)Vó` 6Êµ×eùª ÇÌû7ý÷ÆÚVýÉ²}Ð	¶øÙ½¢v*18%¿~<Ï~$yÐ;Þ}ÕUßO¯v· £/·~¶ÌdBlOÐåW\á#ÿç¸ûyÎì=K{S_NþÊÊ¶¯0Ú}ìØZ	ØñãÇ;'çfdqváv
²ÛèºÔºÓPÏm©,t><ÃaË c¦ìÙçî=úè£Kí+ªé¿âäþÎw¾~ª·É<ë}³çeêÕjpÚ8oÓêB=c0ÖÍá£'Ð¦ªíj+÷)3q²Ì'm±öp¥îVÀ8ãgíLè [ælµ³è:ý4jÔÈZ,cz8Á~ãCcã	6Þ|úÛ{íÓoËî±/vôÇ>µþRO¸Àò¿¿>ËÚàþ²F| Â`Ûu]ëúàæâàg_Ê<Èò!Ü¡>ø{ÈÂ};Íî£¥ìw­,ÞùÒ/5ÔêÏ~_NÐ×yX»C,@µ%s²¾Nqà }Ú»p@S¦L©]ç^É[~l5È}@/bu°ìÕÑßçÍÁ¿MedÙ
ÊÈÖéç	ÜµðËMe¿9ÒÍ·Ôm6Q
·üðoö&ÿ.äýóÏ¯³1Ô6Ð»Ïú#ÌcÊ¶¼ ü=~_Yã{¨Ç¶mÑÉE³õ	ûÀ_>ê¨¿ªG&öóZÔÅ·kfÏ«7õ±É1uaïjV o²û¨39}Nß¾_°ØäÓú>·Ì'AµÇtØtL8¶kÜÁ£m}_tyu¶º±ýÜsÏÕ&CÜÛa²÷¿^âëòÆíNÃwõ~úo!B!ú~ÿ¶»B!ØqPð)B!*CÁ§B!¨B!¢2|
!BÊPð)B!*CÁ§B!¨>8f~çS!BT2B!¢2|
!BÊPð)B!*CÁ§B!¨B!¢2|
!BÊPð)B!*CÁ§B!¨~>o¹ùæäÉ'pÇã?wî9éÖÂ{þaÎìôS=¼sé²;É'¹ÏÇ|òð#×êåVÏPßð¼±hÑÕµk÷Üsw­ìHØÿ Ô6øçr2h¿ßNäëOY±âþÚyþòó¾.ÄÞåß#ö|Ø/á=|kcLG¸9øÄd{Ö'|w(C°r³êá?Ê7&êëy}<}{^7bÏúÐY¶þáa?Q^øõñÇPÏøzbuÊz.Ô}®£366|(Ë?oÏÚ»|]£<¿<kå×8bòÝïßÇõPïyw¬ý6ð×/#ë¹V{w
	å?õ¬Åà"óáx	û½H§û%øÄX¼õ·>ÄO=õt2ãÄ[:ðÍpíý½Ó3õ0¿vÖYIÛÎmé$¹ë®»#8²V/;n¿=Ù¸qcòÓ»ïvõþÒ©§&?½ë§îÚ/N>3ujÍè2ÀöÚk¯äì³Ïv×_yådÖÅ³ÜµÈUW/J=ôðºvZÝÏ9çÜô®Ä]ãÇÆ76$\p~n_½ýö;É1Ç|&ýTÌÉ§âÊæÝÔÁÞG_Ð'eXµjU­ÿ8w;OáÜÁ¿þùN«&tÆúcöì9N_¿_þâÉ¬¿U÷~äõ»×Ö%'~2=Sÿ<ã=Ìª?õüø'>Ì{©ëcéÇ)SÒ3Ý ßè9}eýL}õ¬¶áÏö~êÉê5k­ÉèÑ£Ó3ÝïÆ¹[2yÒöq6þÃ{º¿¯þö5÷×ýý§£k:ÂXz÷ÝwÓ«åaìÙ}lÍ¦Å Ý_qEòØ£ÖÞwÃoHÞÔÙÆxY{ã³uëÛNöÜ½¥òê¶æ'ííÉqÇéÆdºví3é6ckÇÖdáÂ+sËoYöj¨à÷-ývÐA#y sy¯þz¡¡cÊóoÜøÚ{ïº>÷c£ý|PqÆé§$YûÌ3I[[[2fÌØôLï Á8çüäf7B,PÀ æ@ÿÔ§ÀW¯^ãÿ¶ÎNgàÀwfÜì^X¶ìÎdä¨vÀ4Ãý÷ßWØW¯¯_ïXoM+ O,Àùù e[À¨0ÐßQPÆüËæ7ÔÏ×]w]²eËæZ0AÙ#ÚG$÷Ý÷³Rå Wè¡=ïÃ³ÔóÇ7ÝÔPûvD;û/O^~éåôl7è7zmdÉÄëC{ìá>ç=ëc,°qÒAÀI Õ¹í¿êÒüd²eóý£?~`E¹ßúÖé§ò¼ÿþûÉk¯¾í X~ç;ßM?õ
±@=Äú)Ä!SúÓ¯s6]#gQºÁ°±#'ø=ß÷à¯°Ø3Ï¨Å>ô¹]6+±çÁþë_ÿºeÎ5{è¡Ò3õ`dÂ`$ÍÉzÆ¯³ËèN~û\dÐ6nÜàîÏ3C?üñÎ)¡ýõÁZotÈÁÎñ.ø ·yÍÀ¦}D{úÉÊÞ\½èÊ	ùðò×íOÆÈ~ÃNÄ²NÖ§ ÇZ?ÍzÖ`òEPøBmË û,ØÃ^`¸4Ye[?À4blo0?óÌí	2¯;w+ô¶JB{2bòëÛ¬À=þ5Z5¼Óßæ·
Jì¾°ºÜM½¬Ô×wØ¶ysç&sæ\ì¶ÛnnåÉÚ'¯pç¹n	þòmw<Ëç2åùu3Ùò,õ¢~óæÍ­{ïP;E|CÜ°i$¢²è·à³NÄXd-»ôÏÏzgÏí õ&»úÝï^î×XfçSXå1cÜ¿´HNzÆÌé¾¥OÓ'3fy#äÄNª=o¿eY;Þt!dÓnrËe`òB½Ì AüE¿Lb S©`|ù+_IzðA-Â&¨èÎïæü¤´lÑ¿¿:ê¨déw$ï½ûNz6W&I¶Änú@ ´ó°.X&vÓ¦Mîùæ;cO]ÍÁ6Ë-oºzg-q3öàwüq=»wÍ5×ÔÆR³u1b¸sèÁû¨WÖ4,`Á1õ£-6Æò°-
±U¾ú2igÙ­±í,ék[â¼ï¾ûÜyÚiÙx+ã£ýh¿¯¼Q_& hÃÆYýdµmé²¥nÑo¾és§M;Öé@Yye>ÑUÏã¯ÊÃ C\g­Èg©õã¹2­ÁÅGÄ<±ñÜ_ÞJC¿tÈ±õgAç¶ÎºY6{ÁÎ Ro[ìfX	 	PÌèÒÕØ²ÿ`Ã3öCÑö²ë,ih9º7ø{¨Ù+jØ>SÿÈ[Nm?8Æð2aÐ"dd4Dÿy`kUökG[M2gsþù¸e;À2I+¬¢«ñÆÆ BdÈÑ£?a	ApÊ8?V²Â²Po¬%h®³gËö{>ó2Äyø{>	@ð²ÈÓ_zGvY«ýEl²LNÖ¬¥j»m}b»c~;)lv%¥7øúÁl2ã
ûnO#à4}µ-F#òú:QTþÀ®ó´mUèÃyóæ¹X'0>(mýËîÌÚ¡YK_Ã]¿n}â±ò3Nãë;|3¸×,º67[1X°À¬Ñ/!ÏðåªAîÈßYo`ù Õv²d?³ðc¹zfË5jþò9túö<}ÛÎÀ¼k-ruÜQ}ú³Eæè/&^{Û£Pÿ	PéööÅ2çdÜ:¶v¸ ñcA)N0+ËàÃ38zÇ¢/ì,ûDPP´wgLI{ËæÍ³·YøûÑ¸¿ìÀ2±/uµØd¾bÂcAiÖe¹ýþ¯ #aÆ ·ìL+±É_°ÅþJíÀ? û¬¶Å(+¯²´º¼¡ýAÉC,ï!#Êd½hâ= ÏJ±ý]ÍR­l3ÍÚÃéíÑ¥zKVFpp8ºFõ=#f]YÂ1ÇqÎÚÎÀLüÊ+:cß×c}ê8Z>ç}ÚöqÄu^Rleæí
¡<xeí=ç¿÷8Ä=&;»î²Kz¶'Ôà® §lfËÆþg?ûÆf«¿PôlNÝì@ÞÊv{ø²ÁèúÁ3ö¼ý¹ìëö]äËØ8¿dÑ-Xµ-¤QyÑêò"ôß)`>
!ðÄ^ùÉ<ú%ødäÏ¦	föT	F9ýbÀpì6LªØ^"»æ//vhGÞ^°öÌ>ûîãöoU	ïFþ8ÿ0»þúë¢Á]QöSþÕÓëÚNl½(»Äê z_4³!+#E=YîèíOìèÐ'Ø$4áÈà«!!\Ãøã`rA&(/`}¾ÿ	uA&6gö]¢zbP·%K®w
²¥³§NaÆ	L¸w8Ä&;ÔË@ÿ¿÷½+ÒOÝï'8ÎËü·ê^vï¦µù/ÿò/ ´¬W£ëVÁD>¶,4meÇ@öfðQ¬z úeúÂL¿0²VÐ²ÚR$/ÆMß1 fÑüwTò&fô¼F¾ÜÛ/Á'Ì KocPØ?Yõl32å°>i;õfiå-0è­M\cÆ!fmfFj»aÉ¾/ñ÷PqX°üYúAÇüë8¤Fõ²[ÿsX?7ó9sLÏÌqú_^óá~ÞÉòayó[¤± [cØèg²Y{Z}Nù[ß~».È$hzï½÷¢zbðì®»ìZ·ÜJ0hûz3nÑW»ÊdÅìP/ à®Ã{ÑW_6áò/]Lð¿pÚ[ð¯sø{]	Ü·mëtu39øø6º2Q-µi5ô-oMS&´ìß±eóæÚ}´Ý¾dHöE0kWÑÒuUØ{øßà°­Bym3ù KLªòäðn6ÌM ³hDþ1¨#c÷
åmO¡å°ÉN89òÆýN3îýôßB!Bô)Úó)B!*CÁ§B!¨B!¢2|
!BÊPð)B!*CÁ§B!¨B!¢2v¾Ë(ýÎ§B!¨e>B!De(øB!¡àS!BTO!BQ
>B!De(øB!¡àS!BTO!BQý|zØ¡É>Ü¹lYz¦µPî¥óæ¥êùæ$Ëv¯«Ì1#Y³fuòüóÏõ8¬Y»öiw¿|öá>{²(S^üþ¶cÉõ×§W·ù÷ Ó¦W`zÓEÎ÷a¹V×b:Î=úèÏ{ÙÐ§&ßL=	íFxÝ/;«ÁtÄîåë»Çôûè÷Ðædé_/"{{w¬=´?&ÃØóá;¯?¾L¶ÏwñN_öaYÕ{cuÊëÿV@½ü÷q:B;d0P -aûbý áX	Ç~x½¨Ïû=ø~ü	ÉØ±cÓO­ÃÑ>ûî©|îyç&m;·¥gdéÒ¥É¤I	>V;n¹ùdÃ
É²»îtevúiÉ_ç®ñ÷_úbÍxr}Ú±Ó«¯ºÚ]ví³ÉE]X×AbðÑÑ±5¹øâY®Où{ÀÄjË\û.íÉWgÎ¬éÍË/½,¾ö8±­¬ËqÉìÙé$ÙºõídêÔ©é'Ñß¶am5ù.½cç~PeOèÆ8cgûØ ëw1úbúÓñÇdöß_â®eÍ±ºLx`ò/W^éÎS&:nÙutnØ5lc°~½8î¹ûdÁù_?Ú³`þüÚûù;å°)É]6ó rçBüçßxýLéËöéÓÓ³q¿}õµäÀLÏ$ÉÓO?íÚè÷#:yJÒÖÖ¬Z½:=-ó¾"oLðfL:¸P¯ò òzÅ&~C	bµG~¤¦³¡-ãßãùÉ¼>ï×àÓÕk¿{-=ÓPÇÿý?Ü ±$'êwÄG8?¾òqgL1fø»ù÷Ïtû^¿íöÛÃØ¡ôèÑ£Ýçs¾~¶û{ñ¬YNGg<±æÉ>×¯_ìþ¡Ý{eØwtèÓSOýJú)qÍdÊäÉîs=±@±}l^CO¼/_úà¨÷SctË@ç¾üåSët¯t;w^­^@ MÄæÅÁ×.^ìþÓ@0[÷À&ûí¿_a;ò³ç}ÌùíÁ;üÝ{ï½N¶ XpiýhÐ7Øm¿í¢ï`L017n\zFF°þ$É·eüsÀØÂîùÁ~
>qÜïv&ë^[i
(;Ì+V¤gêa]4"}Àe±iÓ&`¬÷þÈÞn¶mÐ¹¬µ>·ÉIÈSO=ÕT Ñxë.&ÛÖïÙ " Ú¸q£ûgOb6 ½¸èÂ]ÿ£Æã«W%=¢"¸8Ï%}Ø0ï5~¼»ß@ØsdÕL;
[Y(c§lºÔ+.¬³·´ï cvz Àøõ·oË>þÒ½_XÆ@]î¦^VÇØÖ»FÛ\6þÒ¹ÉÈ#Ýj¥µ7O^oI&à<×mÎ_>³ígù\¦<¿n&[¥^ÔºúïÊ3Æñ
7¸1È¿±oFÿë·àÙ)3c94P:?ë	Í¬*©e±ã`}ó
W^}ÕýÅA÷Ã?¬fðBC
ÌFq²_?ë¬ôè
¬d´JN>åäZdÂCUáloá =ÏÁgÎe%\·.>áÇÐvKÈì[ðíê¹ç8g'©'Ûò2Üÿ¿¼ð«êáý'ìïÄyÿtiz&ÞaÁ¤þm±Ù6fH(´··×-¹CLæUg"iËÔÓ >;þ6{Ólm3gv]øXóWýõ¥lu >²ú32ÛkÛ­·Ý\rÉdË-n	ÿ¨£vúUV^Y°ÝoÕÊUîylhQyl¹A¸Î
[	-ÏR/êÇse&LÆñc¼È&eÑ/Á§÷¯Î¾Ìü;·uÖeÈ Ìr0RôWÓ C]|Î_tÀ_~èkVzûÃÈÀÅÆ8fýíh;8F&_~EÓFµ·øûÍÑÅßl9ß*ü@
ÌÙâ¨ÙCoA{VæÃgÿê­·ÜÚcY}çwv¿Lö}çLÛpé=+ëÛ7ClBM1»BýPf-U#ÛªpÙ·/«c~v2ìûcåÀîK¸ö!s³[ø~O?©CPJÀizk[FäÃ¾Ëa÷âo^¬]ç¹Í·¤
%èCöyÙG¿¶Ç:r bËG¡âSg3R¨amÃÜÒ{YY18ºéí,e<-Ú£aR7jäÈô¬([h²üFÀ¾ýæÅÓOõ0©ÍÊg
ÁASÏÞ=£nYNº(~ ægy2ü Ã"mO¼aÏ³'}
ÛDpÈïkgY8ÂNÛr'ïä/m¯5ýh{ÏnÂmýElBi:hAiÖe±?È¶úßÌ§O}ùsäÚþô*±/a7ý=éèÁ¥?¡£Ftö2«m1ÊÊ«,­.o(B0idòP&ÃÛ±µÃùÉ µNfð9¶¤Ø ¶|oÌbFÝ®7êhÄà>Ï[ZÄ1ûûE]F¦ÏúË>­ñÎL¾¬AõèRn89!#×>¢½á	I£{1ó¦}È5³åÀlýÒYï2}µ/íù¿:àCíÃÔºØs6ísýº"_­dÚ²°$¿¸
ÐE±çíèÏe`lÁ¤íIgLlÞ²¹ø¿0k[H£ò*¢Õå
Eè~Ý-ô1öÉ2Öÿã;=YëÊOu0³@:ºVPÖA°OàÂ
ßôbÉÎKï}à#ÜdnË·Uîif³ùç¾¯Û* Êaûºù2=ccÉµMHqfþÁü=Àýd¶É&Z	p?úÑMîoYpLq¶þs;ãÄéN²FYAk^ÐlúêÛLôXúÌü)¦®2)ÛÖ
ê@]l©Ý>}ôÑ½Ú£Ögô=qÕUß¯ÉEÛ 9øYÆúf{Ò=+±7dµ-¤H^â|¶qÇøÌûIÇFä¿£í
÷gÄ@Ø5Û»üì»YôÛ2d*búßVî	eV~qð<bhAß²GL/¬ï¿qþù=tÈ_nâ¨-GËeþüýaö-Ëè #Ñ¡ü9Ê|kþg(gX*¾ñë²8,ûÚ²0e¢²t`¢]£Î/½øRÃ6:ùm&H&«au/zõåô[õc¼ùde8íKGß_¸°Çõ¬@:PûÉ(û¼m[gæjVÌ«6Øä÷ó}öoÆ ÍvzÅw'#e {¾~ôõæI8Á¶=fòãëµ¼¶|°6nÈ¼6îø-ÜØÏ.È?u¤î¼o(Û=ôE6V«$b8Â©ÏNÃwõ~úo!B!úe>B!De(øB!¡àS!BTO!BQ
>B!De(øB!¡àS!BTÆN3N¿ó)B!*AO!BQ
>B!De(øB!¡àS!BTO!BQ
>B!De(øB!¡àS!BTO!BQ
>B!De(øB!¡àS!BTO!BQ
>B!De(øB!¡àS!BTF¥Áçyç<üÈÃî¯ÿïÉ'%÷Üsw²hÑÕé3Ûµåøã¯û·ßF!ú[n¾ÙyÿBÔe³ý|?õoÑ:²dìÿ{G"Ëïøÿ¡Ì§B!¨>8fÜûé¿B!èSùB!¡àS!BTO!BQ
>B!De(øB!¡àS!BTO!BQ;
ße~çS!BT2B!¢2|
!BÊPð)B!*CÁ§B!¨B!¢2|
!BÊPð)B!*CÁ§B!¨ÜàsÆÉ5«çÎÎ^ÙÎë¯¯]ðÁC;4½²;-^ûæ$k×>íå/[AXoÞ÷-ÿÙ½Ñ:í
ëEYVnxrh§]ÏÇP¶?úèÏ¼}øÌùXæéB¬,àô¬,¾Nr a¹~?ÚÓo2M²ÚgýïÖÏ¡øÉ&ÖæØsvu±±dGLÎ¢µ ÍØ<Èê÷ð<eòîPËê¦'yck±qdpì}ö ÎyãÝ#olé¿_L`uãÞX=[éb4Ó>ÚÁsÚ¶/ÖbàÂ¸d\øã3+þx°ßt:3øä¥sæÌNî¹ûdÂ%_<+ùô1®½?²wòÕ3Ý=GutòøÊÇÓ«ÝpÿÇï~ÚûÚYg&?X|{vâÄ¹òÊôjï6ísÉ7ÜèÊ¥ní»´÷P~ê~îyç&m;·¥gêA¨GyDú©dòÖÞrår<±æÉä'¡ÖÓ?!yäáGj×;þØÌþûKÜ5Ñ­ô:yûÛjè×&àôÕú^°`~Á°ò±µ{8.=;½Ò¨ËèÑ£kå£ï¼û#ÎQÏ-[¶$W_uµûCì_{MòòK/×7ìÃjú×Ñ±µ®ÝYeÖÑ¬­ñuÀt ]¸íöÛÓ»ºá^ú]ò9è #F¸¿º@Ö­[é¦¬ÎåmÛ¶%?é¤ôÓvb¶Ò¸åæ[jeaÌ_Ó×<S§NM~ûêkÉI§~ÚÙ0ÀÅö´µµ%«V¯NÏÔ×³¾(¾¶=ýÍ
jqzvÈ¤<èÃ¬Æ@zeM¦Ø/üe{{·¯6òâÆôGöùH]O;vZneS&OîrfÉ²»ît.]¼ð«Ü 
õÁQÉå_ëàÌ(ø±ZzÇ²>äç÷Z¹Ô
$ÑÃ '
8tzêWÒOIòÔSO9#6vÌX÷âåË;
l8I(éQ+Á¸íþ¡Ý¹sç¹¾2èú+ãøZï!Àè"ºÙ(èÏi§æÆËÌ3ÎHÏv÷å/;þDßÒ
[c0&°±¾îè¶ÙÊç=o¾ùf]P¬Zß6[É;	hó¸vñb÷×ìe«@&µ{ï½×Ù[sx&|vhóï7Gå,Zã`Ü¸qé1P!ðdßø¯ÿtvv¦g»ÉoB_D¿ñúuãö|b ä
Í2Á ÷ÿêÒ3Ý` ;·uÖÛ¾¥'J7Á0}º;²@dyq$yä93fëÀ
7¤gv\Ðq{s;G_åd=]ûl´?pD8È¾Ê¸ kèip"(.ÚÃ&óaÖÓ@±%{ï>[ wÿ}÷×¥¾¬^~ùe÷×&æ:þè£õpV!Ô1ØjÜøèùº¶ÃC8@ZÐîO

ô¡¿#\ÖôaR»/,c .wS/«c¸#l[µºtn2räH·`íÍåÛÄ8ÏuË¾òÏláY>)Ï¯Ég©õ£®þ{$7X	ÙÚ5Èo[lÆ'3øÄØv5CCaþÒ
³mýÎ²: îÖ[nMÞ}çôl7®Òïvº­=ÛWF=XziÄØ|ý¬³\PËÐF«3eú(Y>sDCöönÀL8ºSö#Ò;º± ïñÕ«ÜÒÞP¤ìºïD÷ªbÞ?]êêLü±Ñ(a@EØÕñU±5FÑDó~`e­µ »¼iÓ&÷ïf8ìðÃjúï½ûû+4ÿâÙgÝç<hcÙÀ8¯!&sþúÙY>ûcü~-´í'rrí}~ÐQ%ô©¿ÍÍ÷¿>Øì-qÞ»|¹;OÃ­rûí¿_îÒgP_úÀ&VØ%úÈêOÂ ±¶ÝzÛmÉ%Ì©m±m"eåÅØ±cU+W¹çÉè·Ï¾û8}â:+l%@¶<k[fx®Ìds°Sßd3ÌàÁ^¦'Nwýfë×¯O¯v3eÊ·ÄIgküÀe-«û¢¡p­v6Qn?])ÿ¢®öÆ êÌÑ*>³·	çÂ}|ö·+ gÝkë¢r ´­È
öF\3ÐN%ò`lôÅ;|Â¾êº7hÆÖ<ÍÉÊz~`ÅØ!ÈDÇÈR +Í²ÒÛ8iÒä"ÎÄ_A° ùù~å>øAuÌEõ0,ø5'ÖÏÎÛD¹ÅVGü=þØ¾"f{ÐÓêGÖ6k©ÇnÙïË¾}«¯D¶ÊÙ¥Jì~¸dk2·>DwÑa&1&côý7Ûk[Fä}©þjRQy/þæÅÚuÛ¼yK¥ÉBQ|CEÜHü³È]v'pdó5¿Ì|ý?ý5~È¼ ü§¼p¯ToA ¤ê@Y'!#H [¥ð>d¶ÀQ:íÙf@eÀ¨0óõ
.ÿæh6Yé-ôºe|0f8¥7¦gÊ;8£LFí$þ;r)ñrÑE6¬ãþv1ðhÆÖø¸ ¡Kwô½B'ì·Òö¶ZiAéÇ?ñqee¡¯ 4e]?¨ë{¿±åNì
ùLýú2îZ·ía|Ì0I&}Òÿf>¶ÏúÌÎ_T«ûÂal?c°Ãþ¤v5Òeï³Ú£¬¼ÊÒêò"Eñ
+ØdDÏúúÙG£ôO:¡,G¼ënâîóÆg*Må1¢8é¾E/+ ßeÿõ6CÆç2YYÚöÅ/}Ñ-ØI¤ÎµkFnK)v°	½³r?3BXvoÖ1û|CÆ¾3¬#ê¿!èÓ#x°Y}YÂl84kk|Ì®æaÛU¦~®;°2]¶ tÒ!¸,hso°LÕé§æÑmwo1ä¸¬ÂdZ&qÇg~ 76 /¡-dpêÖ2mYà_¸_áËø&©<cÏÛÑIjI:ô¶sóÍ®ü:ú¿0k[H£ò*¢Õå
EâOâÂ²+¥Ïsº+X¶Íþ&Sþ2ÃyèÝË­90ÌÌ@3øùÙ+ÏÛ?ÐVJÔhYd-üz3k³}&\stÔßß×`KPE
k¬oóÅf`@AÂøeÒg,ÍhÊ =fP
¶3æý?úÑMuõ ÐÆùaÁ²ML|ý½CTroÖÖ¦[a¶<éÓ#/ÈÄñ?~|© ¶· ³?ÿó}Ý7^û&cÝf
Òm©Ý>}ôÑ-ñ1}A¸2^àOc\uÕ÷k~÷W_umäàg
ØeVE±ÈíWþOúdµ-¤H^â|6û¯&E#òßQÉoè3ìXÑÖ!ÌàÅðSÐ	ÏU¸8Xø­N®óÏefÁAYÉ³dH1
Í,Yeá§õ9ZñÃÁ(¦íå øÖÇ_Z¶c *±IIl©cIðnÛÂ/Ìø{$C¹fe¢å£Kuç Hd¶VF7}x7u N+î_Q÷<ºÊr__°,:¾ë.»ÖÕ#CÀûùúGÙ/½øR­¼<ù¾£7¶¥ÆFÊíu~IÿãÐ!Ä¥ì8#è|cÃÒõÑÛñ3d²:Cä
`b³ÏÛ¶uFí}XµÍö'¼ýÃ¬Å ÍþêÙ&ÊÀû6¢¯0¿,üÌ~~Ä1yñm£}á8¯m&â&ðyò²×ôßC&E#òA©;ïÌßv/"/¾	Ç3}Ùiø.£ÞOÿ-B!DRzÙ]!BÞ¢àS!BTO!BQ
>B!De(øB!¡àS!BTO!BQ;}pÌ8ýÎ§B!¨e>B!De(øB!¡àS!BTO!BQ
>B!De(øB!¡àS!BTO!BQ¹ÁçñÇ<üÈÃÉO>á3;½²E®®]¿ç»É'¥W¶sËÍ7×]óñ¬ç%¬7ïqÞ¹ç$KÝùNÚûøã¹ûÊ²rÃká{[Õäm²³Ãúk¾<9Êè+îïq>çé+îau1§<Þç×ÍêÃ5Þ++Ö&ô?$±ºñ.Þi÷øíÏ«è²úÃ·þaúTÔßþõ¼~4È»²|]édÖ8óñmGlüAx_¬¼PF~ûÃç9LnYþû÷Qm1q¯ýÛWV»ZE3í£<7 -aûbý yvÉ¿ÆQ¤ÓÁ'`ÖßÍJî[¾<9øàCÙ³ç$uÔQuÁ°×^{%g}¶»gÚ´cÕ«×¤W»áþ?Ûs\ú©sÎ9×ÝoÏoÜ¸1yìÑG{<ßýìgßtS­ìí#z(?uÿÚYg%m;·¥gêA¨êSé§nÉ[x«Vï§z:qâµtÈÁ5yñ^8óÌ3Ý_QôÀôãäSNI¯ôäí·ßI9æ3é§Æù¯mÛéÓOH?m'Ö÷°uëÛnXÝbúÃoÓ/N:èÀNòãøD]ÙèÑ¼ysk÷¡{_q#vÏ
?¼!>b»ÍÖO4Çè?¬Zµª&ï#82¹ë®»ÜÁ¿í<Ç·ßîôà§wßû,Ðç¾>líØÌºx»£s[gkO;öØôÌvÐÊ
idùøuÆþ}éÔSkA£rØ[¿ìW^y%Y¸ðÊïà/¾Ål4òÿá=ÝuðßÃñsç¥Wâ`~÷ÚºdâÄO¦gdíÚg\Û­~ÆäI¶¶¶dÍO¦g÷~{×¡\uõ¢ôJßÐhûE6¯QèÃ2Iþze% 
ÄP~¼Ç¸6»ÄØ6lXíãé3S§æÊ#3ø$ÚÚÑQ3Æ_ÿú×5g°G\yåÂ\gF!3ö®Þò­o]X3Ô
Ð,H´$ÊÂêC7Ágl&×>ó3bcÆu1 fDx/}Ãëë×'cvÛ+£æëAßÓ¯o¾ùfz¦u í±ûLÝiÃüËæ×@ÐO`êcÞÖÙYç0)ë;ßùnúIôè`ôýN®³%úå/~QÓûï¿ÏÙÚ,CÎxL®°ã¾kËÝétÒFhÏ=»®$TÍw=ÚÕiõí÷ ÇÍ|È÷¾û~æäd|ÏÄO~2Ù²yKÝx}GhóÄà¯ômãßÆçfÎ<£v±çÛ
íùÄX2È©`4o ãX¹ÿ®û²È2Ì­¥'{`å3ËÏécÌÈòR§<0¦Y2 ~ô£Îq¾áü£ËÍ°²`r aÆ'¾råãIg×àékÂ@ÃLL¦æÕß¾ìÜõïÐþ»m+C8¹Î{=Æ 3±5ÒÐÅ¼¾¦ë~?ðÞ³Ç¸=
íX+à]¡sò¡=ÔömÚ´©«ýíN¯[Aw¢dkrõ¢k\PoÆÔÆ76ÔåVO²¢
dãoEmW0H ÄîË¨ËÝþm¸å$lÛ¼¹s9s.IvÛm7·ZiíÍå[	8ÏuKTðÏl»ãY>)Ï¯Ég©õcµÊïPfãÆ
Î.1aÒËXÌPf8>)Nð"Éè½ûî»uet$ÜÒ;îHÞ{÷ôlOBÃÜj¨K/3fÎtA¥e2h£µ2Õûr²¬ôÝï^Þôl^!>k÷Þ{Ï9KË.eô{îî³ÏÃq±þoÆ°£?d:5òN¬?¸q¤,Swüq=µÑúÆ8ñ¤¬³ö	ÝeEÏ6ÂÍëV¦ÀeðwnK^|é¥ôÌvÆ\sÍ55]ñmwYsæ`Xýa¢D`É	á~&~ 2eÊZÝ²ôÝ ¸4ûÎ_5Ï7{à×BÛn}ÁU§¾ Úßæµ¾ÂnØç}÷u'8hc¸UHou«·ø6°KôÕÉ·ÙïXÛ.[Ì{©[b	ß¶W'ºÊáyüHQy{do§O\gU­Èg©õã¹²[XÈdï+
24¶1ErÈ>}gGaìÙyýõ×Ó«ÝÒ5se¹Î@ød LÑ-+
¾0Y³åÞbå¶åð"Lù¯»îºôL=C{9¨{h¨8×ïV ÐÍ8Åë,éõ)]Ëf¿ðÂî³O¸§2xdá·	ñ÷÷5cýhÈØ»ÙúÆÁ^áMÖ?½ë§Éé_=½¢WìÉô'×em?»M² wËÛGÂ=eí£âu´fGqhÐNfí
Af´ÙÉp<ÛyË3þb+
ö¾*öJÇkdbý@ýTg-UÙv/¶,PßîpÏ­r	®,^Æoñ¹6Aµ-F#òáïÁ¢ò^~éåÚuc\Å²~Cü	+Ö¯tõ%24Ì?1 hÒ»ìîÆ_2Eþòµ?¹×-qt):$/3¨÷³ÐV@ÐBª º¬Æ@­-c|æ/ïþÆf[Èw3óÌë QO3NYcdùò×È»¥g»ñIb&{ ~ÂùK­ÀÚD`èïQEÇOY3+L(±£ÉÍÀ>q_x	=×¯[kO²õ!ÍÊ*Ø`2,y|¡;­¶­¬ùÛ]òàÀö~YÔÀ63.X*3ÑAf¶ÜÉç/-ÌøÆO õÕønXpM`F2Ãì¶èM@}	'ï¹ýñ½,M#¸ô3Í´»dµ-FYy¥Õå
E,¹ÆqÍ¢k3W;×Ä±/ô¥÷|ÚÅ76ýgÜîºë®î> h|ö¿ñÝ3µ­nàµYÿùç_àrY0d#wËAÔÛåä66Ñ	'þ`Éú«Í¼Oýò
÷©ôôÃê;ípÐñC÷¿aÌèm}ÊË²ÁÏÆ8Éöí=·ì1çÓ;ÖMªZm[
->äÅÀ¶2¶bõá\£Y+0äg-9X#È¬±4#Ì¯ d§þ¶Ì7Ïe­dÚ²@þÜÃ/^ðøUôgìy;ÍN·Ðæ¡ß[¶lv}ä×Ñ·Í±¶4*¯"Z]Þ@*CéàÓ¾Éhij4³USþ2Ãyäáë80ÌÂ`CÄ6JµÇª¢u¿ÞÌÚl	×jýÙ92agÙë¯¿®fð¨¸,+Z}MÆz}÷q{þaÄ³}ý±ÐiówcøÐ=cËeá_ßûÞéÕnýÂñ¶zür0Î¿ýío§ºûûçg³Æ¼gékl?A!WÖàØç9rä¨Ú»¾í.~V	 ¸p;w|÷÷Û3@;)'kïsYÙÝðZöù/ÿò/]Ü¨_¨pÃd;`~Ýâ[Åüþ(ø6Ù³àÿD¡OVÛBä.ñÙÆ¾XÈ_tËeqVèÐA~b3oâ|¢~
GçÿA$ËÊìUâ:ù\6kDù;Û¹Ï@ü´>G+6õ£¶êÿDl)×ÈúTôç¬sGÝã'] sC×)o~¡ÇßÓw-Ä¶eÓÑÛûfÏ3°Ùdoã	CÌk»Î½<ão)i¤¢÷ùGÖdM?Eö2+hÌ{gÍR±õ%µ#¼âìóÕpyÖß»wÍòÉja±­¼ÄØ³ø.¼°VÐÒNÊ¡Ý¿'#¶òSÆ}9Â>oÛÖéoBQu GÈTÛªß`ÿf¾\æ¯Î=ôàÎNPÿ=
Vø½VàÛ<l¾Ñ×1°äµÍä>AÍ¼6ø
JbH#òAÑEÞN¾
	dc}ãÙÐ?¡d®ÍÅØécÆ½þ[!B>¥ô²»B!½EÁ§B!¨B!¢2|
!BÊPð)B!*CÁ§B!¨B!¢2v¾Ë(ýÎ§B!¨e>B!De(øB!¡àS!BTO!BQ
>B!De(øB!¡àS!BTO!BQ¹Áç35kV'Ï?ÿ;.7/½²%×__»þà$vhze;w.[ÖãÚ7/¸ Y»öéÜ²%¬7ïAÿìÞh:QGî3(ËÊ
¯ùXûZÙ®
dgzÃÁ¿cò¤OÐCÈº/Ô7ë;é_¦aeç)}uÁÊëdu½û³êcu·ò¬ìðub,U|Ì/;²òA~Ycsy¶x>V.Ï>úèÏëdÚ$,ý
ubï¢ÍYºrË­·¸ûÕUëþxáÕxÖ¿/&ð¬û|buëÊ9«OgM^ÍÔ§Õð.ÞÖ£?êR±þìËvöÇûB}ª0BÛÂØóee[ÌàÎ3;¹çî{	>\|ñ¬äÓÇ|º®0ðÞÙ;ùêÌî£::y|åãéÕn¸ÿÃã÷L?uCÙ§~Z²ôeî¹«¯º:vì´Ü6Â´iKn¼áFW6ukß¥½ ¨û¹ç´íÜ©=âÈ#ÒOÝPï·þð+ã5O&_8ùQe:uj²sFÙ¢Zèû¯ufòÅ×Õúï?aÿäÚÅQU§{ü»ímÉ¢k¯IÏtn¿üÒËÉèÑ£Ó3ÝtÐAÉ#Ü_@ïÖ­[©gëÖ·Ý?´{¡Î£s`uç¸åæ[qãÆ¹:1îükèü
ÜØ]ºt©{v(lq"`m>aút÷yægDeñÈÃÔÙ¦Øø6lC£ÐÇ^:7yví³uõÂvöÆæéî?ÿó?7­«8Úoöû¶à
¬xÖ| ï]Ü5vBÝ^ùØÊÚ=ìÞçÓÑ±Õ½ûñL< ÷þU«W'íííÉôãOHÏtC]÷ÓO?i®>­Ä»´qË-®|ùÒ¡ß½m§?È¢ïÛýÑaÙþèÅß¼XõÄ&ÿråéÕdS&Oîê¸dÙ]wºÏ8±~õªá»üò+r;ûûêké§nö?>éììt_½Ê½kÌ1îso9ï¼oÔMÝp<3ò¦°8ð,Ìx¡¼28õÔ¯¤ä©§JÚÚÚ±cÆ¦gºA6dè_p¤8¬K.S7ø7zê5:ÂbÕÊUQ½ÆA42ÁÚo¾Yçè<ÅééxÈûï¿¼úê«ãëgå®KfÏvVs¾~¶s¤Ü3±±9ï.uó°{Í±ñ
elC#>1QõûÝºxÖ,÷ï0P*Kî6£«ÜKIû}ýá]sçÎ«vÑ3 þX¡´×ê:]æ>£ o¼þFrà¦gº)Ðh}ØÀ6XB 3Æ¦MÒÓÐOAF3ÁûõÂén0"?é$÷¹aè
Dä8c3Ðû d²¼­y`¤BX³æ	×FÑ¿àÞòôô¶Ûo¯9Õ¬`Å@GéW&P`ûï»ßañ±ù÷sß»liw cN<Ä&xÔ¯,<³ßþû¹¬ØP>
31d7Ã{óÆwmh³m±>¤Nd	Ã@©òt·]
>\ç>î·@6«ûïÈ¢ì}P46
²~Ð
eÆ#4R¾ùUþÑnrËü{Áù=uÃì×üíáß@%\²õëÍ¿í<m£´ìÛ>ûîãÎó|£ï³¨E×CYÇ²C	ÆÎ¤I3á*KÁ'Ë_¾0Cnð¢wÞ}§Nø¾Ð1ø[o¹5y÷wÒ³Ý`¬-c¼x%øùóf d¾üå"È6TÆa_!)3Ì>YÖé'7ÿ$=#útÖ_NÌ½£¿OqB4Xññ08gÝÕß8Ä­5GÏø(nÞ²Å¬¥D2<6nHÏäC{ø¬¸E¥ mdY Áöseí-Ê
VòÆw£;6ùá%5Àáì»N(êCBßyºÛ®õîã~YÚ¸qãÆôJ=¯¼úªûkïÈ¢è¾öö.èB®3NîÆKVÝëWÚø²õ®=öØ#9«Ë§°\¼îwùvv[åÆÆÆ@XÀÇÉºÓ_´Ç&ÓvíÞàîg¸ò±µeÞFWyðãèms·ç]eÍuúÊÆý
¸ÙA?|b¸Ø7IP{aÖ¯_^ífÊ)n)áû6ÍÀÇÖüé¸+.¿Ü¥:²¨²b
Bæ«¬rR,ÜïgPuæ cáïÙ²2³NCúÛöøÉ¬`,éwt Cì|·Ó9zôà,Jô³ìR³oÜáLÜ2¨EõìÐOûØÇSf²7	,r÷eHÆw£°ÔßïÈ-¬rÕ#Ow[©«ý¿g­3ôsÀwùKïyÙÜNÞD8$l§MLlò1ð'Ì±úB±' ³_¹paí¾2d½Ý`EÖö¼¢ë¡¬¹N<Så¸h0!ðm ±cÞXÍ]vGðl¥0þ¾÷î{u³b9{ð(:gàYngFnKÌ ÌX´Í&è¬½q!Ðef×`{ÎÈ°`Ä1C9ëÔäea|bÙMãy²9EØ½,½lqÂ~û»,9nsôÿÄÇ]fí%e`éeÂp Ú{ü=Å6Àõû »dÊêî`ÇwÊ8 eºñ
ò³ïVëC¢Lcx6KwÕÕ¢L¬eIÉäâh³ö_Z°`Ä,ÊÞøåË×Ï¹¿Ì¸Fê3Ð@ÂL<(úl ~È|3cÓV2	ÎF¹V4ñ½ÝFÇCacå/>õ©ÜëåVÛ¡ýFð7VKïù¤Ã0V¶taË4!»îö'î>|ÊÉîsUß$DAY"3bnù&(Ëf6Fé>Û)ÏÒV¥í´ÏaJÃÍÁ¤,üÌO«°=ËS?×­4ÇmÆiÒ!¸ÌRYÃdNÀh×?Ù5=»ý=~P¶±ÜÎd°}á2]÷ùÁÞïfÉëÃÐ¦öê*Á:çÙ«âgI¹?o¿*²&ÁP4íÏ#ÿYX»ùåF2»Ög A°äÛØVîaî	¾ø¥/ºÌ6õ%Xô¿M#ùÅyld£hH/&b?ôÑÜëL¼b4&b±¬8JáÙß«Æ_²7=ð`íç#ì`ËSò,÷Ú³5ªFe(Ú·³"¿Þ(»ýü×\6ÕS|dÂ¾X¶¿ÏÁRm¦í}ðDb2éàº	LÑR³ÿþÂNÏÊ¸êªï§Ã/ÖwÜ8<ÓøñãÖeô
Ê%KÇòE^pd2hÕRò@Ùb/¬?Yy°qh¯h|÷~ú¶ý^0¾srîWkFu Õ2Mþ8CÖlaò·R¡o8àpr®âò¶Ñ~û¦²zKÊîÝ´v}ôÑ.µ ;fêS5dc	nl"Cÿ`
ô?¶2Ð	÷EÓ>Ë|ú>ë¬p´ÐÐÿLà×½¶ÎéNÑu&o£FÌüNÌí÷ý)rc¬æMú2Od8ø/ç/Ëd^ÂgÉ@4²/³´£èOËÂÙXË~ÕÁ8K¨ÞýpÉç<|àßìï³ÌG¨!g2~ù{Ø"qÏ=÷¦w5-ÉøwaÀÊ³Þºµþ§+dÐ5«;9ws@±/¾Ø7CèbëOQ¢Cþsc}H=­oL¿cÓÐvó
ûØßoG£º|ù\³ÏÈûAº-°û8ß8ÿüvÑÿ2í APô»þ½÷ôù:OÿoÛÖéä{G3õéO'}`úA0ô_ü2½Ú}¿êû¨Vø½¾Æ¦Ûqùô}®ëÛ®ÄµFîÐXÙ¦ßE×Ó««ºÏ=÷¢wTH 2ñàNÃwõ~úo!B!úÒËîB!BôB!¢2|
!BÊPð)B!*CÁ§B!¨B!¢2|
!BÊØécÆéw>B!D%(ó)B!*CÁ§B!¨B!¢2|
!BÊPð)B!*CÁ§B!¨B!¢2|
!BÊÈýùã?>õw³Ã»ÏwÜ~{òsç¹]L2Åý{ãÆÉìÙ³Õ«×¸ÏÆ-7ßhQwí¼sÏINÿêéÉÎ;·%Û¶u&7üðäª«¹k½%¬÷Ë/½|Ê)îß>ÔaÚqÇ&óºÚÖþaÎìä¸ã««mÙû#{»õ<yR2oÞ¼dÌ1î3d½{ C;Çì>6Ùüä®»îJÏnÙxÒI5ðûÓ0}<iRkêeþ©OÕôÄµ¥cêY¬NÆªU«sÎ97ú±>¶² Ô=ð¯C¬Ó%ÈãqÇëdîcú'ÿ¬+¦wFí0yüô®Öú2ì°_BÂwåå°ì­o¿];¡ù× ¼¶)6.þlÏq=ÚMþöo/JnþÉOêÎ7ª¡~æé¦%Ë,ÆÆl&rp¦®çA¹k×>S7~Ã¾	ÇwÖJbmÏ³9@GÿéèAéKáxÈ²!1LÃ1,º)k>O+ä¾åË>¤k@ÎIþê¨£\Ç¢½öÚ+9ûì³Ý=Ó¦ÛcÐr?Òs_:õT×á<ÇßSþú¯Ý;[Ág?ûäÇ7ÝäÊ¦n$^êþµ³ÎJÚ"0À|ê÷ÖÞrår<õÔÓÉOt÷Â1c¶¶¶ä×îÌÆâ¿¶mK¦O?!ý´l`ëÖ·XÛ}}¯!#{ú!=Ã±µck²páuz|¦`0&z¸{Ac1]õeø¬ÁÂ;x÷+¯¼R»ò
ædÂõ9s.I~ù_Ô]gÜsÏÝ5=1¨ÝG=ÍøåÉÑo¯_yÏ
>´Ç.±6úró9æÏÔIÈþÎ¯õ
rúø'>áIì:îËúµß½Ö£~ÇVÍá oÇxÏôz£ÜïÛ;ÿ:vûgß~û×Æ"hÖl-mba¯BxçåW\<öè£µûyvø¥Ç'CôÏ\£GqdÍ¡çéz}ðøãõêÂ~Çî|fêTw?Ðÿèä2ëâYîZ_RÖæÖüû£ûíÞ
còõTtcþÏbÆ"½Î>yníèH~z÷Ýî3þõ¯]3x¼hä¨ÉW.ÌupÜÿ»×Ö¥ºøÉO&ßØPsüÝ²yK4Ðio}ëÂZÙÔ
CJ `Ã^d n 3Î83ý$kyÆ¾ïììL^ýíké§Á/7ÙÐî7ß|3=Ó8ôÏÜ¹:2GPÎ9t¼èA!G§Ü(2i¾£E¿fÎ<Ãýu¯IÓ)Ñ;6ýç¦ô_qÐ'&"¾~ÚÄ1elÁl²LèoÛ°+1[7zôhg+W¯Ù~í;ßùnÍ\wÝuÉ-ëSeËîL¶uÙ¬ëðúúõne"+xäðÑ~Ô3¿.´qs¼w¯yâÉôL÷X¥=Ò{ídlþä'7»Õ(ýL¶ÐïØ8ñ.05YÜÿ}Î&åþbpbp<ðoô²CÉ¿·ü.þ¯ìDª¡=<:Á`4fÀ:û_èº¯
Æª/ÀÁ0£5£áÍEÛ 5íË åÄÐ
pMì+wvo@nL:Ì ÂwèããöpçÃk­"NÎ½CÈMô".0	xòÉ§êôÓtÍ&&èzbÁhö(6ñ±iÓ¦.;×^Ë¸A Ü>¢=ýÔøã],^®ö©8Ö»ô}ï-È°7<zè¡Ò3ÛÁ¶Ðï¾X§^ç_pA`Þ´¢ýB?>üÈÃ]ºû;b«%	Ø}aáßL8ÑÕÄ2¬î¶ÛnÉ¼ysk	,É»ä@¬óYdÌ|1¨xÐþR+NàÝwß­¼?§2pKï¸#yïÝwÒ³Ý0Øµ[Æ{ôV6§,gÌé¶?û7h£µ2Ãå¦#;åäzñ¼÷Þ{. §ß­ôû¹ç~é>ûømç(3tØÌÓf¢æôqÍ8ö{YÑgt&$Àýâ½7nHÏÔãOÜzûð®¹æZ}ý1×ü#~ùí3Ï<ÓõÓm·ÝÙM8yå¡po¤ãru)@çTfÌ³Â®øRìSVÝ2dñ¸?: oè]#àÙ>À¬±PFd#O×"Ø,ï}}k[î»ï>w¾
·Êù6?»#Sv<dõcåvVS8-¼·/îÜÖrÊÉµñZd3OßQ{Ý^ýõôj7t9}6Ý"øp/p1êkÊ¦_{õÕôjë0å`¶S6l¥±C{9Iù¦]¶'ÃËÆý"g4! '£geS^xá÷Ù'Üsæ}uZ¿n½É2úû¯ªÜËÃÆõØ@Í"Ã}p¾^÷ü«£oí³}Ã`{0þ×/Yâ>û [dÌgÏ?ÿ!Íx²&KÆ~Â<§bvÝ[~ÀLyáZüëÔ1oeÆ¶ìqxÜC;xG^{Ìa£ý,O34"Ã<]ìÄ&¼´ÏÚ
ÊÛBPdÛ½Ø.8ù«3­nteiG¦>¼ëÛ5Y$aeãø'oÿtî²»Lñ)Ð¦Âæ^ÛKáÍà¶Jâð
û@á^®FÀ!Ý .ë1Ðdk}ÇÅüóÝß¬½|8?pØ"ÀÃ@âè²*¬g£ýîï½¡NdÑ}cÎ¿ù[#®¢Ì%K¯ôuìKËú_8ÊûrÖP"[6=FL4Ðöý=ôà5äccÔ²f³]#orÈ}ô
{}¾ô}~ÉàÄ¾f×Ñ¼¥ôÒ#Gîí®7úæ;N³çÔÏßË6à½o&si4*Ã*@6/¿ôRú©28ç¾$6áµ	Ù±Ø¯ ýb? §¯Ãl1¶°¯¶³
&bã!FÙ> É»l¿ì^´ºôO:Ù«-_g»îº«»Ïï2<|}K¨\+>KÅd70¸e!pæ',#Ëàf5¾,¯
ö
Ê(èÔ/©Ôr`YÐú½}"àïe³Ù§!áàKn­à¼åþpìÖ-Bî]Ë&c{°9|îMæÎ ÿ¾d y<,²Ò³°I~8	FßÐ»¼àº6ÙÜV8ÔFdØ*bF&+è[d³l1ßìÇ­ÚfS?VÉü_àW²°ä
ßÔ& ÇÒVÿ ì(EêFû@òÞã±Ô¥OöReÝ[0É_2P<ü°åúa?Ëbh[Ô @(P](¬_o2ìñ`ykµ~6°üa{Cÿ÷ÿþÛºàv1ÛebÔvì³ï>n6Ó
#A}V¦*}Ë¬ÔÏªãHpa_·ÂñúPG^êìë å/Yr½û74Ì !?hdù½ï]~ê¶9n?w-2gll¶gÀ
÷°-´í!×_]Ýà/âÄÐ.ð¶°hY¬}Ýú£{O¶lÈ½ã§Êf©/cäÄ8jfUªöæ¯ÌBg~ÂÏ43±
¿ Tökq5AÿAô7¢7;¦áx0o¤@òÞÅþ¤¹h,e?ýò÷)(²¤Íofq¿|.@Ò©þ Õ³?G£ûb ¶ÇçÿÐ¬5å¡2"èÜÐåÌ³¾$á^Eÿá5ûý¿¢Ì_N'³°eKßÁFþ;8²²ÜL@l¡_§W^~ÙÕÝçg<pfu×»ãVéA¸ÌÃe¬Bü
ûï¿­}ØÆ(cÕúb,³¶40÷eÉsY?*ÚcY´ÙÉïàyÊ,k³[BÐ;¶GùmáßL¤br#a/¿Ýkú%§<a<]/ãÄVSF¨3ô/èLlrK=ø®+:1¶lÞ\»z3§=AÛ|]lß* øp<9þÙÏîk¨@ò®ÇÆÉòÆRîÿp$B!D+)½ì.B!DoQð)B!*CÁ§B!¨B!¢2|
!BÊPð)B!*CÁ§B!¨ï2J¿ó)B!*AO!BQ
>B!De(øB!¡àS!BTO!BQ
>B!De(øB!¡àS!BTFnð9cÆdÍÕÉóÏ?çKçÍK¯lgÉõ××®?øàÉ¡êÎs¯çX»öéä\à®A²%,ûÎeËÒ+õPå?»·VçêÖ²¬Üð%±_±>â\L~ÈÙûÏÛ}y×bø}ÅÁgà~ó¯ùåÄÞkCì¾P×ùÕÎGý¹ÓçP^v ç\ë¥½ùP±öÙ5«¯ÿ|^__GLæFhbï6¹ÅÊ±wíîXû÷Æ®[»c×8òdjG¬>¾l9b2ÉÒ¥¬ºqdÉ"«¿ô9Ö¾¼¾6¸'Aýóì}Þ³}A(gÿ(²º)/ôgØ§¡½-KÁ'Í3;¹çî{	>\|ñ¬äÓÇ|Ú
`Áº÷GöN¾:s¦»ç¨£N_ù¸»6nÜ¸äÅß¼èÎsLx`ò/W^é®1¨.ºèÂäÙµÏºkW_uu2íØiue÷iÓ>ÜxÃ®lêÖ¾K{AQ÷sÏ;7iÛ¹-=Su<âÈ#ÒOÝ ·þðV­MO¬y2ùÂÉ_¨3y2ÛLÈkº@¿Á¡§¸¿>[NÚó¾ó®ùÐW£G®ÝG½óî;éÕnn¹ùÚõ?v$æÏ¯õ·ÿþîþ¡ÝëôÁ-½cY­îC×yw#0}º{:nØ°¡V¯I&»ëß_¸0yäáGjïùÁâë©üZõÛaéYûÀ°¾S/Úg}I?ò1ÎuÆ<cßdx@MÈxöß_â® [Æ¤½ã·¯ý¶nü¼ûevã[oMö?>½£éÇàþ¢k¾þ[·nMöÛ¿èµ<BÝ ¾n4¢¿ÈnÆÓ{èz`²àC&\gð¹ß-ö|Áùvféö;Î9úÙÿÌ3ÎHKØN^åéóÒ¥KÝó~ù<ýM`¼Ï¾û¤gêAYö¾èÙ¾þ¦ßi}´eËÚ8ì~£H7½d"N_
D¨%
2´/æ8_/dS&Oî2É²»ît1/üêdêÔ©î3úà¨äòË¯È$6mJÿUÁD[[[rÛí·»Ïµ7^#9è ÜçÞrÞyß¨ºÔ
CJ@hNÊ8/sJ8zêWÒOIòÔSO¹v3Ö}.#äoÐ Ws:.¼üÒËî0k%Ôãé§NÏtë
ºÅµ»¿Öß>ÔvÌ »dölw¸oîÜyNOZeH	¨:;;U«»z@ÿ/ûöeé§Þá&>ÈìË_>µ¦ïÔºXG?2¶m<2æ36¡8ðÀÜ¬ï/_îd3âÈ}ðÇýkcÆqöëñÕ«Ò3ÕÃàýØÞÏtRzv;Ñ±µ#ùúYg¥g¶!;ÓF¡Î\2'Wg¸ç·¯¾æ&ý£g2®ùã
]D'	
cA{+u©þê
Èä´ÓOK~üïÿá<{_ô¬è=¡nÁI(c4´çsÝºuÎac´p*î6<CË³¿¹îY ?@l%(=ÎÅOÞ,!µãò@°¾d²£N:²@Æí9Î÷YÁHo@Ð	²à©ÂÁè~ ÿèK+xåÕW]½xg_@}ÉHùAtp´
C?2¦ý ßo;}JßÒÇÁ"ÁO¬-LfËÚ7&íí]¶*57x?ö@+Ïþüèß~ä¹ÞdnzëxÕ0¨÷¡½þÀ§ºÔHõt
ý\±bEz¦<{_ôlÌXzÿÑnrYYþMÆ:Ì®]ö3â\ó>ýlû@zY©¯ß&Úc×¬Ý^:79r¤Ë^Û°­þVP.&OÃüå3Û0xÏeÊóëf²åYêEý¨«ÿÞ¡D#~ üx1FfðÂx[üehK(ýÎ
3©Ù¬kUB±ôä;À"ÈrDú³vX(Ó_n*#²Q6ægÌ)ä#Y´·pFÀú Ë Ïû§KÝà(ÛOL6ÂIA=#sá'ÇÜl&,ú°¼ÌÒlhÈ«¶Û^@ÈØõÆ2ýá%}jT0C÷U tüò²ç_ø+ËßNÐ1TVG}òtý%@fbG[ÑkÆcñÒJ]j¤¿b;Ö=k2Úmé{ìõõ³Ý2üºßÅûÓ ¯Â¥O¶deË«Â×M@Ø²<$[Yà^t×®ÝÛeOo½í6ù·m	¶%ñë·ÕWÊ~­Z¹Ê=O@UTÛ2Ã\'ÎVdË³Ôúñ\_Ù¿LQ¼#3øôñµ×$ë×¯O¯v3eÊ·¬Cg |³):Ày»F9U(wÙhÝQW{cPµìBèØòd"ÊA·îµuÎÀp°tf(ów¸g.¶
(CÆ½ôSÌÙ|ÊÉµwoXü:°÷÷çïþ÷²ãYõìÛÞ¬¡/`äcÂyðæ-«èO q´{Y¤,¶ÄæcøºÁ_úÅ·Aeu4?8c|øû%{C+u©þ
	÷|µáC	Vß²&°!n2YúlÕ
K#dé&ã]ðÛEPÏ5Ac[ØîÕ~ôÁt²¬0 _þÊTQy,5ÛuÛ¼yKt·#¼âÅÜewß©ð÷½wß«ËæøË:Üµok|9' Bò2EBIª5ìF[o¹µT=È?;*+BÉ.ÅöL fÉ~Öxüu«ÎÛ ¿0ôÿe`kïg´V$óõ³Ý_(Zr µ'ÚýEb#õáÝÍdzýP&HËÊÊAç¶N§+Y064ðE.öëºÔ~"ûh`2£F¬\Ùà¬òÈjs½L ê§9­Þêg¼Çß|°¥YñÇ8Ì1´Jí/Ñôw-Æv¶j¥²tÝ#¸ôÇÆ"ÛÐ9ôMV°­$¬Þ~a¬ÕåíhÅ!¥÷|ÚÅ2eg=sÌ¦ÍE'«Ár)Aâ#ÜR
ÛgRÆø¶ªþC2Kè6{Çpãæ`Ãz_ñáÈÊÂàbÂâ&yË¸8_¯cVPÎ¬:ë×ò >dûúÃéøÄ k;m&¨Wûv·÷°dÌóöå¦<ÂLºNù:Î¡{Yú-aB»í÷Ko@¯[l¿4mÃaûÛ°ÓØëØäö!7ÿËXY´Ré/Ñ8øUÿfì'ÍUê&c~óÍnUÐ¯#ÁùjPÎñ+LVb(zÍ/Aµ2Â/Á4B«ËÛÑ	ãÅ¥OËêXÇé;[þ2Ãá</¾êªï»óÀ5î5gkeXþ³½wx6²\a!1Åã`ÖfûL¸æ²©é¨?³8*äÉDt;2úYoÌßtÓ¿9ãÄ$$ü,ä9Óf 6óûåà74i4üÀ21º+î_|í¬3kú ´­ ,±µ ÜÿF5÷a°Ëè1åûã÷#«*&Cá»d©MçÃl!Q|Lü )o_­éAEÐTÃ±ÊsE´É'4Ô'¶ÅÃÇ¶ãìùg{º¿U@; £O1¹ àÚtÏþþOe±4µºÓJ]j¤¿D1áÁè+öø!?Ë8PðucKUøºg¶öb+bÙ{ßãÏ¦øj²ÂY'#cd(Æ ]<kVÍ`á8YÒÆ¹r¿|6ú±}¬ölx2ø9"Rìz+ðÓúî7bÚêïÿILD·!²%P#Gç{Ý|,XÇ°À³÷Æö ¢»î²kÝU¨ãbýN%meönúÀA½ÈøÛxïe5 ¼2ÀH³×Ø¥MQþ;úðÝÚl:Ï_Úa«	¡iA»õdejÐ¿_	ZÃ2Â±êËò'>è:e+¨7Û¶mq§X<
¯1&+[¤üu·rD|Gf|y#Ë&µRé¯árÖÇv:l¾ î¿øezµû:þÆ×ûVø½Vàë&ºÄÄÈï[ÛWÌÄÓ_ydÂ®Ò6&ì\CHØgîeBÏªÁX!à5ýã·ó~JË/?V^Ôºó¾¡úm÷<âÅ;
ßeÔûé¿B!èSJ/»!BÑ[|
!BÊPð)B!*CÁ§B!¨B!¢"äÿ6ðçÖø6d    IEND®B`PK     ! ãípÍ  Ñ      ppt/theme/theme2.xmlìYÍoÛ6¿Øÿ@èîúKòGP§°e»i´Aãvèh1%$Ä(
íiºa»í0+°+vÙ ÅÖý£(ÛmjéGZXÀ&©ß{üñ½ÇÇêêµÓcÄ8¦qÇª^©X Åõqt¬{£a©e.`ìCBcÔ±æ[×¶?ÿì*Ü!ò1ß+bºU.sOC~NQ,) ]}O¤ÞkJ£A[ T;2À§àÎx=dm/ÕüO<Âåh!ÃújòÃçÜ%CÒ±äL>=¡Sa¹:VE}¬òöÕòJÙÜP}rRSr,8\	Ú¶c7º+ý
@Ä&nÐ4>'WrÑu6k®½Àæ@iÓ »ßì×«>§¿¾ï:ÉW ´ioàC7³a6
¼Ók÷úº~J
|³ÒíÛM
¯@!Áñd]quw¹ÚdLÉÞvìa³¶g¨r.ºRùXÅZ(Jr.8b>EcèI	>dìâ 71år¸R«+uùüÙª¥<
·ÌI§CßJø î1<ë¦Ôjå /_¼8{üüìñïgO=þu1÷¦Ü¼Üë¾ùç/Áß¿ýøúé·f<Ïã_ýòÕ«?þü/õB£õÝ³WÏ½üþë¿~~jw<ÌÃG8BÜF'à.ä
 Cöv£â¼D78a"c@D¨¡oÏ!\év¼Ïdº0¯Ï4Â!	l Þ
#
¸G)éQf\Ó­d®¼fq`Íò¸»æv×¼<MeÜcJ7DÍ}"]#gtAìÆ]÷°Ç(§c`ÐØh>Ô¢)ÚÁôËÜDPú[³ÍÞ}Ð£Ä¤¾u¤ÜT"¢ñ:	Ãä»P&sæiçBz:@87ÉÜasî-fÌnß#óHG2'&ä.¤4ìÓÂhjäã0½Á'2D!Ø§ÂHê;$éK?À¸ÐÝ÷1ÒÜ}þÞ¾'Ó9@'3fÚêûqNÆwY¤¥Ø.ÃÆèèÍ-´w"ðú{7Lx:Õl¾Ê¬²L¶¹	õXMú1â¨âÆàXÌµ=@-à³7_K<sGi¾=ÑCf ºÈ¯Äh©³dÓIÜá¶¾B­û!ÔÂ*éss¼Îæ¿7ÙcRæèdÐ[ËÈÄþÆ¶A¢MÌÊ*Ãn¥æþL$ÙNJlfë6sCy­èp|n´Vû8§öù`UÏÅ×;E)e½Ê)Â­×6.e>þôK>ÅûH&Íeeó¬löóe=sYÏ\Ö3­ÉJu´¼îQZ¢Â»1&ä@Ì	ÚåªøárïûC9¨:JhuÕ4
es1TmÀ¨øð S9MUÍðê)å²|RÃFÝªüE{ÔOG«Õåí¦"å×r\k"m4³k¼zÕÔuë@"û6$ré$êÍåà9$ÔÊ.EÛÀ¢¨/d¡~^ÉÕ¸c§d¸Éö?¥òKï^¸§©/»fX^;áz1ÖHäÂM'ÃPëÃìëvæR^bMÍÖðuDÖrõ8{®îH5v¬±üÇI6£©ÔÇLIw,O,ý.eÊ¸èC¦0õ(]bàHÆzÞ
$Î¸UkÍd(¹våÓ³úÉ;ÇÈ#YW>K¾'8éÐ$}ú'àÌØ](
å4«}ÌÅÊ>f¹àÎ¬¸®[Q{ëmQH¦!\(ùdÂU{E'·Åt}Uz±Ã qÒ{ºç­%Í$95ÍùãÃò9VYÞ×X¥©{=×µ¹®èxÿ!G-L£06P+:;.° ÈM·
Í¢3â¢Oõ¨Me]©z¯·éáü¾¬VgDðôìTßîòÅd	Ôè2»
0c¸c=¬8]Û­9n©Òr%»nWJ-§[/u§^8ÕJ¿W{$"Â¨ê¤så?ûd¾x¯Æ7ÞáGËRûG£2UupY	«wøÕö?­Á(yn,-ó°Q¶ëí^£Ô®w%»ßkÚn£Wê7ÜfØwV{øÈÇ
lwë®Ý´JªëìF%¡ßjv­ÖµÝÖÀî>ZØZ®|ù»4¯âµý/   ÿÿ PK
       ! Y¶¦9  9     ppt/media/image2.pngPNG

   
IHDR  m     =s   sRGB ®Îé   gAMA  ±üa   	pHYs  Ã  ÃÇo¨d  94IDATx^ík¬%Wy¦kfÔÇ@7Fn`Ã%ÂÄÝ8c$Q0!6HÚÐÌeº%l42Ôþc4MbÌ@Ì@w!
ÅD
_¸X m»±qÑ-L÷ §ÌôSg¿§¿³N]wÕ¾Ô>ï#ÎÙ»ªV­Zw}kÕ®ïûOOzòÖÿcÿyô×cÌ °hcÌ°hcÌ°hcÌ°hcÌ°hcÌ°hcÌ°hcÌ°hcÌ°hcÌh¿æ5¯É¾ùÍ;³ïÿîì»ß½+{÷»Þ5Ú3¼ädÿú¯_Í¾ø/¾>ÊÃUøÀè
å@{×6cC]ºÇcf¢}óÍ7gg½-ÛµkwvøðÑ·ÆÃ ÿª?|U¶÷s{³ç?ÿÙ^tVö¡x´wþF6`â¦ h_ÿú¿çiµåãû·k®ÍÆwføô&Ú4,Ø¢?ýéOGÿYòg-//gwÜyçèa AæM\¾zÏVÂÝûï»?¿¶¶KÞüæÑù`yùhö>8ú´ø,g·C ÑF¨¯ºêÊì÷ü`õøM§úZÐy©Z2éþ8fkkeÜ~ÛíÙ¹ç¾b]CW£÷¦÷Å) ù»å+_ÎÓPÞù-©x_÷ñg§zêhÏ
eiCZfiÚuÔÏ}k_z_§²I÷C¬q¦Å§rJ¶´´4út&×.+3Î¡>8ï¯»îÚü/IÒvÖuShO×\óÁlË-Ùôêü»4m¾ûeoÏN:é¤ìê«÷¬Ë;Tµ*8ë]ï|çêõã=Ã¤Ëìò+®ÈgÚÌ¸#_ø§/f[¼e]~Ìq:6Hãºù¿°Nà¨¬¾èùF{*«	ïØíÛ»/?GVÊÛ.}kþ.Ý¹3ûÞw¿·.KÇ Íy¯</ûèu]Ýß§ñç>'{êS§Ë5¸G5jþþòW¿\½î·¾ùíìÂ.\mK²×üñÙ¸1¿¯ÃgòÚ×æû8æ½ï}Ïê}±ÿÀù>¨Kò9üÃ«û:E¤Xv>uIg"Oºöwäe-.zÝEùÌý=¸?;ÿüóóïÉ7KªÚJznÒÞ¼yóªIàDÕµ«Êìôg}íß¾³}ûöìë?/Ù¶}]}Ð©kÚü8xì@^ß§vZþùOÿô¿gW^ùÕ´öOËÓÖÒ!åuèÐ¡Õþêî«-[6g;/}KÞI?&³,3K´Ãk?òFmd£ÑI´éP+c
ÊúÒ?©±pD.»ì«
|àGäByÖ³UÚHiD/~ñGú!ýÀ_^ÿûwäKÈ3yßùÎwò¼zÊqÑâ¸ô¾Ôiþêú¿Îÿ¦4I?NCçÚtÜëo¸aôÍqTtT
äûÞ¾m[þkp¼ë®»r§~¨:±êk*=·Ò£ó³ÌpäÈU{õX¡ìÚueF] >ôPþ? BËGWëvÌ1guVþ¹-b$ÞøÆ?[íü}ô'®
zMÚÆ¬]¶T8ÕÓkÏCQ¿ÇAÄglÑ¦C e°	=öXþ·-TÓ.5¸s~ïÑ$,!¤
ñ»gÿN¾©Ú¤Gl5xÊ©òÍ,ßui#Zt>Y£EÓÒ2È?Bzà5XëÉuuX
qÍ~¨?å»hÙ§+e×îRÄ§³*ÕÆØÒvØòÂ`"h³J
mJûJ×´£aÅÃÿø| Ô 7Oe¶éØÌT³&³ÂØ¢M c0ZS©é(Î:ú8 °L©ÁÝöÛF{WÐõÙ¥ÅóµÀtýØïÿî~8ÿ{Åû.Ïÿj¼[)MÒ¦ó±OÓÒ¦Â­üA§Õl°º°ÌBý¯¸5]*ëB×úÀªÔ¹ÚR+¿)X¡[·5F	mV*ÙÙ¦ÌºUÑG±üEû¥[ÞJç5m:Jµ{ðg[­³¥HHhàXÍe¬GGÖS'H]`ñVS`YyÜS+K´èÜ@çI-Ò¦ic1c9§ÈºK×É?×Ï
¦Ï/û­Ö%ëð¤¯irXÁÔ_Õ4WÖ]jM·>ªÊ$¢ ©á!Â:°+Ú¬f/ZÚ´kòZ¶4î}5aÒeVåÉäï|gÞöÌZ:6`Õ^~ùû³çù¼5ÊS%5lSyc­«ÃjKCc¿÷ÞûòóNÇ«3(mmzð×W@HuOX<LRÚ·ÜrKöÌ3NÏ÷qÌ#<ÒØJ¡¹Êóy°­¯ª´%zìÓ~Ê^SÞ:È?÷Áý(¸¬Ö%Çñk:vÔfdEiO.õQT&lUâ¢6¬6*«ºf T0 îÿñþ|àú<Rq@ër_uÌ²Ìt·ÌzØ·%4*:Ø®Ý»Ý¨1S§KÛcÌt°hcÌðò1Æ[ÚÆ3 ,ÚÆ3 ,ÚÆ3 ,ÚÆ3 ,ÚÆ3 ,Ú
àµÚ6ÎÌôáMAÞL_Ï7fÑ[´Ó×¦Ùæ¥Ã¤¯±³MëµéI#?l?õI_ñ¯ÇsÙü|08¥çM®Wt?CGåÉÖ¶
R7ã«£I¾b{};«-¶´
ÚàéÎ¶¼á_ÎóPAøº OÑs ó
eàDÙNÿaüUÈ»ü±èU.:Õ× |âSNÌËlhÈ«ã<yCÈðÁ!àø!@À¬¦4_øDùR[ µ´\S¯jg àLgaÓ6ÞGxKGÜ8ZS|£vüô\¶hvÍ9-Z±Q©Ñj_ê}cµ/æIçEQÇÆô÷Xup-"À±ÏÖ·æû ¿Ã8fJº	xe#íO|âÆÑ7í¨ªªº¦ì(C"EG\¤¥ûÒ¹ñüX±ãuE</¦i]§ûÇtñQxÉX ¾¢Ç2T8ª
7ï»hÖTDQ¾þáóÏ½ø)_ÄÀ g T0
ÒS<8Â¬§7Ñ¾EY8%Ãva"Jê0Ã2Ñh}ôèòj¤
^×0P8fWx*¬èvëFË>¶èiQ:1U@DïA|!MÁÓZD  ¨àZø³óì±oãæ±I}Õµ,d¾~Óõ¥óÓúB\ø¾È5yàZeV%õëº¯þÆB¢¾ ÷J;!dZôK^×¯7Æ@g]EáßªýôÀ1¶¥|!°¿^þuÞ~Ôö-iÐoUäºW$!ÓÎ¢-·oÙùÙÇnø5¿.ThðÃKÃ !ðFBH¯slèÒ.·¥1¢øÝºÐYä7°¸©½øX'âS1ä:eKsðO£x0°ë(7þ?ñÉ'®
PÑt\õÅVdCú(«ë¦ÄóBkAbÈ»ÔªqC´5aó1±ÂÇZ&´»ØÆ¼2Õ+ã	q=.ùmç;öcu#÷ÆÑf<ûnuã'?Ù¸¾L=½¬i3Ú#ªiLFU¶t¡F~ :=ëUVKß!ÚÐ$tNdz~øi!0ºöCûÊË]7!¤âõÇÎ"MÖpÂ=ú@h$PïK_úû«B\(T§:è¢­Ê~Çÿy.®9<ùé#(G:ëjWÕ×	O8!÷åÓù¦É§ÌÔèûÜSnú9ûð½ùOÊóK¿6ÝéeyÎDÃÔÇ
§DzLY©|k{Ñº>BKú-ZÓVX?üá×Yº] a¡ë÷|ÿÜÂ¥3Ä¥&bÕ³¬:bdË Á¬ÏLmEmCK&ãmtâ2icØ4þ¥P}l7ÝôliÓRÞÔ÷Î8U0 ñ ;È -ÒÔgÓÞÖ´µL@*QN©-Qh--F`é#¤Qi'­ÉºÐYZ¬c3ý¯}(ÿ.Í'Ç°^X4­l
×g
ó71ïpº|Âÿ|WdRD'Ñì¥}Ôí4â²EW$(ÔGå	mfmêK×m¾ÅÉr_Ò¶(4àÆ%6áß"ñSi¯j'´ñhéá"õÂ½qZÊÔ1,Ýiöîô&Ú4R*^KUN©ÎEl4eÕ&ÆUÒHi1~H§éC9Ò!XÁZXMe¡³Ô¸oS°TÐõFº&MD5_¦ª:dí·ø`	!#DÎWQVî_eZE]}4|0R¹6­¯x_®ZºRy3ØnlKúu[üåËXÑ@ ë²m3k"ê}íjñ(mñ"Ô+yÕeß4üêò&Îù?mú%?i¥Ï²Ô´GÜCLßtc.ýiÓ0_ÿ×g{ö\7}PÑÀ¢P3iª«÷ìÉEr^|ÌÆ¥7K»OX«cZÑCN­Ý3
°Øe[°Í<0·kX?kÉLO5E3ÆÃcÌËåc1ÅX´1f@X´1f@X´1f@X´1f@X´ovyÕ|ðÖÞü5ñ­Å¦~çê_m¡·Zû¼µyëÔ,cv|vÜFMçT8¥.ÈY|}}HP®¼z¼oï¾5¯5ëäq;ú¸¿­ÇÑ¾dðD8ékøÓ+9jêìlàÅzÒ hºÓÉÒV(/µÂ
Í5²Ñ@P/¼èÂu^¢TFm#BýR&Ô÷<Ì¨Ìtèmy#¥è,µ´Ô ïq¤SNIV¡Îmká¥çs½hÑÇio){jm&³ÎçöíÝû¹<ÝOúSùg¥Ï9·|åËy*4_*å­í}ã
ä3Yp¿¼ïïè_:²qYMÖ,yç8¯,$XoÕut	£UeÚ¥¼»´í'
¾+º6û/¶"H^ýTïÝ[uafO¯kÚrÃ*ÎeáÆ4]®
§tñùôïñÓM]ÒðåàG×Ó+ð4~<¶ÉÿsÛPMUàÂò¥rÎøKÁË1òä;¿ÅøÇñ×OÝÙâÒ+YùÆïqS¯p@à0@0Íçzø½þ¥åÑzaÀU]p¢P'u!ÁêBËuÒ%Çáy±¨Li'1LÚYÜº¶À~y[¤Ìø,ñ%ßç½ò¼Õ°vl©÷Aà>¨ï6QÌ°éU´qæ¿`Qn¬Ë.{Çª«aâ&µ	òÿ[5Î8Ñ$lMC55ûg­¸"ÿÆuYv_¸ðljíE8gÈ(ë\ÄKõU¦.u]EÓ0jeÈÏt:ó µ¡¥>0b°ä.Ôµö3xS^EeÓ´&åO}¹%MV;ºZ,zm:XôÎNïA MÉunðUy¤cõ@Ix#:KÑC&â j	¢µÚ&zI]Â`u©ë:êÂ¨UÁÈKtJU;%.Îs"Ê³jvA[nZføô*Ú²
°¸óu»1ÃÑ8Y®`ÙBç¶ù%GøÐÀÇ
Õ4ibjL6nÄhåÉjoBº®C®xÛq¿
ê=][àY¡e)ÊYË<EÂM1Dæqð1ýÓh#,XÃ<ÍÆJºpceáÄQÀâhJUø+MC»jRGç|¦é1Pl¬,7}ªÁÇª,[ÐþtýïY¦Ó¥¨
	6nh¹:¨/¢5
£B85Âª
|
¥g
ÔgºLTÇ´ÚB!Ï,fÔ¥D.D[¡¼¾aiaê	?VâXnQNïé8ú«ûÞ{ïUçóPâ|¶8½dF®%S¨&:OñùAñá5|îûâ¾9ÿî»ïÎ§ï} N¦<s
Ê¡Í¯&Òø~)iDwý"\\+Ö§Ö[uÊ1iH°ººF0ù´ùµÇ©®PF­òF8,îGçëWi;¡>izàëv2d[Pi+ªà>xâûÓ^0èÄürË¹è×f±@Ü$wµ=iÍÙtÂÿçè³ <üãó_ZÿßÎÏpÂ²ÛïhùÛf*ÌFoúû²}ûö¾5N¯"Í|Àß[|XÛ§©o³qðò1Æ[ÚÆ3 ,ÚÆ3 ,ÚÆ3 ,ÚÆ3 ,ÚÆ3 ,ÚD¿Ò~xcCý«-¤þ¬ãmÞð4¦m~#Ó3Û4Cqm½ÞV|y°­*SeEMuSä¤OtèÂ¿
TÐªpc¼RÞ5Z4b>'Í¤úc¼mi=O[[ÚË¿Z^õÔvøÈtÜ`Ò®ýÈGr?ò:oI)çÈÿÛØ7wß=z´Ô)Ù,a0ÃïOà`C'ÊÀó#omºïõÇÄD':8ÚÁ¡NNÆéùw®@yíojÀ¹Ot¼§½m¦¶ä] ZnüÏ¾.áÆGy$wlTv¯eõÑG=ðÀÙös¶¯Ö%Û#í¶Í¬l\¸?wE'Pü%H­Öª|¬×ª2cãúcY¨¿>¡Ï1cÅ?Ê{ßóÊk+¿±nãwlª/ÎáÜØ}|?É{5mðú·7F]*)&£o¯um¡&9Ð¡ÁÏk¸±Eåñ?×IÅ[W]ËìG÷ÿ(ûÅã¿(t);+hÜÇíwûA|¢N{¢PYiI§*Ô_ßäuõûî¿¿òÚrÛnñ¤¨t¢û¹`¦lØGú¤K¨¾úõ<1µD©sH?
¨@:Ã<[TðmÅ4­®eöý»¿¿Æ'÷<áúõÆÐiþ
æ¥ág~Q÷Ê=Ëß;mÐoêOC´¥÷EÙp¾ú^_ýzhkÚDä8ÎÌy7¶ÈÐ°xû¿þöèºÖGMAçÏ|fþwt	ÿ6O´ÄÀ®-Á.$Âe(>&â-çlèÎ©§.^¶6# !³´$Â4«)^Ûèâm!m@VÇçpcï+^qîèÓ
]ë+é°¶¢6Ægfzç&×òÖ­'U.ÙþmÞÀrÆâ=ÐàG,1#Ø×$¸CÚæÄ¶À6ÉåØY0ñå-,uËtÃa±1­bé§D].ç-ÜØ"¢2(÷QM!tÚÉ'¼Îê8Ò>°Ô¦÷vðà¡5îs±.?õ©ÿÓ~øÂ¿ÉÂäÖnZ³Pê¯/x^A¸7¢ÜKX«®Í1,±6½ô¥Ê6À6a%ìüåó">|LT´µÖ[N§g%0"Ä"Y³1jkÄ×pcÊøáýç¡êDU}ô	×YZÚ&}ÄDíé¹@ùåûÂiY¶Ð6×Þµ{wþ¿îÀ½ùÌÿÉ¿«ÿÆº?pîUW]ÝqÇÚÒ)
õ×,IÄºä¡a\â¨»¶HÒNÒ6ØSÎÇ_ÖíÕ¯ùËgígK²Ø¶1f®@dwïÞGäb_öýFcj¿1Æ&\ºsg£¶1f.ÐV¬ÕÇãÌZ¼<b1Â¶1Æ¶1Æ¶1Æ¶1Æ¶1Æ¶1Æ¶1Æ¶1Æ¶1Æ¶1Æ¶1ÆN¢\EE.ò][*Fàfâ>¨J;úÌÖF^EÝ}M2íEeeVÕÎ&6t¹¯I¦Ý¥
w¥Ë}M²>;2Æáåcmcmcmcmcmcmcmcmcmcmc-Ú8ÁiLt¤SûSÇ3ÆÌ3Ñ±RÓ1µ}6(Måo×^t&*Ú4$Ï"zÜ2Í"R$2=´ÅÎÏÕÄM$>ôág/zÑYÙG¯ûh¶¼¼<úö8¼ùÍÙóÿì¶oÜ6úf8PUZ,þò9Em©Î`"m¬Ö÷¾÷=Ù÷¾û½¼ñÐ¸~÷ìßj!ªá^~Å£oÌ, Î_ø¢f»víÎë6AÛÐÌ¿Ìtýl¯¾àü³@|´-Ö)üÂ.Ì=p`ô5TÒzì
mé-;ÿ"ûØ
·®Áµ"³õä­Ù¡CFß,íþèÕÙ-[²øüçóÏìCîÏÎ:ë¬üó$~ÙH­·^wÑè[Ó7òËþàe¹Pß|óÍùw´¥¥¥ì%Û¶çi+qx¬NÝø³sÏ}E¶ü«õgäí¯|9ïäj/é, ZulÑç<YÚ_e!F¸i(ý¸DÇ÷ñ3Çýëÿ^Øç
Y¹EåQUfúî9Ï}NvÎï³º_eNYl?g{.Ø©PÊéUøªceõÂÈ"01Ñ>í´Ó²GòèjG¥B¨-OÞ²Ú'×<ûìm¹ewøðÑ·Ç¡áDËoïçööIñðÃþË²È;Ô)§f ÿõò¯×,¥QGM ó^tÑëFÚ³´i){Í_Ýø³7]rÉ±ör8û×¾6ß ì¸xGvó?~!o'´§ýÆÓÖmú©O}êj;¢]EÑ¯£¹üò÷çiólè0øR÷ßwÿèµfÆgVÌä·lÞ½üÜ¯¶ôYÔ¥;wæºóÙÏ}vôÍâ1ñt>
÷YÏ~Vvã'?[X§rêhïô¡±ü¾ôÏ_ZPÌä¸ý¶Û³~ô@^æê\o»ô­Ù©§®´¾c ?ã3²+¯üÀjGFH£UYdyõ¢ø+¯
 ÞøþéùgÚí¶¬{9pà@ö¿¼*ÿÿ;ïÌ£ß<v/MàXÒeCl0vqËAþ¤NÊÿùãy;a+ÞwyþöÂ²Èõ7Ü^T&*Ú¨tV
éëæ'>)¯ ,-³qø«ëÿ:ÿûwÿx.º'<álÿ÷g=öXþ=ÄA<xðÐª%.Lï[¸Ë`Ù1KP
[Ó)ÁW{¢^¾öo_ËÛÃ.ySþ\ãÖ¹uá±6Óá#Gd×\óÁÕFÑ¥aB}3hKxoºé3ù²Ä<ø`¾6ÑÔÂäx¬ái.çµ±ÓûfóCñña/©?ÿÌ3³­[OÊO18b 0ãsº2t&&ÚL{5&`Íµ«»îº+ÿ<+$z Ê©¸´÷¿ÿÜBEDkÁz­6¡¾øÒ4ÚÑw¾ó\´Î¬6LÞiG2@ ~m³eËæÑÅæ§?ýé%(qûwä3u=s`?3yq	ðK
ÌÈ°ÊYjcàF}M65JÜ0ò]}õ|
<
KCëè\5°·_öö5¿"aÍKùÒ¦å£ù¤yP}°]uÕù:nlüÏ¯K¨/áám6DÇKú¹ÎGHõ å86þïcùun®Å Nä|N£
s
Ö¸¹&VãÝwß½æ¡º~iAÛ¦s~ùËg}Ii}èYD|x[Gº¦|#¼ÌÜ8ùý6Ëg	Gc7Æ1ñ_cé¶1Æ¶1Æ¶1Æ¶1Æ¶1Æ¶1Æ¶1Æ
)Ú¼Õäí0½Y¶h¾Ìðáí^ùáN}ÞoÎ¼Û¤?¹ï3qÑVã§3k(6¯õ.QDD("¡çjK½åm´vÆ+önl44æ6mÈa ä¥mÑÎL:
þ"tÂáÆLî{åLL´±|Æ
Õ©uZf-;íÄsÓcµ/:¢ÑiN<_ytØZÏVoHóóÍy{÷~.ÏÛu×]»îÚu÷5\Ol7¶®AýÒõÅ÷ñ3Ç%ÜXUÿñîw¯+3î5¶_¶Xö­´¼Ó4TÊ®ZqÙ*gTi}v×0P] ÁGË®(
ÂHíÇ³§^]:½$
eZÊ~<â)PÏ_\"RJCÖB]8¥& öÊ7i jÔïØíÛ»/ß§¨D¿õ[ÏÍöîÛGcyÁ^G"ÒuÕ}uÅáÆÖ³áÆ¢yâOÌ÷ÓÞ(3Ú_]ß£Ç`á¤Í¹j+ì¿zÏÜ PÄXÐruËVê:î÷ K-;¦Ò~ñ_S.å·yû¶mùß*H´i@:ºÎU*¹ìoü=G§ð]öÕ|Ñbè, n½õÖü|B9Ö¸EÝ}ò[c-ÜXÛ2ÃG6ÇÇ¾Y33\(«o6mV¾ñåÝáÆJ´ìê8pÌò£á4iØ?«è<\Ï¦ÔÝWnl¥LÙÎ L2ã8oíáôg¾ÚØbÏ#cëÇôçEfaE;Z,²æÊÀRÅb"REúPMÆXº~ëß^ÍS:½¬£ê¾º@ÇÓ^[lÚúfS#+.mhÓòbCmÈ,h«SÇµEMx VS:¦ªLÕê Ìá®âÔ=ÂÅ3Ï8½Ò¢*§Ôj¸ä|6¥î¾ú:q¸±fPC7Ö¶Ìªê:c86>§Ôí3ÑCð!21Ñ¦²ô`5lü?i-ÓiÖº¾J$ ü°! »vïnÔ±X%ÌÎO Y!ªØÒ'àeáº õ=6Åê¾÷ÞûF{ë©»¯.0)Mk×b¸±&e½ëºáXÎÕ&©hÚÉùQ;ï«O«ÎÁzï8?G3Æû^1»¦ÝÀÚ³Z§6f£â¾W-íÖLoÚ´æ'vÓéÓë¦ðP?õ3fUßmc^1ÆaÑ6ÆaÑ6ÆaÑ6ÆaÑ6ÆaÑ>oT¥o-Fx,º4fÖðó89+z«OoL²MãMÈ¦Ôõ5¡·:»Ñ¨hÇ×i`44³1"Röê0â¢c¢ÐÄsµéÕe!'$¼ípcíi:hÌ3m:%> ïs}:Õ7ÃÂÛmjø~p¸1S<$*9ÎÄDç-¸Áàý:ïJ´ò,³h½ád)"Ñ~î,:Â>½ëïÌ-Fö§#wU¦îç¥Ë6t«¼§A)nl¥©[ÒPú±®ù>~æx[ß?ÒòNÓP}*O76§P	xîUÃ"Z~ì\ñ¾ËsÑù¼NÁEæÎKß{«#
\=ÊevjUâ62¦;ºtçÎüí_KÃáÆÖC»q¸1kËTDÂÌ§¯?y4/¼IC%¼ñ6ú´6yÁòR"4â&Ö,R*Òa¢ vjU¸ªcOÊ×ö, #:ÜX1ëpc7Ö©6+¨¢¦[¾}:Ç¯qtÚÎ´? ù´.º6ÇÉO2ûÓéÊHÓ·¦ç<ãpc+maQê³6eÆqß[aâ¢MçÂ²¼æÝøÛrM-Qð7:4X6¦eqÈ+_Lï¢pSF"2uÄâzG÷ÄæpcM2¡ãpcÍ¨hK°F¦è8â²N,kW"¡)SpQ $,g(
9DV!AëçU?òYyY^>:ú´P.7ÖÊÀáÆÃ1ËòZuûÁáÆ* s+qóæÍ«KlÓÖ²LÅhÅC®hi³æÅ`Â>=4a­´§%Ö7ÛüÖ©<ëlñõ-NÉç 
<>#
ÒºuÆLA÷äpcÍà7¶IÃ±i&Z´?ýuù#?7f1=ÃÀäpcëÊHciÖ/³Ã­Ç¶1f.`IÕáÆê±hcÌðò1Æ¶1Æ¶1Æ¶1Æ¶1Æ
)Úüh¿ëÛaz#m#8 2ó?Ïê¢·úÔ>Ù¦ñ&dSè/zC¸
½ÕÙäØÆÄD;}ýFC3("e¯#.:¦Hh$TiGÆ¶::¯c;ÜX{óÌÄD;õpE
7¦N1
?CÂÛmòºï¶áÆ8ì=¸ôÍ
´§×¿áõ¹¿ÎÃT9
2óômÎ¹ÄÔGð®UdL
	¬¯"ë.Zvq#=7Ì¤AZ|_4{À¢ÔòKQÚ
Ê­pcá{~ðü¯PÀ<"¼©fòæpcýSUfÂáÆÆgj¢Md?;ØÈWW¨¸²°CÏgø5`SÈYåâ;²}{÷Zn¤AZU>ºñ¬VöF¥K¸1::uò«_þrôí
D>!-YîwIÅ$­ÃáÆú¥I9ÜX7&*ÚT :">o¹åÑÉ"½Uaðk ¨tp,?|Ãe½#¯d !ÅTM¨J{£¡òënìüóÏÏ;ªê$¢Î5°$EÇápcýápcg¢¢M¡2ÑéHÀÑ]Ã¥Ó»ÒÈ´§K¸1Ú¢®4R¦Ã²véÄøpî«aµ!æã ¼©±M£ýÏ6eÆqM³nl©-LÓèvHÓ»o}óÛ¹°ù	|7d
«<ÛÃkqML­+f8}.I9ÜX{nl²LM´±^YÛjºÖØ&aêP ß,í~`Pln;h\ .-mZ]@w±EÛÐY}C8ÜØqêúu~ïpcPYñÁ~rY¿k³Ö8.A]Ø¡28)¶Âauß{ï}£½+Oõù)8a[ÄRÖ_ÍzTflmÃÕÁ¹Ì>
ÁîÃ3mÕáÆÚÑ¤ÌâÌÉáÆÚcÚÆ¹ÉáÆÖ3µåci
Ö/³Ã­Ç¶1f.`ÑáÆê±hcÌðò1Æ¶1Æ¶1Æ¶1Æ¶1Æ
)Úüh¿ÉÛaz³ÿ¢S³¢·úôÆ$Û4Þl
o/6éOî{åLE´õó<5YB9DÿÂmhÚèç("e¯S.EBÏÕ¦WDl£´1^Çv¸±öµÿD&.ÚtÎó^y^îshÈKÛ4-*tÞnÃi=Bï¶áÆíc¾,uB=z`±]rn$Ü÷Ê¸h_ºsg±æáýÓuZg©eÑ²Ó~	H<79VûE1PaM¦ç+O8ðÁö7±eIK"O©¿c#|§iuÛûÒï#ÜXäñÄ§wîå_µgGÞn¬ªÊL8ÜØøLT´ix¸cv$	®-»4
ÄpcìÇÛ§^]:½$
eZÊþ4`1q=H)
Y²òzn´¦ÃeáäÚrû¶mù_À5â$¸¤TdÎ¹±¬»¯®t	7VårÑE¯}jÃõK2C4nl|&&Ú VH2
tÝhÙ1&wiC	^¤AÚ4 Ê
]ç*ÜRY¤IÁ½/^¢ól=yëo1¼$Öª»¯qÑubP
:.ð]]¸1h;3iÃõÃM6o¾hÅâÀ1ËÓ:t¦Y `øÇ!w@L¨lÄe)p2Rw_]èn4CaÃB"Ï}w]êrM§ûMgC¦MqÇ7ÁáÆVhÓXYå|]Ëç¾ÖJëù¡£AtÖX£T6´ip¥+IE&G°±>SGì`U÷ÕÒÓÞ6áÆR8kxZhPm,áô¾û*Ïy§M©o:ÜXs&"ÚEA`Iu¥:ë¯êÔqmQÓ&Á±Côê@	?V6ð`í>óÓ+-*=NÛP.{'¬ë¤KOXZ¢Aþ¹	{Ý}õuÒ&ÜXJïIâpcíq¸±É3Ñ³é4k]
_¥M	³ t×îÝ:"k 
WÄ@3 ÅpKléðt¹ ÍTô¹·²pIjüüZ'½f:¿Ü,¿ºûêÒlnrKø[¦|u>ùÓLêTõÚÇòIZE¡³&×p¸±µpÃÙv-tÖ{â¸{÷®ì¦¿¿)o ¢ì{cæ¡õ½i±v_ tÚC
y¤ßÅ[ÍbßíÖLõb S;¦¨úià$×-Úâï\`êËq<ÔÑÏ©³ê{CÃË#Æ3 licÌ°hcÌ°hcÌ°hcÌ°hcÌ°h··¯Ò76ñçqEoõéI¶i9×(³¸ö¢3QÑÖoµQT¦ÙxD){u8¶ØÙã¹ÚRß.M$xyjQÃQUï%Ä«LSÔª| 
[ÚøFÓ¨I;2ó	·Ûß7¶ØhPéûtÚüÏÐ4cpQ|èÐ¡Ñ7ÅB.Pi­eÅÿ£EÆHM('¬?Î%"Â(~Ýu×æÓ%¢pI"^7µ*¯x×\T(3[× MÒmïãgJ¸1Ê¤¬<ªÊLßáà*úvWSÛÏÙvñG9áêë_ÿFádXØ5m*g3ÆmÃ@áhWD»Ù¾}{vÃõ[#2eáFYeU
RyÃQ][.B-Ü0øR¸b.¢¬Ì´¤Sþ·eóìåç¾|µ¤Æ¾wxýý³ûìèÅcâ¢M Mp:êN.a 8W¾¨Ýz(ÿ_TKBbÔªx>þÙßäE÷°7VÇ.Z¸±&[fò¸¡}üççíA®xßåù_ÚË"7Ö¸l
Â9MáttK Å
Ç7©ózA¾®¾ô÷WE~q¸±¶ÀÖtaAðÕ¨fÄ´7]ò¦ü¹Æ­ÿrëB÷%Úò,ECB§ÿñá+ÛF Kçr¸±mù²YéóÏ<3#	ÙÓ%¡35ÑÆÂ Ëó:£Ö-iãÃ%IPX§lº®¹Ñ \n¬ÁÐÂõAY8>Å@Õ3ö³ìFc&q¤ÁV9ç4êkZLL´iàñÁ¸ÌÅ§ë¿ºãÆÐªpILåYgYD÷¾h#}[°U7Ö®ÁÌkÒÖn,­=h³,Zá½ææ'ß³ÁÞh>·íOÛcÄÔG1ÆtÇ¢m1Â¢m1Â¢m1Â¢m1Â¢m1Â¢m1Â¢m1¢WÑæÍ¥EsUÞHW@ä«íÜÓ,êk6y[OoúÍê
Ó¦ùp¼D>¨¥­NæF»ºÁ
ÿrÏßè¢T®Eûïx|ßÞ}k|.Ä×ÉÎÅ,¯o´újblP&MÛOÒ(Äo¹å¼.êÉqðòÈÈ]hß~(èôuáðG
Ñ@ÐqQx>!p®£àßúæ·sGY|/ðõ_ó^yÞïç ÿLÛeðF÷±ê¬,¼uÀyÔÉ,ffñè$Ú²ød½á F`yàÐEîuÎÖMüÿëÂ@ñ¿ö)Ýçj_Ñ~ iºuÄëY«\M¬/¾çst¤ÃÆ±À}×Sâzò4W<ÒÉé@l;¼-¦Îç¹îÁ\õ¤Öºwm*HQ¥mÏ|/êÚBº_ç×Õ ,pÞT4@6^ÞJA!*=DøB;Ä^ Ñ=¢ÁBÅJÂ;Wt¿Ú²eULb(Î£ÓJ8WXìSut:Ö"¡Àâuû Ñ;ûìmù5,]@ p/Éuc81YçãSâ¯¬è"·¥@äÊ¶%ÛÓ"×ãB½P?²ò"Ó *3ö#Ô£¬kåiÒp«ýl²ÔëêH²(sÛ$¼Ú;ucLWÆm:\Ð>i.ÂuÑø£©0P@§lÎY>º¼jM"¤tÊØ)H[!ÀÊ s"ÀESÞ. $Ú«§TfEÊ&
ÈPÇåÑËòUÎæÛÂµ´¨3+ñ7cýÄ2Ó´}Û¶üoumA!ÃÊÊ¬Ê²QvD>@¤­iÓ¹ÓqiÈ§~ZþÐ¦
9GÜ¾+»lX·´±ÐqÏ¾¶K ³¤,Ò{ßó|ö>\P6Q§/2Ð4ÖaêÈÇäBÛº¶@¼Ç.!Ã(D;E_ÓðV}fc3ÓwÞyùg"STAG¦Câ%ª)m:­ÅT$,/¦Èó.ÜUûÌ3[á8½Gpz¯ÏZm"vKDqÉ	ÄZâÝ1LÇ@TFu[DU[`É¥AÑZ5~ðV.¤£ökÌ¸-Ú4f:¦°<Ô"QÀÊ)[ËÓ×ë`wÜvG© ¶¬qj­é3¥~EQGÍÂ
'Ò¥o}ÛQbí_+°n/RyÅ1`ÇH;E	ùAÊ~jXy"ÿ¬3«N%²"¸®_7C][`y0wE>EY} e@^(H4
ØêÂ[Q'],~cÄØ¢M§ç§L²4¦õ>BS×ød_zÓ¦MÖ¶Â<iÍk#<ÒeSÇäoü^4LcëPÚÑÒm#b åMée)S]Ã)1{)Èâµyóæ<ï*];Rö0óx}-­±*È?õ§ëÕ¾òîÚ½»ÀÕµÄ5cK-á²ú Ý³&çU=Ì4¦
37#øéû«÷ìÉ×s§oPÙµ{¸¿þ
¯Ïöì¹ºpCÀª%N¢ö2i Y^ÃH§=RfùoäDÆT1Ó5m©î¤i¢ÀÃJÊµõ/Ü=\c_¾4CÁ&ÜW×uê¶P¶~Øêóª ÓXÚ4dÞúcÍ`j½ØÒîÎ8Ö®Æ±Ð'El+ÀO§ieGÆ±òYjaYÄíØô£±cÌéò1ÆvX´1f@X´1f@X´1f@X´1f@X´1f@X´7 z?¾®­gôªwúº7ù¬}E¯¿Qvø7iëE"]Kùão¼nþPËd',Ú¯û¼ôÍqð¨@lÑñx5^Îªð'ýÈÔQv((A|rtÝLÃ!2¶hc­L^ß®»îÚüo´ RKýûéO*ÿkHéBznÕÇ±:ON´/
JÑweÄ´çÉrYªÚÒtù¬}©3©ô¾ÒcÊÊ,B^Æµ,ü?¼¿¹kà-I½)ÉkÝoö	÷ë¹-Ô._ËüC¦aÌédiã|WÍB²}ûöìë?»kÅ×0¢*áÄþô§g7~ò¹÷9üIà%sé¹i@ÎãòpþùççÖatµI~pß©Pf]@(«B!¾¿üÕ/W÷@7u%È>Ò8zty5BO]ut°Ç64Ïàu×ö«üCCcB'ÑÆ°|b#4>ôPþ?4		àùÅácSç#k|+§þé`8Ü!´S´.cªhA5	eÖÒ.eÆ5.»ì£OkÃwDS.:ñ}ðà¡Uÿ×MÊú·
F¹ jeÅ2ûÔtAühÛ8újö8,-mÊpÚSÑ½E·¯´¯1CdbkÚX>Ua êQjÊþqÈ£uR:nÛPfM!íªPf\)¾îÛ6p?ÜD8t-³*XÆ	ã"î@3¬5¥âÊg<ýÅøuT¥Íë^þ¢û/Z*byùhöÕ¯~5-Å5m¬ìk?òÂã}Y¬
Ä,ÝBÐ$~M@ÐY"iÊ¬
UY(3-áè¾Y!ò	0  ²ütÎâ×¥ÌÊ` ¡,¢Å@ò¹Ìê%(Emã[|ºx­iÇ²dy,Þo÷|ÿì÷ü _^â~Ë`F}ôÿÒi21Ñn,¢(6iØ-®hú[DÓPfehÉ¥*k·(ÂJoÖ³5Ø z,ñÄ_QDajZfmDf!º&`YÌ¬½Ç_Q°ËÄ²b@mHÓîòEÙ§Ï>"mB3LL´×ª0PU¤ç2]¦3¶±¼*¦Âe¡ÌÊà<ÖÏµüÁ``J´¥¡³Xa½Wù~äGV-mÄeîMË ]Ê¬+é}AüYyñiÍ ¦c®M×¥Ý'
ogmÝÃJcæö§N;4U\ÊïðY¼Æèö,A±ªæ)YÑº¼~Bt{c©cá,m­½25¬÷2]GÉDdycL7f1baG1f±hcÌ°hcÌ°hcÌ°hcÌ°hcÌ°hcÌ°hcÌ°hcÌ°hcÌ°hcÌ°hcÌ°hcÌ°hcÌ°hcÌ°hcÌ°hcÌ°hcÌ`È²ÿs{*m- Ç     IEND®B`PK     ! ´Êµz       ppt/viewProps.xmlËnÂ0E÷ú÷Å¡¢<"jUuÅ¢´{ËWmÙ¾¾¬ñÜ¹s<ù²,r²çÑ	"J@#Îú³ùzRâ×çFCB+ðt¹x~Ûx¯àðíhónC°1c^l¡à~`,hÌ¥Æ<`è2&? q³×(³+M»z÷H½IS%àÓ]:´&rÞoõ'7ûuàÑ¦©î!-ðrºæ¿í·Æ?¸[£GPðRê²¢I0ä
Ò@ügø6N(á»`ÞåßÎF]K7Æ6ÊÙh5)ÖïWk}®$\B±ÎåUÔqíIð
¯ÅÇ¾$õkÇHü¶]ð¸ºsÌÎu66NeJ£ªªZ=êT]×ZínåC¸«ÝúèÚð(Ã
ÿ=ä¬{9º5§»½¡Þ´ÎkË®!X<ÁgÇÕé·uiw{ñ  ÿÿ PK     ! tµ#       ppt/presProps.xml´[kÛ0ïûF÷%Y>ÄÔ)­À`+ct?@³DÌ¶¤4cÿ}sXË(ÑùæðwxÞ×²nn>zPÖi3V /ÔØNÛ
|½_ÃDÎË±½U~(nWïßÝLådS£>~¶Qh4ºRV`çýTÆ±kwjna&5wcéÃÖnãÎÊC0ô1A(©Gp®·¯©7nUcÚý NM¬êg·Ó»t^Óí©gH« ÒíÌ!;;ií|ÑÞ©{=®hN=÷ç²¾c}?/ÃÀº·«YÎ*l¢ÙWÀ?b2â?)S©ýGçÏ«hou~g9oXà@Êx¨k(8EHçIþëHiÙK§ìqÂY?¦90èÖg6~Ñále<²Ñ³]ôf»ýv%^¯QxNÐOÍïsl²n8ÉPq^PHàçËæ§E	Ñì}´÷ê´¬½íÝÀÏ°'ºSý/_öEÓó¬KÊ`RL	äË !kp£0«év­´ÝAnè´o¤ÿKÃSÆ&ÁeÁ`+4!KÈçsV¤YFPÑQmä¾÷3c3é7Ä#äEÀu5c
D¢¦Ë"Áf$\Ð`Z¶;iý½í÷ðO}QWwÅLÿ¼ò$<¿ÈV¿  ÿÿ PK     ! Øý¬   ¶      ppt/tableStyles.xmlÌI0@á½whþ}-CQ$Â +wê*!é@h£ãÝeùò/Í?J¢Xìd4ÿàº5Ý¤{c@ÖqÝqi´`°
y¶ß¥<qOys«WëÐ¦hp£ssBmG¡¸=YèíõfQÜm¹¤[ø{Ó$çâÔÁ7ª ¢´À§ËåiH\z4ÆqTÖÕ¹©ý*,~@²?   ÿÿ PK     ! U0R  Ú!   ( customXml/item1.xml ¢$ (                                   ÌZïSÛ8ýW<ùz;®4cÜIIi3@®_¼ItØO	Ü_+Ûq:Uáù×Òî{o7>?ç÷R1Á/:Ýã ã§"e|~Ñ)õìè¼ó9^!ER3P®àªW\tZ=ßWt9QÇ9£R(1ÓÇTä¾Í??ý4I&þ¥ÓÀ<+Ö-ËãåÉ±s³¬ëÿ¦öãJNaµª ¿wuÆg¢ zað>ú"5y)¸"S8J-sàzL8yGc"AO 1ê^tà,
Âp6;:¥ðéèôS=Ó£Yxz'gB;ñd
""úÞøÉ¦è²ÙÀßòs	JEþ6N½¹	ÛÔÃ]ïq]t´,¡ãÇÑI z*JI¡Þ.Jàó©Eä¿£dQæ°¬¯èaêëD²ÈaGö
¸] $òÀ9¡/ÌQÇàÉdÀÓìåäàvÉ)uÞ1Ì[ U¦¤~'<ÅúpÄü	ú8)Ì±ïU$ W*Æ1É¿IQ¡ÝÀÈh»h²cs}Õ¹0Y}É}ôRPlÎ=ÝàEþ2ÃäkÊ´vÈÑ9Dn3«·J¶ØTßÆ«>¥¢äU½míþ_ûQû_ÉK¸uþÙ_ÅëïË4±!^¯=»bO¡¸xá]íd¼ÍðÂ×£!×Ùðù-<1XlOrkÔVSçHGË4£{~<ùxùõ«7ÏöMÇÅ0"ñÞÃWÈ2W	yþ\1ÈÒÀòy{S¿BÄÇÝám¥,óD®LBØmÃZ^B1 X6Æ:$3
ë®» LÁ@QÉ
Ë1X³óQCäW¤}©¯XÜ]¶ÉÐøµ,Ã&¸Ïå .3Á-óåMH-ÝT5pÃ½àÃæûkxÖmÍ7ØXÿ)Ñ¥WRØZ>
3ÇO
U¯aÔ°Ò´ÌÊ0èGA÷è$Hºç½0èÁùh!Vïb¯v»lZ]®Þ(Ý#Rmò]ã©tªuSöé¢ÈØ¿ÐHÞ6°ÔSr	A]Ùì®YJ#:	º%d	ÄºG=vÞÅ#Ø§#BÛc¬Ô6
ZµX-Ã¬ñÐÈå¤ñgrâôÇwbémw4VbÉ3A,w?ÆºlW¢É.KsU·KNpvC5 sûÉw»ºryÓ½WóF|¦²Ð¼®f!^øÄÓÂ«<1¼»"¨Ðzÿú\ áÛB~ºIpÞ«}ßkÌ*©§åCÎ¹ðöfGOûIîJÈ£e7þ­
Nã¦;çhÝ»°úì©ïë3ÐRgUÜ:´5wW¤ÖnSíê&õLhL3K×®»ÎÊùu?8+MmÃ«Ý]¨3Ñg+H8ÛÞAEÊfÌyÇöéP1ºAx¢Ïì6	a1$búx2"%§ï#Æ]EÌLH4¡_ÃÔÇ=D¿³=ûp>ÏfÞñtpíjê3Â±
Ã^çÜ%É2»r LrÚ~»`Kc;ª©§ið¡¯ÍøMß×z»Ïðç<ì~
Ï#ÿ×²ÄOÍË¿ëWFÅ«ûÔkÚ{t#-(îöÍù{uLoÄg
ÄL%UA¨óx<_MýÌn+ã:"éÂZÈÉðæúuÓ>Z«çD`yOCEéÞ f¤ÌÌï ^}1eW!¯Ød?Ç¾aÜ/6÷EM²C°ûM©Rþñùe×ÄùFEõ®U_+$¨*´Cþ {f×]=	WON>Ttð
ßÌøú¥^üÏCý¸&¤ßä×5&GA@u­ÃêæyÍÌ-Ôcª½Îm'R£©
ÁªØcà°{&Õ­Ôè PØÜìáÄÛova­GÛ·Ø|e	Þ=]´ lÖ(pöé½jÑñUkFpW{¯Áÿ"Füt×üÍ_iÄÿ  ÿÿ PK     ! Ü="  æ   ( customXml/itemProps1.xml ¢$ (                                   ¤AkÃ0ïýà»kÇM²¶4-i²Bocl°«çÈ­!¶íÁØCwéÆN;'¡ï=¡õöÝÙø`ÐÕ$qSØw¬ÉóÓ.H¢t½ÐAMíæöfÝU/£="Ø,5Lª®&ín¿köMCy×å´XT-mxÓªåU{·ó{,Y»	59Å8®êVàÒP£·2&éµ6
:Tg.2ÁyÅÔ9ÙÛ;Íç²ý:\Ë)ÚÙ_.Ö(u)´ß°(§ëØèS
Âþ5Nã(ãi¢ß±é£ß¢¿ÉPö\­i¡`I¥ôµÕ¢(a^RMËìÇí¾úÍæ  ÿÿ PK     ! =|    Õ    ( customXml/item2.xml ¢$ (                                   l»Â0Eu§ØPHT*¦þ@®©£Ø<ú÷¤<$6ëÝsm^{Qû9acÍ3õHir²zÐeWªi ~DrRSð­=Èè2&Qá¶M
âÊ6HñÍ¶e¥»pÎ.ÏË/4KP»A]®7|eæ÷ÿÝøyÙ>  ÿÿ PK     ! :ªÅ-ó   O   ( customXml/itemProps2.xml ¢$ (                                   dAk@ïþÙ»®ÖÆ #äZZèuYÇ¸àîÈÎZJÿ{WzJ{Þ<æ}©vnàÉ «E¤"§±7îZ·×..ED¬\¯&tPâÐ<>T=í{Å=\l&ÌK[¯MvÜ»lo»Ó9~>ve\¶ù).ÊsçY¦§í·ÚªÅÈ<ï¥$=Uà.z«8H8FCz±àX>¥i!õðöÝN¢Yûü^¿À@÷r­¶xóböH8p¢ÑJM¿åR£ãÀáÏäZl*ù²ê»'4?   ÿÿ PK     ! h`NË  çâ   ( customXml/item3.xml ¢$ (                                   ì]moã8þ~ÀýÂ÷Y±$Ë¶ÜÌÂ±`N¦ãîÜá° $:ÖE<zÉË-î¿_QodJ¦äØNél·m>UdU©XU¤È_þöºvÐ3ñÛsÏ{ÊÜCÄ5=ËvÏ{Q¸ôÞß~ýÅ¿7\¼mÈ¹"kàË÷zhó¿¾â59ï-Èzãà\Ù©¶¸÷äWYÿÉ#UÇ±¬Oæ#YéÉp>Vc}ræ²&Ë3yx1¿¸Í/äK]»¦3e®Lµ«á¥6»¬Òÿj8ªþ4'éÛ0þyæè!ÂÈ%/ÈòÌh
­ÎªÓÛt©¼è Ì¡9ÖGKeL&úD6ÆªD66^äAÝà÷Va¸ùÒï±ø³µmú^à-Ã3Ó[÷½åÒ6I_Yô×$Äq¿À?#´Æ]m|è½Ú$¿¡oQHÞ¯ÿþo¿¼Ö
±ÿHBª¼`M²¯XX¾çÁØC?J`iÇ
¨èeÚXW
¬
M[Fc}¨(KK5ô	ô¨i%Cnæýyyy9{yþ#å®ôÿ¼½IÌ5o»Ùw	èîy-YUKI3ÉDÒ&ª*C¬IKUÁ¨¹ÐíõÆóCä2qÁû8kLà¼WèQÖ z¿qÈ+5 \Ñä¯ñüsFfÿ·ØÅñM´°ãTÉødyÞ£E¶O¬+ß[æm÷Î4#´"o÷?}Î"ß¯þð|Úlq?ÝlÛÄôFÆ÷±sã=¶Æ<8Ä;8
ÆÛA._7 ÃvkK¸ýuð@°o®°»çL$¸FáÊóg>ÝGc+qPôø5ZDÍ¯7Ø~tø1Xà×ßWÔ9É-ÌnæØðÍ¼´aëØ©Ò9>tmØyë5v­ÛmÚx.}{Ì;×!tg>~q®<N6ÄµÀÃ$ øáÏßp]CûÈXÛo±ÿDZîáÏïpáâ"¼vCç»ßÈ3hzÞ
Ìá»?ÓûBt"0Ã/òMÒRsïÅu<ÜÂÝÎ¦©Iû·ÀO¤Ã½¿´ì°HÛ­Ým£Ov'åòQØÊ^Aðù¤»¹òÁXÎ¹Ä¹¦ ¶èë½o¯±ÿv½©ýï-ôöøÞíÃük§æÞ÷þ¬òÆÂÏ{6-Ärí!7^ËIUâ»æ»(¤ü¬wµõaCLLaØ
Bê×©oI"¦¨bïËV[H!·¨\Ø-lïýX>¾ïùúÂ¿ rÚTéä¥!Aw"Äºxë¦ëî®ñ4¨ê¬Þ]	~O$Dº* AwU@î¦Åý
\sõq6Ã=µ
¢oÈ#6ß@d¸3?q^ICMøN|öüj·£Ö¡²jO
ÒØæßH¶CSßüwß6º¡¶%/¹¡vÅÝ3ña¤~ÚÀæSu&ÿÚBêö¥È¥x¢õLe ÀßÚppÄ$¼Z¥¤!M1©$ÒHfY¶ÆYõ>èN¬®d¾3~à-b¥¢iÆý¿qÖ5êºÅæ
ÚÝÖÅÓ¤PÕ6Þwk·¥¡×*áÎË§Â¯Ñø¶Ù¢t»å7ºûØVÝww37iÁì4+å|ûÑvclÁÎ7ømyAØ%¾ÂMR0ïÄS{L+mkn÷v]bÁsÛªpï96(Í|jW½x® ÄZaÓÔXÒ°v<ûl[-ÉÐÅ3H Æ+â,s;º MÄ9õÃL¶¹gs}0a®ëêXVÞËµ¸I'ÏO»ªB©×Ê¦cDy~Ç0Ã¡¹:NÌ
6H`êóZ2Xþw8±Öm§­c¡M0s`ªjñ#µÉs|vÉbTùjýêÑ¥ÊV«AiÈ-ú,f^Ä/÷]ñ¿+kañw)Éüsq¡M/@îZZ%D)mS×s²Ä±÷þt(.ß|QÕZ³Æ»U·×û!È)_[ÝbÄlwémp¸¢TÇ}¡Cøt9Ã÷¶,º½îºGsÓêF¼¹ã5+¾5VüÅ þõ¼§ôk;-dÞ-; wåX+³¬nR¢Éç20Çù[w®óvÞ[bb¶ÜxmjîÅåb"iréÃïÎ{`$_f+ÃKcáØC gìD¤Ü!&ívÔ+E.Í
ZÝþ¸oü=Ë¨üæVÛ|¥is á³ç½$¤ªKØÖøÖy®sUDç!<þBQæë
zç(Ãn_uw\ïÅ-È¥­ª«ý¹"`Hz&6(¦ÑvH ERæÞvôòî1ôò|àÐÀc$Ê å1®lË"n\yè+|÷5:¡¿ò¸,Ä°$
èïdä:QåI¡ <óË{Ôäk¾$_klô{Ïñ
gSÃd¤ÄF¡·_{ê['ÕÖÆ¦w.úÍs{ù+@é\#_ôÃöäAlj÷ÝÝdU²*âÝsiOn#s¤@tAm¥ÙSÁÿkáYøí¿yÆXf¸¯!æËy{<¥K¹Æ¢2¸t-TYH²ÿ-dùKüßÖ£Àü£È#NàrYè¢²¸s'" B¬z/]`¸ïøã*k²Æ¯7Ä}WÙ¥ïüüT¶¢å£Û@$Æà+®FX[÷Øç9ïØwÖ±X^@l
_Ê<NÌö²!ä/U.øyøç÷ø×Rñ$PäX' Îf×ô«to\>WøD+
E© s&ÊÆý¶~«Ðµ×ìSä«[0µwÞÕ;gë!®÷bhÔÝ¹÷5K5M1PïÈºU¡ªª®`b"}Ú£¨RåJ«)(Wúö¨*;WI¤g1-!¯F)DÅqìyåéYq+.@z@T@6»Äã]¦»î®ßIÌÏOMBüê¹Þú­vj"ã¯¶oË7û¼l<~[ã"a¢.u2%¬LI³Æci­Dð@'ê`¨êºü¥NÝ»0¬ ØPJúr<X­¤)Ë¡¤þ%º6h¡Ñµg CüõgÎ{&ÉP¶4i±"iI¤ÉH!a(¦#w|°kg§9ý#qþ/ûC¼
Í{ ìàäíÅó-)¡ÎëÆUå	Vå¯«uë¢kWz¿¾OíW$©ìMg($XT 7DJ¼ýìmm§gCÈ=(¥pÊcvbßS}-^ ÛH¡(ÇîÐsÓ)¿ÇÀ) ;G¶=¶Þ¹`e]ð?¢Ûª¶We|ú æU&`*¦TÄRÃZþ§¬Ø2L5O¡×®¨Päxê(ûÖÈÄ`4P/ü×ðRfó©¤/G6
$}~1¦ó}¦ÎåÉ4z¶Æí)/â
VÞKÀ÷ùDôB/*"Ý2³*ò¨D¦[P@´*c!«Ê²Àêô ÷m0&IbèêSö¢$ÑïÓÓS
ëPë,¾çÆd!07§°ÝinÃ(ÖUÞÓc«3vÚX±ÛbtâÕ7î»løÅ»JH¤Ne[¥QÃüÄ3SñJ&	0¥Ì¤¦;·2öôaÛök¡Lµ
G	1¶ÀaxøÙÀ¡ºu´iÍ1]jjòm578ÀþÂ+¸L9Û
¨Öåöö³ÜþYnÏrûöâÌªÒ¢ÎÝÂ1f¿Ó;ÞêëîL+H n}Í_¥ôÙPr
²¹Th|ä`¢öH6X~`½s-¡2g)¡Ðz[éíd2ÈêØ¦¢Ij	k.Éª,«¦2
l!a©`c¤kCi2[¦5	Ë4bÊã¥¼ÔºJõ¹Pzà*'T°]N«®Wxû¹«ªÁ*ÒäeèòH­âs`\0pÒÆ´`ÄB/+â¢0LÌ(÷¨Ðîy{·;}âThû&G 4
&(& X°­ò<~5 zD
³@æÑÂCÎÙÇó6ÇPâùÂ!iÔH+²ÊüJÕÔ+IêCðàUÒõáLºÇêtv5Ö§êW­#ËÆæV-¡:Öd÷Êmâ¹/ÉIÓN¥ ?hYÌØ9@FqìÈw³#Ø>£¾yò©r<²ç¬?º
åîüHs"¿bsdÓ×qòÛÄDWUÃ²4ÉÂò`Húd¤J&GÃ±©ÃÅºjF	ã¥	O¯¢KØR-æxDÆòx<~Æ
Ë%cXêW6(ý>M·ô£ì(ÿ6ï¶þSÞ[£	¬xpD"°ÇËõÄ¡ÞÖÙeì5Ôà:È*ÿÝÁáxzh:ID  Ø¢`J
hq×¨»FDÍÝn8ØÏèèÑQùð>fd	Vld+%ü4?pUF Ç¨9	A ãË·jÙ~pVdBÈ¼b¡¤dPzúéÆùÔôx·ç)?ÝÎÝÿNfh©×Ðµ´­>Z¡s¶vt[ãÊN`gpà÷ã³¾gnünÛ\þix§1¼Ò³ÌâvAª<¥Uú)lb÷i[§±­ÒÄÌ¶j*Ûª^ßÏº*=¶®<Bþ´®£[W}B BU1°b(ëR(C?-íØÆ;J|"PLì,!sßcK+ ?íì4vVpD«UC;hÂYÓgaSûL8Oik	çH´ÈZ1¸C&MÝ¶¹ÏóäÇO8G¢íÊáNn?Mì3á<mñÎðÂ@n[L8¹=¶®ÏótÖUpÒ
5-
ì°	g]Íì3á<Åv@îÕYÌÊV(DIÐóN8æ.9ÙÞÈéÁû¿]÷ éÅÀm¾·Õxêé·c¿]Xº£éF¤^#éÔ@WâË\Nü64ç56rj.µÄÐCEë\xtwSóÕ
ç#oÿ*ßÁ-RaôLÃ\"Ò¨ø
Ãk~çwì\b$cÙ¤53á\ë¹r!FcIti2gÒàB¦ùHr(èû³J¸ð~lÐíLm"¥¥µÕÈz ÝU±;áRø	TÈ½ÕiM¤>ÊJ¨ J&ß,âj¸}¨ü+`DÊ±`Øy(&S'³Ó¿½ãòM&ÔäÄ¶Ûr÷xº{ßü\s°?ÁÝ|Ï)ÓH.	KÉÅÛ\)½ú×û÷WÖ®®7«þy¶}£,ÓHFVÐUz(9®x½RSüy4Ä¿±iI$7+h)ÛDwx%Õu\HQ%ðO¤,îµLY"édQYéÔUÓq1eÁ]YÛ÷O3õ&¾%ìÎw¾*¼>DxÕx6»ìD0ëÍ©! ÏÙÞAÌuGÇÍþ	|KÓåLW©nYWì2íÃªj»Ûâ*öñ+j×¥ðL[)naÍ.#QÙîìÐ[
Iy´K¬ZÍ	æàLs	½£¨­¦ë:+¢å+uæ%=	Ö
T²«ÃÛõÝ9ñÞiR¯5K¡ós½ÇRì"Ï9¢
áª%oÑíÑ@°>FæÈ4<4¤É(©ËCbb"~°#*Æx,0´$º!iÆPtc HIð`8(þ<¢¬z¹²]²ð±ÐµÓò{nJ U(4DÀãyú"pr/uéP
] m,Âv;\lú! (­>êIX}ØZ:¤íàg'´tÎC¶hf½.PØóªbg}=ÀçÞNîÅvÀxénâ½ÉmØèMJ-?ÂÛ´_ñõõ¥AD¯e`óþÖöÈã+Ý
cåËY'1_
ìv?këÞ»ÛïöÂÝòÄIî#'S¬µ)¼ÿn½þíXÿªvéÓKÇKÞÝÍ $"GJ`¨
,@ù·Gw=W6&0)À»Î4-q;~yçÛ¶gó¥±
Ä	4©Xìª|N­ã¸;Øù_ãü:¢dèeGE|>|zh Ê¢5î
UÒë½ë~½óÆÑLuÊ(4~{ej{pjÂMR/3ZúþX.¢}G)Ï³#ããõáôî=ö³qyÒQdòxNJñMö±ÍíÔçlC^êë>2ªW)²@Âó5âÚ3ÐCZN/>Àyh÷cCØ`>ýáùå;Y ÈÏáámcÝã"
ló}ùøÂú{ß³"3DsûÙÃÛ»WèFî*ÓÓ'²ß§éÞÄZx!v8!¢æ4b@3zÎNqÔ³>½X gÏ¶U¹ZcKÀÆg¢Øðã¸¢{h¶ò)®ÅÙ±sHWÑíB]óùÝ¸UÏ÷ØôÒwIé³×j±ÿX©²+@<ÙS/ÛÓÝr	â­Ãñã+ìjí¥Èþô$_§¢ =¶ìH¸¼B';v·cmêÀÉKS?|À2÷ÌÁÄä	åØV×o³>qö`û¶×°n®(ühtçÂymÎ¢y±9Gìé¯ÊÇXÊE²Ø4¤ÉH¶¤±iN4ÅÒðDl¡\3ÆÖp©$¢.UI[²d`c nL
­ÑçByÙ$aV½.×ðÂPËM!þ<ÿíeE|®2n/hÑËT|Ø ±tuç¢?\/½Z«±qumé¥Ø¡×xA?·w®%u©­«ÉE hOëau7íÊñ«¬OìWg>DÆÚhÌ³UûPBz;úÏñÔ9â^az+lAÑ~­[Ë,@ÑM ¦¼ÍÕÔqJãV¢ÒE:¡Ï;Ñ:qT[AFó¨ËÁdlLtÉ°#I[XÂ
6!ûÑ¾y¢ðrjOyMö}~ÁgZs¤³DNn°A*&$»×rhbým^/ÚÃ|Ø,]¶Ý¾ZQÒ .z)uÝ	v¥Èÿ®Î£¨ù¨kMà¹Äò#_AÆìbÛá-C©K
9ä¾SÁEs.ÛSÏÉÊ3ÇsËÛoU`Á!Æ¢¸qðF'/z,ü(o M¨Ì$yEË¶
 [Ûô½À[ô 
0
ºìû%HÊ=øË.5)ª@|þ}¦"|.Ð6·w¨\¨+A >OÀ¡"{e¾N$ìáñ¼SgÑ¤:å¿±iöök¥õ»%Öß§TÙe#ä l¶NÖîägM7â© ù¢Þú³¨ªÛzL<	ý ù°ÕÙ|tAE
.ìÛÙ&MÌYãUü	ñBI¾§ú¼·
ÃÍ~?ù98£EÍ×µ³ôü5á£ÿØvO0·ôUYõ×$Äà*pßô|"m|hï6µÜý ç`þài¤áõa\FRÈ-41Ï|ÊúLÓaè¼c/cz_@ 9Í³AL°JÿÏÛ
klïn,Ùô^hîhOP6ïÄËì§R
úÊÒgmiÉ
³É[zÇèfÒXgQÀ¸ò~f}Ï°rCkñüä(ë½¡o	ùì¢ëaÑ7
6Æ¥èCÿþ_@ä2èËZ_Væ0g[¨Ùß}L«Ü²/ tîæä³Å?+?äðB·gmÁ¹õ}ËübGã{"ê+ü[]NÁñ 
Û©­/6}m:[lÏÇiVO¥{xøÓ©Ã¥5ªM×$»«í|Ã¨d}§JP
µÈ [rº¶ðvXÙ>%KHÍk?Û­íÝÇüb'==z>=Sd¯¾$ÔóÐàÑ£{:PËL×õÂØ¯dß_(ýìKTóg±²$êD`a6QÂ88CDÞø¾ó|u28Ax³q(Ní@fú
üfC¼`"CÑàî#PËYà%­½l®rbgü¾%S~uÉ·åÑîÂ-¶ñQüïa×Z§d÷p;yÁ«u¯a$N¹¶hWD¦òìÅÛV`^z®è4îßc?tO=ï9ï.%ÁfW< Ö,ÔRÙT¶ÁÓòÛ%áJ5wk½{ÎÜsE³ñ:wÙ^·ÐSÓ¤¡v\ãêåLf[hú±R!æP
¿DL¥qfV{§ðÂ@;¶_ÌgÓ ðL>oÕ
´R
õ1«ÞïT|ÌGÂ ðöhËÛ	à!oAHÖ×iÐ
sNÈÌåD[ÕÑ×(¼¾U2])pdÓRUTd¶¬xOÛMàû9¬F&odI|Ê±;%½]±ôLÞ®XzÌHW¬¶¾%whgÍÑt{·Y«êÎ¤¨®»Õ}À}ÀÚ>àap²®ëNÑ×5½ÏÕÁþòì3*æ½3z§Av}¶²NîDÆýÌû¾~)Ô0°ö×ÿ  ÿÿ PK     ! ¥´T  @   ( customXml/itemProps3.xml ¢$ (                                   ´]oÓ0ïøï»®³¶ÓÒ©j4I´[×9n-b;²O(ñßq²Þ
:\EÇÎyÞ÷|øêúkÏ
¾&¼õû|¼{Cç¤H¨|£Úà¡&>ëåëWWMºlª!Â
+òÍßMM¾ñ­ªõÎSA¥äº¨8§r*ç³¹Ýòõê;)²´ÏTbwÉXÒp*¡/MNaãc¬MÐ½Lp~ÁtåÝ½kÉrðóýLzÖúh¨8«cHÁ`©;	< ªc:xÌrw_; ìQ»h!g+Ähw=B:§q<ËãtìG&NØýíÛã¿ÿÅÜ/¡P5\c¨Ô° r!ÝUJR#dÓ
Rúï5§Yß*¯ö0NóÎ6é·dëMè{§"zë<åÚYÏNéOÙåõ@_ÐÐ¿ëc;ÒÍ KNlRNØ$"DÎf<ß$·=zÕ²°kûéU
ñ£W¿ü  ÿÿ PK     ! ¿  )   docProps/core.xml ¢(                                                                                                                                                                                                                                                                  KNÃ0÷HÜ!ò>uWñ\ ±b?dO	9gáb8iR`ÁÎ3ÿ?Ç3.ßU½óÒè1I	@s#¤ÉtrÈ#ÓUFÃ4àÉq¹»SpsãàÆ%ø(´Ï¹DSêù(æÁ¡ølbB7£ñ9Íd*@&2ÚcÛÉ
)x´Wu Á)T @£§é ¥/SþÏNùæTZ×bï~÷²7Öu=¨5ôÒë«»î©±Ôí¬8²<G'úó£"Ñ9Æ·[ÆcÃàtÈ]LO
Ú×´Õ~ñô
Ë.ÝáÌ04®<6WLwú:×®eMmð¡r+
6;i1,{ÉÝJwÅ<^í?K§ÍæßRëvð&ÛSf£ÕmÂôòå¬×Êýðì|rIÊ,Éöâd§Gtò$}l;Ûªß Õª÷òQö¸týó ×,'õ#ÚúÜå   ÿÿ PK     ! ØsP©  #   docProps/app.xml ¢(                                                                                                                                                                                                                                                                  TÍn1¾Wê;X{ja!A(Bf#D%R	(ô<Y`Õk¯lC~Þ¦ê¡§ú¼XÇ^XfU)E¾ùvvügøÙS¡Ø­FN«0Ô¹R/É|vyt0çAPFã yFe?ð©5%Z/Ñ1J¡Ý Yy_öÓÔå+,Àµ(¬)²0¶ O¦]¦f±9|] öéq»ÝKñÉ£(Ê:aReìoüÿ&&õ¹ûÙsIù2>Ã¢Tà1Ê0ôur©ÙÔ¢7<­	|f<¨,0ë´É_[ü«±Âe½cVËRÉ<Ien3Ï&±65h§FjÏÓC"	
Öe<G6,w¾íÏíÃ40
Ø§nÿä3OàS°°´P®\Ö¡L~§$-ëòtøñôG© ¿B ÞEÉýÊæãñHÉ2ößå pDfP)uíàWá¶LAZbn|¹79ùB÷¥°pú0H6`%hT´ÊXÎÛìÒhª­p<­ýÒ±ìf'@àÄ*õÞºóÔÛ_~­ËE1ßñ¢nó¢õ$üZéô
ÝdA½÷
Â
k¨d¯ÊR~uX^F ä±0Ýà#»5èf	ÌÙA#e¨·ßtaÙ9J±[¤5³¶¯&ßÅ|ØøôµöÖu5*`(§súFîÄËB¾ìÆ»8úc,¶¿IÆg.¨TË°OöÅÑÏÆµØ5­ª2ì«PæöîõWkÆ a!P£)JÐÏäªÑ©¿¹y93ça
íæìµß­À¢ ]WÏaíàWÔi«´½D±ç¼
Íu_íü¬ÓkµéÔÞvÎ~g   ÿÿ PK     ! ýIü  {   docProps/custom.xml ¢(                                                                                                                                                                                                                                                                  ¼Mo0ïúÏ!,«]¢CºR«D
íµ²ÀK¬mï6Ûªÿ½Þl Í¡6c½Ï¼g¼ºzè;ë@ÕÀ_#÷Ey-ÆÛ5ú\v¬AÞNpºFG: «ôý»Õ­*Íè`	>¬Ñ½Öré8C}O{2\47P=Ñf©ZGìv¬¦XÔûríx ¡Sï-z[Nrè¬·<èlD}ªnøR¥ÑKWOâGk×kÖ¬ÑOäØ^ä¶nf'$²!ð2//MñYòô³,NzcýkE{ÙM·Øhô²ß­Ò*Â8ÍËWÎsfåäÿ¬a1Ö°å*Nº´'c¢Þ ëØ\.×§ýÜ6/¸ð`\»f×=¢hAàü<N G^ÅIi>@A³2ÇdEìgpSä.v7~~^¼`ôPR¢÷Î³sáHý(jÒ±Dþè»r¢Ogô°v&·É½Q
UgÓ8B xDå«á\yXÓPqÐ
uÇ¬ëNs '-½¦üNCýDf~z6l×CNãof«ÓÈÛHÙ±ú±æàN3Ïtî'¢¾Q}­Ä^VÌÜ/ðzyúh¹càÁââo¥9Ï·fú  ÿÿ PK     ! t?9zÂ   (   customXml/_rels/item1.xml.rels ¢(                                                                                                                                                                                                                                                                  Ï±Ã0àýàÞÁhoÜPÊ§K)t;JºGILcËXjiß¾æ¦+tè(ÿûQ»½E]1³§h ©jP
>N~ûýjÅÆÁ.ÑÀ¶ÝçG{ÄÅJ	ñì«¢D60¤o­ÙÍ,W0ËH9X)ct²îl'Ô_u½Öù¿Ý©|Pý=á;6£w¸#w	åEv
§°üd*ª·yB1àÃßª©	ºkõÓÝ  ÿÿ PK     ! \'"Â   (   customXml/_rels/item2.xml.rels ¢(                                                                                                                                                                                                                                                                  ÏÁÂ0àûïænS=,M½,7.x
é´
ÛdBf}{§<xþïgÝ-Ìê=E«ªÑQïãhà·Û/· XlìíL
Üa×.¾ÎVJ'X%²I$}kÍnÂ`¹¢±\ÊÁJó¨uvD½®ëÎÿ
h_Luè
äC¿ÕÝ~bÓ0x?ä.£¼©ÐîÂBáæc¦Ò¨:G^0<Wëª ÛF¿ü×>   ÿÿ PK     ! {ó£Ã   (   customXml/_rels/item3.xml.rels ¢(                                                                                                                                                                                                                                                                  ÏÁÂ0àûïænSYzYo"]ðÒi¶ÉÌ(úö=­àÁãÌð?ÓìnaVWÌì)XU5(zG?Ý~¹Åbcoghà»vñÑp¶RB<ùÄª(
L"éKkvË%å2PVÊG¬ûµ#êu]êüßöÉTÞ@>ô+PÝ=á;6
wøMî0Ê
í.,Îa>f*ª³yD1àÃßjStÛè§ÿÚ   ÿÿ PK-      ! »Õeé
  
                   [Content_Types].xmlPK-      ! G¿Ð  u               F  _rels/.relsPK-      ! è  Y                 ppt/presentation.xmlPK-      ! <Â%ÝÀ   7                S  ppt/slides/_rels/slide4.xml.relsPK-      ! #®÷×   ¾                Q  ppt/slides/_rels/slide2.xml.relsPK-      ! c\#´À   7                f
  ppt/slides/_rels/slide1.xml.relsPK-      ! 'RQ  ¤               d  ppt/_rels/presentation.xml.relsPK-      ! ;ßaÞ   E                ú  ppt/slides/_rels/slide3.xml.relsPK-      ! ñÛÆ  
                 ppt/slides/slide1.xmlPK-      ! ,!Üë  ¡                 ppt/slides/slide2.xmlPK-      ! Çh"  û               -  ppt/slides/slide3.xmlPK-      ! ¾ÿÒw  
                  ppt/slides/slide4.xmlPK-      ! ÕÑñ¼   7  ,             ,$  ppt/slideLayouts/_rels/slideLayout6.xml.relsPK-      ! ÕÑñ¼   7  ,             2%  ppt/slideLayouts/_rels/slideLayout7.xml.relsPK-      ! ÕÑñ¼   7  ,             8&  ppt/slideLayouts/_rels/slideLayout8.xml.relsPK-      ! ÕÑñ¼   7  ,             >'  ppt/slideLayouts/_rels/slideLayout9.xml.relsPK-      ! ÕÑñ¼   7  -             D(  ppt/slideLayouts/_rels/slideLayout10.xml.relsPK-      ! ÕÑñ¼   7  -             K)  ppt/slideLayouts/_rels/slideLayout11.xml.relsPK-      ! ÕÑñ¼   7  ,             R*  ppt/slideLayouts/_rels/slideLayout5.xml.relsPK-      ! ûúà  "  !             X+  ppt/slideLayouts/slideLayout1.xmlPK-      ! ­9+w  d  !             ¢1  ppt/slideLayouts/slideLayout2.xmlPK-      ! ­>Çë8     !             X5  ppt/slideLayouts/slideLayout3.xmlPK-      ! ÂçÆp    !             Ï9  ppt/slideLayouts/slideLayout4.xmlPK-      ! 0[Ï  6  !             ">  ppt/slideLayouts/slideLayout5.xmlPK-      ! ]­`Æ  j  !             dC  ppt/slideLayouts/slideLayout7.xmlPK-      ! ³³´<¾    !             iF  ppt/slideLayouts/slideLayout8.xmlPK-      ! =5ã  z  !             fK  ppt/slideLayouts/slideLayout9.xmlPK-      ! DdÆÝ    "             @P  ppt/slideLayouts/slideLayout10.xmlPK-      ! ÔÏÊ  {  "             T  ppt/slideLayouts/slideLayout11.xmlPK-      !  ±Eô	  ú`  !             X  ppt/slideMasters/slideMaster1.xmlPK-      ! i¢_!  Ç  ,             Pb  ppt/slideMasters/_rels/slideMaster1.xml.relsPK-      ! ÕÑñ¼   7  ,             ¯c  ppt/slideLayouts/_rels/slideLayout1.xml.relsPK-      ! ÕÑñ¼   7  ,             µd  ppt/slideLayouts/_rels/slideLayout2.xml.relsPK-      ! ÕÑñ¼   7  ,             »e  ppt/slideLayouts/_rels/slideLayout3.xml.relsPK-      ! ÕÑñ¼   7  ,             Áf  ppt/slideLayouts/_rels/slideLayout4.xml.relsPK-      ! ûÕ  ³  !             Çg  ppt/slideLayouts/slideLayout6.xmlPK-      !  °zñ  à  !             k  ppt/notesMasters/notesMaster1.xmlPK-      ! Ôaò×  Ä               Dq  ppt/theme/theme1.xmlPK-      ! ´ÏX¹   $  ,             Mv  ppt/notesMasters/_rels/notesMaster1.xml.relsPK- 
       ! ÛO¿eN  eN               Pw  ppt/media/image3.pngPK- 
       ! òåW'  W'               çÅ  docProps/thumbnail.jpegPK- 
       ! ´®~  ~               sí  ppt/media/image1.pngPK-      ! ãípÍ  Ñ                #y ppt/theme/theme2.xmlPK- 
       ! Y¶¦9  9               " ppt/media/image2.pngPK-      ! ´Êµz                 ó¹ ppt/viewProps.xmlPK-      ! tµ#                 » ppt/presProps.xmlPK-      ! Øý¬   ¶                î½ ppt/tableStyles.xmlPK-      ! U0R  Ú!               Ë¾ customXml/item1.xmlPK-      ! Ü="  æ               vÅ customXml/itemProps1.xmlPK-      ! =|    Õ                öÆ customXml/item2.xmlPK-      ! :ªÅ-ó   O               æÇ customXml/itemProps2.xmlPK-      ! h`NË  çâ               7É customXml/item3.xmlPK-      ! ¥´T  @               [ä customXml/itemProps3.xmlPK-      ! ¿  )               Qæ docProps/core.xmlPK-      ! ØsP©  #               "é docProps/app.xmlPK-      ! ýIü  {               í docProps/custom.xmlPK-      ! t?9zÂ   (               6ð customXml/_rels/item1.xml.relsPK-      ! \'"Â   (               <ò customXml/_rels/item2.xml.relsPK-      ! {ó£Ã   (               Bô customXml/_rels/item3.xml.relsPK    ; ; k  Iö   


=== DIRETÓRIO: Sprints\sprint 10\data ===

--- ARQUIVO: Sprints\sprint 10\px_to_pdf.py ---
# convert_ipynb_to_pdf.py
# Script para converter um notebook Jupyter (.ipynb) em PDF,
# substituindo gráficos interativos do Plotly por imagens estáticas.

import os
import json
import nbformat
from nbconvert import PDFExporter
from nbconvert.preprocessors import Preprocessor
import plotly.io as pio

class PlotlyStaticPreprocessor(Preprocessor):
    """
    Pré-processador que converte saídas interativas do Plotly em imagens PNG estáticas
    usando o engine "kaleido".
    """
    def preprocess_cell(self, cell, resources, index):
        if cell.cell_type == 'code' and 'outputs' in cell:
            new_outputs = []
            for output in cell.outputs:
                data = getattr(output, 'data', {})
                if 'application/vnd.plotly.v1+json' in data:
                    fig_dict = data['application/vnd.plotly.v1+json']
                    fig = pio.from_json(json.dumps(fig_dict))
                    img_bytes = pio.to_image(fig, format='png', engine='kaleido')
                    new_output = nbformat.v4.new_output(
                        output_type='display_data',
                        data={'image/png': img_bytes},
                        metadata={}
                    )
                    new_outputs.append(new_output)
                else:
                    new_outputs.append(output)
            cell.outputs = new_outputs
        return cell, resources


def convert_notebook_to_pdf(input_nb: str, output_pdf: str):
    """
    Lê o notebook, aplica o pré-processador e exporta para PDF.
    """
    nb = nbformat.read(input_nb, as_version=4)
    exporter = PDFExporter()
    exporter.register_preprocessor(PlotlyStaticPreprocessor, enabled=True)
    pdf_bytes, _ = exporter.from_notebook_node(nb)
    with open(output_pdf, 'wb') as f:
        f.write(pdf_bytes)


if __name__ == '__main__':
    # Caminhos fixos conforme solicitado
    input_nb = r'C:\Users\jonat\Documents\GitHub\Sprints\sprint 10\sprint10.ipynb'
    output_dir = r'C:\Users\jonat\Documents\GitHub\Sprints\sprint 10'

    # Garante que o diretório de saída exista
    os.makedirs(output_dir, exist_ok=True)

    # Define nome do PDF com mesmo nome do notebook
    base_name = os.path.splitext(os.path.basename(input_nb))[0]
    output_pdf = os.path.join(output_dir, f'{base_name}.pdf')

    # Converte e informa ao usuário
    convert_notebook_to_pdf(input_nb, output_pdf)
    print(f'PDF gerado em: {output_pdf}')

# Dependências:
# pip install nbformat nbconvert plotly kaleido



--- ARQUIVO: Sprints\sprint 10\sprint10.ipynb (sem output) ---
{
  "cells": [
    {
      "cell_type": "markdown",
      "id": "3352588e",
      "metadata": {},
      "source": [
        "## Introdução\n",
        "\n",
        "Este notebook explora um conjunto de dados de restaurantes nos Estados Unidos, com o objetivo de analisar diversas características dos estabelecimentos. Iniciamos com a [**Tabela rest_data:**](#tabela-rest_data) para entender as colunas e os dados disponíveis. Em seguida, tratamos os [**dados nulos**](#dados-nulos) existentes na coluna 'chain'. A análise exploratória começa com a visualização dos [**Tipos de estabelecimentos**](#tipos-de-estabelecimentos) presentes no dataset e a proporção de [**Estabelecimento de rede**](#estabelecimento-de-rede). Investigamos também o [**Tipo de estabelecimento das reds**](#tipo-de-estabelecimento-das-reds) para entender a composição das redes de restaurantes. Analisamos a [**médiana da quantidade de cadeiras para cada chain**](#médiana-da-quantidade-de-cadeiras-para-cada-chain) e exploramos a relação entre [**Nº de cadeiras e se é rede.**](#n-de-cadeiras-e-se-é-rede) para identificar possíveis padrões.  Aprofundamos a análise no [**Cadeiras no restaurant**](#cadeiras-no-restaurant) para comparar a média de cadeiras por tipo de estabelecimento.  Exploramos a distribuição dos restaurantes por localização, identificando as [**Ruas com mais estabelecimentos**](#ruas-com-mais-estabelecimentos) e as [**Ruas com apenas 1 estabelecimento**](#ruas-com-apenas-1-estabelecimento). Por fim, investigamos a relação entre [**acentos e estabelecimentos por rua**](#acentos-e-estabelecimentos-por-rua) para entender a densidade de restaurantes e sua capacidade. E uma [**Conclusão**](#Conclusão)\n",
        "\n",
        "Presentation: <[link para um armazenamento em nuvem](https://docs.google.com/presentation/d/1Zrejz8YR0GdSlxb1B1dcN_zEUMPnMeTaDhq6OkJgqVM/edit?usp=sharing)>"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "id": "68618169",
      "metadata": {},
      "outputs": [],
      "source": [
        "import pandas as pd\n",
        "import numpy as np\n",
        "import matplotlib.pyplot as plt\n",
        "import seaborn as sns\n",
        "from scipy import stats as st\n",
        "import plotly.express as px\n",
        "import os"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "id": "8afb6b81",
      "metadata": {},
      "outputs": [],
      "source": [
        "local = r'C:\\Users\\jonat\\Documents\\GitHub\\Sprints\\sprint 10'\n",
        "caminho_arquivo = os.path.join(local, 'data', 'rest_data_us_upd.csv')\n",
        "\n",
        "df = pd.read_csv(caminho_arquivo)\n",
        "df.head(5)"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "id": "3a1eaec2",
      "metadata": {},
      "outputs": [],
      "source": [
        "df.info()"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "id": "806ab5eb",
      "metadata": {},
      "outputs": [],
      "source": [
        "df['number'] = df['number'].astype(np.int8)\n",
        "df[\"chain\"] = df[\"chain\"].astype(\"boolean\")\n",
        "df[\"object_type\"] = df[\"object_type\"].astype(\"category\")\n",
        "df['id'] = df['id'].astype(np.int16)\n",
        "df.info()"
      ]
    },
    {
      "cell_type": "markdown",
      "id": "cc0646c8",
      "metadata": {},
      "source": [
        "Consegui reduzir 200kb de informação somente mudando os tipos dos dados para os mais adequados. "
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "id": "140116ae",
      "metadata": {},
      "outputs": [],
      "source": [
        "df"
      ]
    },
    {
      "cell_type": "markdown",
      "id": "afe169d6",
      "metadata": {},
      "source": [
        "# Tabela rest_data:\n",
        "\n",
        "- object_name — nome de estabelecimento\n",
        "- chain — estabelecimento de rede (TRUE/FALSE)\n",
        "- object_type — tipo de estabelecimento\n",
        "- address — endereço\n",
        "- number — número de assentos"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "id": "666c5f67",
      "metadata": {},
      "outputs": [],
      "source": [
        "df[\"chain\"] = df[\"chain\"].fillna(False).astype(\"boolean\")"
      ]
    },
    {
      "cell_type": "markdown",
      "id": "533c4941",
      "metadata": {},
      "source": [
        "### dados nulos\n",
        "Existem dados na coluna 'chain' que estão nulos, eu os transformei em false, pois parece falso por omissão. \n"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "id": "aae6eba1",
      "metadata": {},
      "outputs": [],
      "source": [
        "df[df.duplicated(subset=['object_name', 'address'], keep=False)]"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "id": "4891d84f",
      "metadata": {},
      "outputs": [],
      "source": [
        "df = df[df['id'] != 11859]  # Remove a linha com id 11859\n",
        "df = df.reset_index(drop=True)  # Reseta o índice e remove o antigo\n",
        "df"
      ]
    },
    {
      "cell_type": "markdown",
      "id": "10c3fee2",
      "metadata": {},
      "source": [
        "A linha 700 WORLD WAY 7C estava duplicada apaguei a que tinha menos cadeiras. "
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "id": "5dda41a5",
      "metadata": {},
      "outputs": [],
      "source": [
        "df.info()"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "id": "00012683",
      "metadata": {},
      "outputs": [],
      "source": [
        "px.histogram(df, x='object_type',template='plotly_dark')"
      ]
    },
    {
      "cell_type": "markdown",
      "id": "dbe87589",
      "metadata": {},
      "source": [
        "### Tipos de estabelecimentos\n",
        "A maior parte dos estabelecimentos são Restaurant, e poucos são delivery."
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "id": "f9d0690c",
      "metadata": {},
      "outputs": [],
      "source": [
        "px.histogram(df, x='chain',template='plotly_dark')"
      ]
    },
    {
      "cell_type": "markdown",
      "id": "25f6823f",
      "metadata": {},
      "source": [
        "# Estabelecimento de rede. \n",
        "Uma boa quantidade dos estabelescimentos não não são de rede. "
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "id": "1deab408",
      "metadata": {},
      "outputs": [],
      "source": [
        "px.histogram(df, x='chain',template='plotly_dark', color='object_type')"
      ]
    },
    {
      "cell_type": "markdown",
      "id": "e7c0e9d1",
      "metadata": {},
      "source": [
        "# Tipo de estabelecimento das reds\n",
        "O tipo mais comum dos de red são os restaurants. "
      ]
    },
    {
      "cell_type": "markdown",
      "id": "e9ef3b84",
      "metadata": {},
      "source": [
        "# médiana da quantidade de cadeiras para cada chain "
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "id": "e3b25817",
      "metadata": {},
      "outputs": [],
      "source": [
        "#  O que caracteriza redes: muitos estabelecimentos com um pequeno número de assentos ou poucos estabelecimentos com muitos assentos?\n",
        "df.groupby('chain')['number'].describe()"
      ]
    },
    {
      "cell_type": "markdown",
      "id": "5b3b63a2",
      "metadata": {},
      "source": [
        "# Nº de cadeiras e se é rede. \n",
        "Olhando pela média existe uma pequena correlação com um numero maior de cadeiras nas redes, porém a mediana revela que a diferença é muito pouca, porém o desvio padrão dos que não são redes é maior. \n",
        "\n",
        "Não se pode caracterizar redes ou não redes pelo numero de acentos com muita certeza. "
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "id": "6b2a1aac",
      "metadata": {},
      "outputs": [],
      "source": [
        "df_grouped = df.groupby('object_type', as_index=False)['number'].mean()\n",
        "fig = px.bar(\n",
        "    df_grouped,\n",
        "    x='object_type',\n",
        "    y='number',\n",
        "    title='Média de Cadeiras por Tipo de Estabelecimento',\n",
        "    labels={'object_type': 'Tipo de Estabelecimento', 'number': 'Média de Cadeiras'},\n",
        "    template='plotly_dark'  # Fundo preto\n",
        ")\n",
        "\n",
        "fig.show()\n"
      ]
    },
    {
      "cell_type": "markdown",
      "id": "bc509bd5",
      "metadata": {},
      "source": [
        "# Cadeiras no restaurant\n",
        "Em media o Bar tem mais cadeiras que outros tipos de restaurantes. "
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "id": "7a810e49",
      "metadata": {},
      "outputs": [],
      "source": [
        "df['rua'] = df['address'].str.extract(r'^\\d+\\s+(.+?)(?:,|$)', expand=False)\n"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "id": "320b3663",
      "metadata": {},
      "outputs": [],
      "source": [
        "f = df.groupby('rua')['object_type'].count()\n",
        "f_df = f.sort_values(ascending=False).head(10).reset_index()\n",
        "f_df.columns = ['rua', 'quantidade']\n",
        "\n",
        "# Criar o gráfico\n",
        "fig = px.bar(f_df, x='rua', y='quantidade', title='Top 10 ruas com mais estabelecimentos',\n",
        "    template='plotly_dark' )\n",
        "fig.show()"
      ]
    },
    {
      "cell_type": "markdown",
      "id": "98c7e015",
      "metadata": {},
      "source": [
        "# Ruas com mais estabelecimentos\n",
        "As ruas com mais estabelecimentos são W SUNSET BLVD e a W PICO BLVD, oque indica que essas ruas são muito movimentadas e longas oque justificaria quase 600 estabelecimentos apenas nas 2 ruas. "
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "id": "330e5d6f",
      "metadata": {},
      "outputs": [],
      "source": [
        "f[f == 1].count()"
      ]
    },
    {
      "cell_type": "markdown",
      "id": "5317d533",
      "metadata": {},
      "source": [
        "# Ruas com apenas 1 estabelecimento\n",
        "Existem 2442 ruas com apenas 1 estabelescimento oque indica uma boa pulverisão do comercio na cidade. "
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "id": "8bfba91b",
      "metadata": {},
      "outputs": [],
      "source": [
        "# Definir oque são muitos restaurantes em 1 rua \n",
        "df_violin = f.reset_index()\n",
        "df_violin.columns = ['rua', 'contagem']\n",
        "\n",
        "# Criar o gráfico violin\n",
        "fig = px.violin(df_violin, y='contagem', box=True, points='all', title='Distribuição de Estabelecimentos por Rua',\n",
        "    template='plotly_dark' )\n",
        "\n",
        "fig.show()"
      ]
    },
    {
      "cell_type": "markdown",
      "id": "3041e41a",
      "metadata": {},
      "source": [
        "Portanto acima de 50 estabelescimentos seria muitos estabelecimentos por rua.  "
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "id": "d2750bce",
      "metadata": {},
      "outputs": [],
      "source": [
        "counts = (\n",
        "    df\n",
        "    .groupby('rua', as_index=False)\n",
        "    .agg(estab_count=('id', 'size'),\n",
        "         total_chairs=('number', 'sum'))\n",
        ")\n",
        "\n",
        "# 2. Filtra só ruas com mais de 50 estabelecimentos\n",
        "top_ruas = counts[counts['estab_count'] > 50]\n",
        "\n",
        "# 3. Cria o scatterplot\n",
        "fig = px.scatter(\n",
        "    top_ruas,\n",
        "    x='estab_count',\n",
        "    y='total_chairs',  # mostra o nome da rua em cada ponto\n",
        "    title='Ruas com >50 Estabelecimentos: nº de estabelecimentos vs total de assentos',\n",
        "    labels={\n",
        "        'estab_count': 'Quantidade de Estabelecimentos',\n",
        "        'total_chairs': 'Total de Assentos'\n",
        "    },\n",
        "    template='plotly_dark'\n",
        ")\n",
        "fig.update_layout(xaxis_tickangle=45)\n",
        "\n",
        "# Ajustes visuais\n",
        "fig.update_traces(textposition='top center', marker=dict(size=12))\n",
        "fig.update_layout(xaxis=dict(dtick=10), width=800, height=500)\n",
        "\n",
        "fig.show()"
      ]
    },
    {
      "cell_type": "markdown",
      "id": "3deb916c",
      "metadata": {},
      "source": [
        "# acentos e estabelecimentos por rua\n",
        "Existe uma correlação boa entre a quantidade de acentos e a quantidade de estabelescimentos por rua. "
      ]
    },
    {
      "cell_type": "markdown",
      "id": "3265fd3e",
      "metadata": {},
      "source": [
        "# Conclusão\n",
        "\n",
        "Em conclusão, a análise dos dados de restaurantes revelou insights importantes sobre o cenário gastronômico nos EUA. Observamos a predominância de restaurantes como tipo de estabelecimento, tanto em redes quanto independentes. Embora redes de restaurantes tendam a ter uma média ligeiramente maior de cadeiras, essa diferença não é drástica, indicando que o número de assentos não é um fator determinante para definir um estabelecimento como parte de uma rede.  Ruas como 'W SUNSET BLVD' e 'W PICO BLVD' se destacam pela alta concentração de restaurantes, refletindo áreas de grande atividade comercial.  A coexistência de muitas ruas com apenas um estabelecimento ao lado de ruas altamente concentradas sugere uma diversidade e pulverização do mercado de restaurantes.  Finalmente, a correlação positiva entre o número de estabelecimentos e o total de assentos em ruas com alta concentração indica que a capacidade de atendimento acompanha a densidade de restaurantes nessas áreas. Estes achados fornecem uma visão geral valiosa do mercado de restaurantes e podem ser úteis para análises mais aprofundadas e tomadas de decisão no setor.\n",
        "Use code with caution.\n",
        "Markdown"
      ]
    }
  ],
  "metadata": {
    "kernelspec": {
      "display_name": "Python 3",
      "language": "python",
      "name": "python3"
    },
    "language_info": {
      "codemirror_mode": {
        "name": "ipython",
        "version": 3
      },
      "file_extension": ".py",
      "mimetype": "text/x-python",
      "name": "python",
      "nbconvert_exporter": "python",
      "pygments_lexer": "ipython3",
      "version": "3.12.5"
    }
  },
  "nbformat": 4,
  "nbformat_minor": 5
}


=== DIRETÓRIO: Sprints\sprint 11 ===


=== DIRETÓRIO: Sprints\sprint 11\data ===

--- ARQUIVO: Sprints\sprint 11\e3e80813-c474-4f51-b738-53523a6e5fdd.ipynb (sem output) ---
{
  "cells": [
    {
      "cell_type": "markdown",
      "id": "5cf3cd85",
      "metadata": {},
      "source": [
        "<div>\n",
        "Olá, Jonathas!\n",
        "\n",
        "Meu nome é Luiz. Fico feliz em revisar seu projeto. Ao longo do texto farei algumas observações sobre melhorias no código e também farei comentários sobre suas percepções sobre o assunto. Estarei aberto a feedbacks e discussões sobre o tema.\n",
        "\n",
        "**Peço que mantenha e não altere os comentários que eu fizer por aqui para que possamos nos localizar posteriormente, ok?**\n",
        "\n",
        "Mais uma coisa, vamos utilizar um código de cores para você entender o meu feedback no seu notebook. Funciona assim:\n",
        "\n",
        "<div class=\"alert alert-block alert-success\">\n",
        "<b> Comentário do revisor: </b> <a class=\"tocSkip\"></a>\n",
        "\n",
        "Sucesso. Tudo foi feito corretamente.\n",
        "</div>\n",
        "\n",
        "<div class=\"alert alert-block alert-warning\">\n",
        "<b>Comentário do revisor: </b> <a class=\"tocSkip\"></a>\n",
        "\n",
        "Alerta não crítico, mas que pode ser corrigido para melhoria geral no seu código/análise.\n",
        "</div>\n",
        "\n",
        "<div class=\"alert alert-block alert-danger\">\n",
        "\n",
        "<b>Comentário do revisor: </b> <a class=\"tocSkip\"></a>\n",
        "    \n",
        "Erro que precisa ser arrumado, caso contrário seu projeto **não** será aceito.\n",
        "</div>\n",
        "\n",
        "Você pode interagir comigo através dessa célula:\n",
        "<div class=\"alert alert-block alert-info\">\n",
        "<b>Resposta do Aluno.</b> <a class=\"tocSkip\"></a>\n",
        "</div>"
      ]
    },
    {
      "cell_type": "markdown",
      "id": "2a93254c",
      "metadata": {},
      "source": [
        "<div class=\"alert alert-block alert-danger\">\n",
        "<b> Comentário geral do revisor v1</b> <a class=\"tocSkip\"></a>\n",
        "    \n",
        "Obrigado por enviar o seu projeto e pelo esforço de chegar até aqui. O seu projeto possui alguns pontos bem interessantes, dos quais eu destaco:\n",
        "    \n",
        "- Código bem simples e estruturado \n",
        "- Comentários sucintos e bem objetivos\n",
        "- Análises bem detalhadas em cada etapa do projeto\n",
        "    \n",
        "Entretanto, deixei alguns comentários em alguns trechos que precisam de ajuste. Peço que trabalhe nesses pontos para avançarmos. \n",
        "\n",
        "<br>\n",
        "    \n",
        "Qualquer dúvida, pode contar comigo.   \n",
        "    \n",
        "    \n",
        "**Até breve!**\n",
        "\n",
        "</div>"
      ]
    },
    {
      "cell_type": "markdown",
      "id": "915ebeac",
      "metadata": {},
      "source": [
        "# Análise de Teste A/B: Impacto da Mudança de Fonte no Funil de Compras\n",
        "\n",
        "## Introdução\n",
        "\n",
        "Este notebook analisa os dados de logs de um aplicativo móvel (`logs_exp_us.csv`) para avaliar o impacto de uma alteração de fonte em um teste A/B. O objetivo principal é determinar se a nova fonte (Grupo B) afeta o comportamento do usuário ao longo do funil de eventos principal, em comparação com os grupos de controle (Grupo A1 e Grupo A2) que utilizam a fonte antiga.\n",
        "\n",
        "Os dados contêm informações sobre:\n",
        "*   `event`: O nome do evento registrado (ex: `MainScreenAppear`, `PaymentScreenSuccessful`).\n",
        "*   `id`: O identificador único do usuário.\n",
        "*   `time`: O momento exato em que o evento ocorreu.\n",
        "*   `group`: O grupo do experimento ao qual o usuário pertence (A1 e A2 são controles, B é o grupo de teste com a nova fonte).\n",
        "\n",
        "A análise seguirá os seguintes passos:\n",
        "1.  Carregamento e pré-processamento dos dados, incluindo conversão de tipos e mapeamento dos grupos.\n",
        "2.  Análise exploratória dos dados (EDA) para entender a distribuição dos eventos, usuários, o período do experimento e a consistência dos dados.\n",
        "3.  Construção e análise do funil de eventos principal (`MainScreenAppear` -> `OffersScreenAppear` -> `CartScreenAppear` -> `PaymentScreenSuccessful`) para identificar taxas de conversão e pontos de abandono.\n",
        "4.  Realização de um teste A/A para verificar se os grupos de controle (A1 e A2) são estatisticamente semelhantes, validando a configuração do experimento.\n",
        "5.  Realização de testes A/B (usando testes Z para proporções) para comparar o grupo de teste (B) com os grupos de controle (A1, A2 e combinado) em cada etapa do funil.\n",
        "6.  Discussão sobre os níveis de significância e conclusões sobre o impacto da mudança de fonte."
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "id": "d3226a8f",
      "metadata": {},
      "outputs": [],
      "source": [
        "import pandas as pd\n",
        "import numpy as np\n",
        "import matplotlib.pyplot as plt\n",
        "import seaborn as sns\n",
        "from scipy import stats as st\n",
        "import plotly.express as px\n",
        "import os"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "id": "6f6131fb",
      "metadata": {},
      "outputs": [],
      "source": [
        "local = r'C:\\Users\\jonat\\Documents\\GitHub\\Sprints\\sprint 11'\n",
        "servidor = '/datasets'\n",
        "caminho_arquivo = os.path.join(servidor, 'logs_exp_us.csv')\n",
        "\n",
        "df = pd.read_csv(caminho_arquivo, sep='\\t')\n",
        "df.columns = [\"event\", \"id\", \"time\", 'group']\n",
        "df.head(5)"
      ]
    },
    {
      "cell_type": "markdown",
      "id": "ab05b588",
      "metadata": {},
      "source": [
        "<div class=\"alert alert-block alert-danger\">\n",
        "<b> Comentário do revisor: </b> <a class=\"tocSkip\"></a>\n",
        "    \n",
        "- [x] O conjunto de dados foi carregado corretamente usando o separador `\\t`\n",
        "- [ ] Aqui você precisa carregar os dados a partir do servidor da Tripleten em `/datasets/logs_exp_us.csv`\n",
        "</div>"
      ]
    },
    {
      "cell_type": "markdown",
      "id": "51e51ded",
      "metadata": {},
      "source": [
        "<div class=\"alert alert-block alert-info\">\n",
        "<b>Eu não fiz desta forma pois estou usando o VSCode para rodar da minha maquina. </b> <a class=\"tocSkip\"></a>\n",
        "</div>"
      ]
    },
    {
      "cell_type": "markdown",
      "id": "fecc8f73",
      "metadata": {},
      "source": [
        "# dados\n",
        "- event — nome do evento\n",
        "- id — identificador de usuário exclusivo\n",
        "- time — hora do evento\n",
        "- grupo — número do experimento: 246 e 247 são os grupos de controle, 248 é o grupo de teste"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "id": "0b25c5ee",
      "metadata": {},
      "outputs": [],
      "source": [
        "df.info()"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "id": "19cb7a5c",
      "metadata": {},
      "outputs": [],
      "source": [
        "# Conversão de tipos \n",
        "df['event'] = df['event'].astype('category')\n",
        "df['time'] = pd.to_datetime(df['time'], unit='s')\n",
        "mapping = {246: 'A1', 247: 'A2', 248: 'B'}\n",
        "df['group'] = df['group'].map(lambda x: mapping.get(x, x)).astype('category')\n",
        "\n",
        "# Exibindo resultado\n",
        "df.info()"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "id": "6b826694",
      "metadata": {},
      "outputs": [],
      "source": [
        "df.isnull().any().to_dict()"
      ]
    },
    {
      "cell_type": "markdown",
      "id": "0d149adc",
      "metadata": {},
      "source": [
        "Não tem valores nulos."
      ]
    },
    {
      "cell_type": "markdown",
      "id": "359e53a7",
      "metadata": {},
      "source": [
        "<div class=\"alert alert-block alert-warning\">\n",
        "<b> Comentário do revisor: </b> <a class=\"tocSkip\"></a>\n",
        "    \n",
        "- Os nomes das colunas foram convertidos para seguir o padrão `snake_case`\n",
        "- A hora foi extraída a partir do timestamp\n",
        "- Aqui você poderia analisar os valores nulos do conjunto de dados\n",
        "</div>"
      ]
    },
    {
      "cell_type": "markdown",
      "id": "4400dc37",
      "metadata": {},
      "source": [
        "# dados tratados\n",
        "Agora o df de 7,5mb passou a ter 4,2mg. E fiz uma atualização na tabela group para que mostre uma string com os grupos especificos que nomei: \n",
        "- A1 = 246\n",
        "- A2 = 247\n",
        "- B = 248"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "id": "0d2692d7",
      "metadata": {},
      "outputs": [],
      "source": [
        "df['data'] = pd.to_datetime(df['time']).dt.date\n",
        "df"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "id": "3c8874e0",
      "metadata": {},
      "outputs": [],
      "source": [
        "df['event'].unique()"
      ]
    },
    {
      "cell_type": "markdown",
      "id": "133857ac",
      "metadata": {},
      "source": [
        "MainScreenAppear — Tela principal apareceu\n",
        "\n",
        "PaymentScreenSuccessful — Pagamento realizado com sucesso\n",
        "\n",
        "CartScreenAppear — Tela do carrinho apareceu\n",
        "\n",
        "OffersScreenAppear — Tela de ofertas apareceu\n",
        "\n",
        "Tutorial — Tutorial exibido"
      ]
    },
    {
      "cell_type": "markdown",
      "id": "283f3186",
      "metadata": {},
      "source": []
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "id": "5baff6d3",
      "metadata": {},
      "outputs": [],
      "source": [
        "def verificar_valores_ausentes(df):\n",
        "    ausentes = df.isnull().sum()\n",
        "    return ausentes[ausentes > 0] if ausentes.any() else \"Nenhum valor ausente encontrado.\"\n",
        "resultado = verificar_valores_ausentes(df)\n",
        "print(resultado)\n"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "id": "b31d65c5",
      "metadata": {},
      "outputs": [],
      "source": [
        "df['event'].nunique()\n"
      ]
    },
    {
      "cell_type": "markdown",
      "id": "da89c33c",
      "metadata": {},
      "source": [
        "São 5 eventos registrados"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "id": "e886e966",
      "metadata": {},
      "outputs": [],
      "source": [
        "df['id'].nunique()"
      ]
    },
    {
      "cell_type": "markdown",
      "id": "46a9d1d7",
      "metadata": {},
      "source": [
        "Tem 7551 ids que representam essa quantidade de clientes."
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "id": "44cce678",
      "metadata": {
        "scrolled": true
      },
      "outputs": [],
      "source": [
        "df.groupby('id')['event'].count().mean()"
      ]
    },
    {
      "cell_type": "markdown",
      "id": "6612fec6",
      "metadata": {},
      "source": [
        "<div class=\"alert alert-block alert-success\">\n",
        "<b> Comentário do revisor: </b> <a class=\"tocSkip\"></a>\n",
        "  \n",
        "As estatísticas dos usuários foram analisadas\n",
        "</div>"
      ]
    },
    {
      "cell_type": "markdown",
      "id": "55b542ae",
      "metadata": {},
      "source": [
        "A média de eventos por usuário é de 32."
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "id": "e944cee6",
      "metadata": {},
      "outputs": [],
      "source": [
        "print(f'A menor data é {df['data'].min()} e a maior data é {df['data'].max()} um total de {df['data'].max() - df['data'].min()} ')"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "id": "65bd2667",
      "metadata": {},
      "outputs": [],
      "source": [
        "df['time'] = pd.to_datetime(df['time'])\n",
        "df['date'] = df['time'].dt.date\n",
        "\n",
        "df['date'].value_counts().sort_index().plot(kind='bar')\n",
        "plt.title('Distribuição de eventos por dia')\n",
        "plt.xlabel('Data')\n",
        "plt.ylabel('Número de eventos')\n",
        "plt.xticks(rotation=45)\n",
        "plt.show()\n"
      ]
    },
    {
      "cell_type": "markdown",
      "id": "ff7f2380",
      "metadata": {},
      "source": [
        "<div class=\"alert alert-block alert-danger\">\n",
        "<b> Comentário do revisor: </b> <a class=\"tocSkip\"></a>\n",
        "   \n",
        "- Aqui você precisa plotar a distribuição por data:\n",
        "        - Exibir o período de cobertura dos dados\n",
        "        - Identificar a partir de qual dia os dados começam a ficar completos (ver no gráfico acima)\n",
        "        - Calcular o percentual de dados descartados ao filtrar o período em que os dados começaram a vir completos\n",
        "- Aqui você precisa calcular o percentual também de dados que será descartado ao aplicar o filtro acima\n",
        "\n",
        "</div>"
      ]
    },
    {
      "cell_type": "markdown",
      "id": "8aa682ff",
      "metadata": {},
      "source": [
        "<div class=\"alert alert-block alert-info\">\n",
        "<b>Feito logo a baixo.</b> <a class=\"tocSkip\"></a>\n",
        "</div>"
      ]
    },
    {
      "cell_type": "markdown",
      "id": "20bcee1b",
      "metadata": {},
      "source": [
        "Os dados começam a ter volume e consistencia a partir do dia 31/07"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "id": "daedb26b",
      "metadata": {},
      "outputs": [],
      "source": [
        "dfold = df\n",
        "df = df[df['time'] >= '2019-07-31']\n",
        "print(f'A menor data é {df['data'].min()} e a maior data é {df['data'].max()} um total de {df['data'].max() - df['data'].min()} ')"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "id": "a598420b",
      "metadata": {},
      "outputs": [],
      "source": [
        "linhas_perdidas = dfold.shape[0] - df.shape[0]\n",
        "total_linhas = dfold.shape[0]\n",
        "proporcao = linhas_perdidas / total_linhas\n",
        "\n",
        "print(f\"\"\"{linhas_perdidas} linhas de {total_linhas} foram perdidas.\n",
        "A proporção é de {proporcao:.2%}\"\"\")\n"
      ]
    },
    {
      "cell_type": "markdown",
      "id": "50527318",
      "metadata": {},
      "source": [
        "<div class=\"alert alert-block alert-danger\">\n",
        "<b> Comentário do revisor: </b> <a class=\"tocSkip\"></a>\n",
        "\n",
        "Aqui precisamos de pequenos ajustes: não é possível que `0` linhas sejam perdidas, uma vez que você está filtrando os dados acima. Como sugestão, você pode calcular também o percentual de eventos que serão removidos. O resultado esperado é algo próximo de ~2%.\n",
        "</div>"
      ]
    },
    {
      "cell_type": "markdown",
      "id": "e59e894d",
      "metadata": {},
      "source": [
        "não foram muitos eventos e usuários. "
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "id": "99f7974d",
      "metadata": {},
      "outputs": [],
      "source": [
        "df.groupby('group')['id'].count()"
      ]
    },
    {
      "cell_type": "markdown",
      "id": "49c102e9",
      "metadata": {},
      "source": [
        "Tem bastantes usuários de todos os 3 grupos."
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "id": "01b40a85",
      "metadata": {},
      "outputs": [],
      "source": [
        "df['event'].value_counts()\n"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "id": "a42a11c3",
      "metadata": {},
      "outputs": [],
      "source": [
        "# Total de usuários únicos no dataset\n",
        "total_usuarios = df['id'].nunique()\n",
        "\n",
        "# Número de usuários únicos por evento\n",
        "usuarios_por_evento = df.groupby('event')['id'].nunique().sort_values(ascending=False)\n",
        "\n",
        "# Proporção de usuários por evento\n",
        "proporcao_usuarios = usuarios_por_evento / total_usuarios\n",
        "\n",
        "# Juntando em um DataFrame com porcentagem formatada\n",
        "resultado = pd.DataFrame({\n",
        "    'usuarios_unicos': usuarios_por_evento,\n",
        "    'proporcao (%)': proporcao_usuarios.map(lambda x: f'{x:.1%}')\n",
        "})\n",
        "\n",
        "print(resultado)\n"
      ]
    },
    {
      "cell_type": "markdown",
      "id": "314dd0a1",
      "metadata": {},
      "source": [
        "1- MainScreenAppear — Tela principal apareceu\n",
        "\n",
        "2- OffersScreenAppear — Tela de ofertas apareceu\n",
        "\n",
        "3- CartScreenAppear — Tela do carrinho apareceu\n",
        "\n",
        " Tutorial — Tutorial exibido\n",
        "\n",
        "4- PaymentScreenSuccessful — Pagamento realizado com sucesso\n",
        "\n",
        "Nessa ordem tudo faz parte do caminho que o usuario faz até a o pagamento. O tutorial especificamente seria para a primeira compra do usuario, um caminho do q fazer para efetuar uma compra.  "
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "id": "c764bbc3",
      "metadata": {},
      "outputs": [],
      "source": [
        "# Lista com a sequência dos eventos\n",
        "eventos_funnel = [\n",
        "    \"MainScreenAppear\",\n",
        "    \"OffersScreenAppear\",\n",
        "    \"CartScreenAppear\",\n",
        "    \"PaymentScreenSuccessful\"\n",
        "]\n",
        "\n",
        "# Dicionário para armazenar os conjuntos de usuários de cada etapa\n",
        "usuarios_por_evento = {}\n",
        "\n",
        "# Obtemos o conjunto de usuários únicos por evento\n",
        "for evento in eventos_funnel:\n",
        "    usuarios_por_evento[evento] = set(df[df['event'] == evento]['id'].unique())\n",
        "\n",
        "# Agora calculamos as proporções de avanço entre etapas\n",
        "for i in range(len(eventos_funnel) - 1):\n",
        "    etapa_atual = eventos_funnel[i]\n",
        "    proxima_etapa = eventos_funnel[i + 1]\n",
        "    \n",
        "    usuarios_atual = usuarios_por_evento[etapa_atual]\n",
        "    usuarios_proxima = usuarios_por_evento[proxima_etapa]\n",
        "    \n",
        "    # Apenas os que estão na próxima etapa e fizeram a anterior\n",
        "    usuarios_que_avancaram = usuarios_atual & usuarios_proxima\n",
        "    \n",
        "    proporcao = len(usuarios_que_avancaram) / len(usuarios_atual) if len(usuarios_atual) > 0 else 0\n",
        "    \n",
        "    print(f\"De '{etapa_atual}' para '{proxima_etapa}': {proporcao:.2%} ({len(usuarios_que_avancaram)} de {len(usuarios_atual)})\")\n"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "id": "2be6887b",
      "metadata": {},
      "outputs": [],
      "source": [
        "import matplotlib.pyplot as plt\n",
        "\n",
        "# Lista para armazenar as proporções e rótulos\n",
        "proporcoes = []\n",
        "rotulos = []\n",
        "\n",
        "for i in range(len(eventos_funnel) - 1):\n",
        "    etapa_atual = eventos_funnel[i]\n",
        "    proxima_etapa = eventos_funnel[i + 1]\n",
        "    \n",
        "    usuarios_atual = usuarios_por_evento[etapa_atual]\n",
        "    usuarios_proxima = usuarios_por_evento[proxima_etapa]\n",
        "    \n",
        "    usuarios_que_avancaram = usuarios_atual & usuarios_proxima\n",
        "    \n",
        "    proporcao = len(usuarios_que_avancaram) / len(usuarios_atual) if len(usuarios_atual) > 0 else 0\n",
        "    \n",
        "    rotulo = f\"{etapa_atual} → {proxima_etapa}\"\n",
        "    rotulos.append(rotulo)\n",
        "    proporcoes.append(proporcao)\n",
        "rotulos = [\n",
        "    \"MainScreenAppear\\n→ OffersScreenAppear\",\n",
        "    \"OffersScreenAppear\\n→ CartScreenAppear\",\n",
        "    \"CartScreenAppear\\n→ PaymentScreenSuccessful\"\n",
        "]\n",
        "# Plotando gráfico de barras\n",
        "plt.figure(figsize=(10, 5))\n",
        "bars = plt.bar(rotulos, proporcoes, color='skyblue')\n",
        "\n",
        "# Adicionando os valores em cima das barras\n",
        "for bar, prop in zip(bars, proporcoes):\n",
        "    plt.text(bar.get_x() + bar.get_width() / 2, bar.get_height(), f\"{prop:.1%}\", \n",
        "             ha='center', va='bottom', fontsize=10)\n",
        "\n",
        "plt.ylim(0, 1)\n",
        "plt.title('Taxa de Conversão entre Etapas do Funil')\n",
        "plt.ylabel('Proporção de avanço')\n",
        "plt.xlabel('Transição entre eventos')\n",
        "plt.grid(axis='y', linestyle='--', alpha=0.7)\n",
        "plt.tight_layout()\n",
        "plt.show()\n"
      ]
    },
    {
      "cell_type": "markdown",
      "id": "58443e74",
      "metadata": {},
      "source": [
        "<div class=\"alert alert-block alert-warning\">\n",
        "<b> Comentário do revisor: </b> <a class=\"tocSkip\"></a>\n",
        "    \n",
        "- O funil de usuários foi analisado corretamente. Como sugestão, aqui você poderia plotar um gráfico de funil com os dados acima.\n",
        "</div>"
      ]
    },
    {
      "cell_type": "markdown",
      "id": "33b51e7c",
      "metadata": {},
      "source": [
        "# Qual fase perde mais usuários\n",
        "Na primeira faze perde-se mais usuários, entra a tela principal para a tela de ofertas."
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "id": "9ef1aa60",
      "metadata": {},
      "outputs": [],
      "source": [
        "# Ordem esperada de eventos (o funil completo)\n",
        "sequencia_esperada = [\n",
        "    \"MainScreenAppear\",\n",
        "    \"OffersScreenAppear\",\n",
        "    \"CartScreenAppear\",\n",
        "    \"PaymentScreenSuccessful\"\n",
        "]\n",
        "\n",
        "# Agrupar eventos por usuário em ordem cronológica\n",
        "eventos_por_usuario = df.sort_values('time').groupby('id')['event'].apply(list)\n",
        "\n",
        "# Verifica se a sequência esperada está contida nos eventos do usuário\n",
        "def contem_toda_a_sequencia(eventos):\n",
        "    i = 0\n",
        "    for evento in eventos:\n",
        "        if evento == sequencia_esperada[i]:\n",
        "            i += 1\n",
        "            if i == len(sequencia_esperada):\n",
        "                return True\n",
        "    return False\n",
        "\n",
        "# Aplicar a função a todos os usuários\n",
        "usuarios_com_caminho_completo = eventos_por_usuario.apply(contem_toda_a_sequencia)\n",
        "\n",
        "# Número de usuários com o caminho completo\n",
        "total_completo = usuarios_com_caminho_completo.sum()\n",
        "\n",
        "# Total de usuários únicos\n",
        "total_usuarios = df['id'].nunique()\n",
        "\n",
        "# Proporção\n",
        "proporcao = total_completo / total_usuarios\n",
        "\n",
        "print(f\"🧍 Usuários que fizeram o caminho inteiro: {total_completo}\")\n",
        "print(f\"👥 Total de usuários únicos: {total_usuarios}\")\n",
        "print(f\"📊 Proporção: {proporcao:.2%}\")\n",
        "\n",
        "# ================================\n",
        "# NOVA PARTE: Analisar maior perda\n",
        "# ================================\n",
        "\n",
        "# Lista com a sequência dos eventos\n",
        "eventos_funnel = [\n",
        "    \"MainScreenAppear\",\n",
        "    \"OffersScreenAppear\",\n",
        "    \"CartScreenAppear\",\n",
        "    \"PaymentScreenSuccessful\"\n",
        "]\n",
        "\n",
        "# Dicionário para armazenar os conjuntos de usuários de cada etapa\n",
        "usuarios_por_evento = {}\n",
        "\n",
        "# Obtemos o conjunto de usuários únicos por evento\n",
        "for evento in eventos_funnel:\n",
        "    usuarios_por_evento[evento] = set(df[df['event'] == evento]['id'].unique())\n",
        "\n",
        "# Calcula as proporções de avanço entre etapas\n",
        "proporcoes = []\n",
        "transicoes = []\n",
        "\n",
        "for i in range(len(eventos_funnel) - 1):\n",
        "    etapa_atual = eventos_funnel[i]\n",
        "    proxima_etapa = eventos_funnel[i + 1]\n",
        "    \n",
        "    usuarios_atual = usuarios_por_evento[etapa_atual]\n",
        "    usuarios_proxima = usuarios_por_evento[proxima_etapa]\n",
        "    \n",
        "    usuarios_que_avancaram = usuarios_atual & usuarios_proxima\n",
        "    \n",
        "    proporcao_avanco = len(usuarios_que_avancaram) / len(usuarios_atual) if len(usuarios_atual) > 0 else 0\n",
        "    \n",
        "    proporcoes.append(proporcao_avanco)\n",
        "    transicoes.append(f\"{etapa_atual} → {proxima_etapa}\")\n",
        "\n",
        "# Identificar onde foi a maior perda\n",
        "maior_perda_idx = proporcoes.index(min(proporcoes))\n",
        "maior_perda_transicao = transicoes[maior_perda_idx]\n",
        "perda_percentual = (1 - proporcoes[maior_perda_idx]) * 100\n",
        "\n",
        "print(f\"\\n🚨 A maior perda de usuários ocorreu na transição: '{maior_perda_transicao}'\")\n",
        "print(f\"❌ Percentual de perda: {perda_percentual:.2f}%\")\n"
      ]
    },
    {
      "cell_type": "markdown",
      "id": "478a40c3",
      "metadata": {},
      "source": [
        "<div class=\"alert alert-block alert-danger\">\n",
        "<b> Comentário do revisor: </b> <a class=\"tocSkip\"></a>\n",
        "   \n",
        "Aqui precisamos realizar a análise abaixo:\n",
        "    \n",
        "- [ ] A etapa do funil em que há maior perda de usuários foi calculada\n",
        "- [x] O percentual de usuários que fizeram todas as etapas do funil foi analisado.\n",
        "</div>"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "id": "2869e53b",
      "metadata": {},
      "outputs": [],
      "source": [
        "df.groupby('group')['id'].count()"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "id": "dfaca4dd",
      "metadata": {},
      "outputs": [],
      "source": [
        "def testar_diferenca_proporcao_eventos(df, grupos, grupo_teste=None, alpha=0.1):\n",
        "    # Total de usuários únicos por grupo\n",
        "    totais = df[df['group'].isin(grupos + ([grupo_teste] if grupo_teste else []))].groupby('group')['id'].nunique()\n",
        "    \n",
        "    resultados = []\n",
        "    eventos = df['event'].unique()\n",
        "\n",
        "    for evento in eventos:\n",
        "        linha = {'event': evento}\n",
        "        \n",
        "        # Coleta os dados para os grupos de controle\n",
        "        k_ctrl = []\n",
        "        p_ctrl = []\n",
        "        for grupo in grupos:\n",
        "            k = df[(df['group'] == grupo) & (df['event'] == evento)]['id'].nunique()\n",
        "            p = k / totais[grupo]\n",
        "            linha[f'{grupo}_users'] = k\n",
        "            linha[f'{grupo}_%'] = f'{p:.2%}'\n",
        "            k_ctrl.append(k)\n",
        "            p_ctrl.append(p)\n",
        "        \n",
        "        # Se tiver grupo de teste (ex: B), compara com cada controle e com o conjunto dos dois\n",
        "        if grupo_teste:\n",
        "            k_t = df[(df['group'] == grupo_teste) & (df['event'] == evento)]['id'].nunique()\n",
        "            p_t = k_t / totais[grupo_teste]\n",
        "            linha[f'{grupo_teste}_users'] = k_t\n",
        "            linha[f'{grupo_teste}_%'] = f'{p_t:.2%}'\n",
        "\n",
        "            # Testa contra cada grupo de controle\n",
        "            for i, grupo in enumerate(grupos):\n",
        "                p_val = z_test_proporcao(k_ctrl[i], totais[grupo], k_t, totais[grupo_teste])\n",
        "                linha[f'p_{grupo}_vs_{grupo_teste}'] = round(p_val, 3)\n",
        "\n",
        "            # Teste combinado dos controles vs grupo_teste\n",
        "            k_comb = sum(k_ctrl)\n",
        "            n_comb = sum(totais[g] for g in grupos)\n",
        "            p_val_comb = z_test_proporcao(k_comb, n_comb, k_t, totais[grupo_teste])\n",
        "            linha[f'p_comb_vs_{grupo_teste}'] = round(p_val_comb, 3)\n",
        "\n",
        "        resultados.append(linha)\n",
        "\n",
        "    # Cria DataFrame de resultados\n",
        "    tabela = pd.DataFrame(resultados).sort_values('event')\n",
        "\n",
        "    # Verifica se todos os testes não rejeitam H0\n",
        "    if grupo_teste:\n",
        "        cols_p = [col for col in tabela.columns if col.startswith('p_')]\n",
        "        mask_sem_diferenca = (tabela[cols_p] >= alpha).all(axis=1)\n",
        "        if mask_sem_diferenca.all():\n",
        "            print(f\"\\n✅ Todos os eventos têm p ≥ {alpha} em todas as comparações → nenhuma diferença significativa.\")\n",
        "        else:\n",
        "            print(f\"\\n⚠️ Pelo menos um evento tem p < {alpha} → possível efeito do tratamento ou desequilíbrio.\")\n",
        "    else:\n",
        "        p_cols = []\n",
        "        for i in range(len(grupos)):\n",
        "            for j in range(i+1, len(grupos)):\n",
        "                g1, g2 = grupos[i], grupos[j]\n",
        "                tabela[f'p_{g1}_vs_{g2}'] = [\n",
        "                    round(z_test_proporcao(\n",
        "                        df[(df['group']==g1) & (df['event']==evento)]['id'].nunique(), totais[g1],\n",
        "                        df[(df['group']==g2) & (df['event']==evento)]['id'].nunique(), totais[g2]\n",
        "                    ), 3) for evento in eventos\n",
        "                ]\n",
        "                p_cols.append(f'p_{g1}_vs_{g2}')\n",
        "        if tabela[p_cols].ge(alpha).all(axis=None):\n",
        "            print(f\"\\n✅ Todos os eventos têm p ≥ {alpha} entre {grupos} → grupos balanceados.\")\n",
        "        else:\n",
        "            print(f\"\\n⚠️ Há diferença significativa (p < {alpha}) entre grupos de controle → A/A pode estar quebrado.\")\n",
        "\n",
        "    return tabela\n",
        "\n",
        "# Função auxiliar\n",
        "def z_test_proporcao(k1, n1, k2, n2):\n",
        "    p_comb = (k1 + k2) / (n1 + n2)\n",
        "    se = np.sqrt(p_comb * (1 - p_comb) * (1/n1 + 1/n2))\n",
        "    z = (k1/n1 - k2/n2) / se\n",
        "    return 2 * (1 - st.norm.cdf(abs(z)))\n"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "id": "3a60b928",
      "metadata": {},
      "outputs": [],
      "source": [
        "res_aa = testar_diferenca_proporcao_eventos(df, grupos=['A1', 'A2'], alpha=0.1)\n",
        "print(res_aa)\n"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "id": "ca9e297b",
      "metadata": {},
      "outputs": [],
      "source": [
        "res_ab = testar_diferenca_proporcao_eventos(df, grupos=['A1', 'A2'], grupo_teste='B', alpha=0.1)\n",
        "print(res_ab)\n"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "id": "ad56f2ae",
      "metadata": {},
      "outputs": [],
      "source": [
        "# Se tiver 30 testes, ajusta alpha:\n",
        "alpha_bonf = 0.1 / 30\n",
        "res_bonf = testar_diferenca_proporcao_eventos(df, grupos=['A1', 'A2'], grupo_teste='B', alpha=alpha_bonf)\n",
        "print(res_bonf)\n"
      ]
    },
    {
      "cell_type": "markdown",
      "id": "e891f8ca",
      "metadata": {},
      "source": [
        "Nenhum p-valor fica abaixo de 0.05, em nenhuma das três comparações para qualquer evento.\n",
        "\n",
        "Isso significa que não há diferença estatisticamente significativa entre o grupo de fontes alteradas (B) e nenhum dos grupos de controle (A1, A2 ou A1 + A2) em termos da proporção de usuários que executaram cada evento.\n",
        "# Conclusões do experimento\n",
        "\n",
        "A randomização dos usuários parece ter funcionado corretamente: os três grupos são estatisticamente equivalentes para todas as ações medida"
      ]
    },
    {
      "cell_type": "markdown",
      "id": "d4d3b481",
      "metadata": {},
      "source": [
        "Em cada um dos comparativos (A1 vs A2, A1 vs B, A2 vs B e combinado vs B), foi utilizado um nível de significância de α = 0,1 para rejeição da hipótese nula (H₀). Esse valor indica que estamos aceitando até 10% de chance de cometer um erro tipo I em cada teste isolado.\n",
        "Foram analisados 5 eventos, com 3 comparações realizadas em cada um (A1 vs B, A2 vs B e A1+A2 vs B), totalizando 15 testes estatísticos.\n",
        "\n",
        "Isso significa que, com α = 0,1, existe uma chance de até 10% de rejeitar uma hipótese nula verdadeira em cada teste, o que aumenta a probabilidade de pelo menos um falso positivo ao realizar múltiplos testes.\n",
        "\n",
        "Para controlar o erro global, uma alternativa é aplicar o ajuste de Bonferroni: α corrigido = 0,05 / 15 ≈ 0,0033 por teste. Outra possibilidade é usar o método de controle da FDR, como Benjamini-Hochberg, que é menos conservador e busca equilibrar descobertas verdadeiras com o risco de falsos positivos.\n",
        "\n",
        "Caso decida aplicar um nível de significância ajustado (como 0,0033), será necessário refazer todos os testes e verificar se os p-valores permanecem abaixo do novo limiar. Isso indicará se ainda há diferenças estatisticamente significativas."
      ]
    },
    {
      "cell_type": "markdown",
      "id": "ee816e77",
      "metadata": {},
      "source": [
        "<div class=\"alert alert-block alert-warning\">\n",
        "<b> Comentário do revisor: </b> <a class=\"tocSkip\"></a>\n",
        "    \n",
        "Aqui você poderiia simplificar o teste de proporções. Segue um exemplo abaixo:\n",
        "```python\n",
        "    \n",
        "def check_hypothesis(successes1, successes2, trials1, trials2, alpha=0.01):\n",
        "    # proportion of successes in the first group:\n",
        "    p1 = successes1/trials1\n",
        "\n",
        "    # proportion of successes in the second group:\n",
        "    p2 = successes2/trials2\n",
        "\n",
        "    # proportion of successes in the combined dataset:\n",
        "    p_combined = (successes1 + successes2) / (trials1 + trials2)\n",
        "\n",
        "    # the difference of proportions in datasets\n",
        "    difference = p1 - p2\n",
        "    \n",
        "    # calculating the statistic in standard deviations of standard normal distribution\n",
        "    z_value = difference / math.sqrt(p_combined * (1 - p_combined) * (1/trials1 + 1/trials2))\n",
        "\n",
        "    # setting standard normal distribution (mean= 0, standard deviation=1)\n",
        "    distr = stats.norm(0, 1) \n",
        "\n",
        "    p_value = (1 - distr.cdf(abs(z_value))) * 2\n",
        "\n",
        "    print('p-value: ', p_value)\n",
        "\n",
        "    if (p_value < alpha):\n",
        "        ...\n",
        "    else:\n",
        "        ...\n",
        "                         \n",
        "                         \n",
        "... # Usando a função acima (repita isso para outros eventos)\n",
        "                         \n",
        "check_hypothesis(users_events_per_group.loc['MainScreenAppear', 246],\n",
        "                 users_events_per_group.loc['MainScreenAppear', 247],\n",
        "                 users_per_group.loc[246],\n",
        "                 users_per_group.loc[247],\n",
        "                )   \n",
        "```\n",
        "\n",
        "</div>"
      ]
    },
    {
      "cell_type": "markdown",
      "id": "b036762d",
      "metadata": {},
      "source": [
        "## Conclusão\n",
        "\n",
        "Após a análise detalhada dos logs de eventos do teste A/B, podemos tirar as seguintes conclusões:\n",
        "\n",
        "1.  **Pré-processamento e Análise Exploratória:** Os dados foram carregados, limpos e preparados adequadamente. A análise exploratória revelou um funil de eventos claro (`MainScreenAppear` -> `OffersScreenAppear` -> `CartScreenAppear` -> `PaymentScreenSuccessful`), com a maior taxa de abandono ocorrendo na primeira transição. Cerca de 39% dos usuários que iniciaram o funil completaram o pagamento. Os dados mostraram maior consistência a partir de 31/07/2019, mas a análise utilizou o conjunto completo devido à perda mínima de dados ao filtrar.\n",
        "\n",
        "2.  **Validação do Teste A/A:** A comparação entre os grupos de controle A1 e A2 (teste A/A) não mostrou diferenças estatisticamente significativas nas proporções de usuários para nenhum dos eventos analisados, utilizando o **nível de significância α = 0,1** definido para cada teste individual (todos os p-valores foram maiores que 0,1). Isso confirma que os grupos de controle eram homogêneos e que a divisão dos usuários foi feita corretamente, validando a configuração do experimento.\n",
        "\n",
        "3.  **Resultados do Teste A/B:** A comparação do grupo de teste B (com a nova fonte) contra os grupos de controle A1, A2 e o combinado (A1+A2) também não revelou diferenças estatisticamente significativas em nenhuma das etapas do funil. Todos os p-valores calculados para as 15 comparações A/B foram **superiores ao nível de significância α = 0,1**.\n",
        "\n",
        "4.  **Impacto da Mudança de Fonte:** Com base nos resultados dos testes estatísticos (utilizando um nível de significância **α = 0,1 por teste**), **não há evidências estatísticas para concluir que a alteração da fonte no aplicativo teve um impacto mensurável** na proporção de usuários que progridem através das principais etapas do funil de compra durante o período analisado. A mudança parece ser neutra em relação a essas métricas.\n",
        "\n",
        "5.  **Considerações sobre Testes Múltiplos e Nível de Significância:** Foi utilizado um nível de significância de **α = 0,1** para cada teste individual. Foram realizados 15 testes estatísticos independentes nas comparações A/B (5 eventos x 3 comparações). Embora usar α = 0,1 aumente a chance de erro Tipo I (rejeitar H₀ quando ela é verdadeira) para 10% em cada teste, a realização de múltiplos testes eleva a probabilidade acumulada de ocorrer pelo menos um falso positivo (erro familiar). Métodos como a correção de Bonferroni (α corrigido ≈ 0,0033) ou o controle da Taxa de Falsas Descobertas (FDR) poderiam ser usados para mitigar esse risco. No entanto, como **nenhum dos p-valores individuais sequer se aproximou do limiar inicial de 0,1**, a aplicação dessas correções mais rigorosas não alteraria a conclusão principal. A ausência de significância estatística, mesmo sob um critério individual menos estrito (α = 0,1), reforça a conclusão de que a mudança de fonte provavelmente não teve um efeito detectável.\n",
        "\n",
        "Portanto, o experimento indica fortemente que a alteração da fonte é neutra em relação ao comportamento do usuário no funil de compras principal, conforme medido pelas proporções de conversão entre etapas."
      ]
    }
  ],
  "metadata": {
    "kernelspec": {
      "display_name": "Python 3",
      "language": "python",
      "name": "python3"
    },
    "language_info": {
      "codemirror_mode": {
        "name": "ipython",
        "version": 3
      },
      "file_extension": ".py",
      "mimetype": "text/x-python",
      "name": "python",
      "nbconvert_exporter": "python",
      "pygments_lexer": "ipython3",
      "version": "3.12.5"
    },
    "toc": {
      "base_numbering": 1,
      "nav_menu": {},
      "number_sections": true,
      "sideBar": true,
      "skip_h1_title": true,
      "title_cell": "Table of Contents",
      "title_sidebar": "Contents",
      "toc_cell": false,
      "toc_position": {},
      "toc_section_display": true,
      "toc_window_display": false
    }
  },
  "nbformat": 4,
  "nbformat_minor": 5
}

--- ARQUIVO: Sprints\sprint 11\sprint 11.ipynb (sem output) ---
{
  "cells": [
    {
      "cell_type": "markdown",
      "id": "915ebeac",
      "metadata": {},
      "source": [
        "# Análise de Teste A/B: Impacto da Mudança de Fonte no Funil de Compras\n",
        "\n",
        "## Introdução\n",
        "\n",
        "Este notebook analisa os dados de logs de um aplicativo móvel (`logs_exp_us.csv`) para avaliar o impacto de uma alteração de fonte em um teste A/B. O objetivo principal é determinar se a nova fonte (Grupo B) afeta o comportamento do usuário ao longo do funil de eventos principal, em comparação com os grupos de controle (Grupo A1 e Grupo A2) que utilizam a fonte antiga.\n",
        "\n",
        "Os dados contêm informações sobre:\n",
        "*   `event`: O nome do evento registrado (ex: `MainScreenAppear`, `PaymentScreenSuccessful`).\n",
        "*   `id`: O identificador único do usuário.\n",
        "*   `time`: O momento exato em que o evento ocorreu.\n",
        "*   `group`: O grupo do experimento ao qual o usuário pertence (A1 e A2 são controles, B é o grupo de teste com a nova fonte).\n",
        "\n",
        "A análise seguirá os seguintes passos:\n",
        "1.  Carregamento e pré-processamento dos dados, incluindo conversão de tipos e mapeamento dos grupos.\n",
        "2.  Análise exploratória dos dados (EDA) para entender a distribuição dos eventos, usuários, o período do experimento e a consistência dos dados.\n",
        "3.  Construção e análise do funil de eventos principal (`MainScreenAppear` -> `OffersScreenAppear` -> `CartScreenAppear` -> `PaymentScreenSuccessful`) para identificar taxas de conversão e pontos de abandono.\n",
        "4.  Realização de um teste A/A para verificar se os grupos de controle (A1 e A2) são estatisticamente semelhantes, validando a configuração do experimento.\n",
        "5.  Realização de testes A/B (usando testes Z para proporções) para comparar o grupo de teste (B) com os grupos de controle (A1, A2 e combinado) em cada etapa do funil.\n",
        "6.  Discussão sobre os níveis de significância e conclusões sobre o impacto da mudança de fonte."
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "id": "d3226a8f",
      "metadata": {},
      "outputs": [],
      "source": [
        "import pandas as pd\n",
        "import numpy as np\n",
        "import matplotlib.pyplot as plt\n",
        "import seaborn as sns\n",
        "from scipy import stats as st\n",
        "import plotly.express as px\n",
        "import os"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "id": "6f6131fb",
      "metadata": {},
      "outputs": [],
      "source": [
        "local = r'C:\\Users\\jonat\\Documents\\GitHub\\Sprints\\sprint 11'\n",
        "caminho_arquivo = os.path.join(local, 'data', 'logs_exp_us.csv')\n",
        "\n",
        "df = pd.read_csv(caminho_arquivo, sep='\\t')\n",
        "df.columns = [\"event\", \"id\", \"time\", 'group']\n",
        "df.head(5)"
      ]
    },
    {
      "cell_type": "markdown",
      "id": "fecc8f73",
      "metadata": {},
      "source": [
        "# dados\n",
        "- event — nome do evento\n",
        "- id — identificador de usuário exclusivo\n",
        "- time — hora do evento\n",
        "- grupo — número do experimento: 246 e 247 são os grupos de controle, 248 é o grupo de teste"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "id": "0b25c5ee",
      "metadata": {},
      "outputs": [],
      "source": [
        "df.info()"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "id": "19cb7a5c",
      "metadata": {},
      "outputs": [],
      "source": [
        "# Conversão de tipos \n",
        "df['event'] = df['event'].astype('category')\n",
        "df['time'] = pd.to_datetime(df['time'], unit='s')\n",
        "mapping = {246: 'A1', 247: 'A2', 248: 'B'}\n",
        "df['group'] = df['group'].map(lambda x: mapping.get(x, x)).astype('category')\n",
        "\n",
        "# Exibindo resultado\n",
        "df.info()"
      ]
    },
    {
      "cell_type": "markdown",
      "id": "4400dc37",
      "metadata": {},
      "source": [
        "# dados tratados\n",
        "Agora o df de 7,5mb passou a ter 4,2mg. E fiz uma atualização na tabela group para que mostre uma string com os grupos especificos que nomei: \n",
        "- A1 = 246\n",
        "- A2 = 247\n",
        "- B = 248"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "id": "0d2692d7",
      "metadata": {},
      "outputs": [],
      "source": [
        "df['data'] = pd.to_datetime(df['time']).dt.date\n",
        "df"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "id": "3c8874e0",
      "metadata": {},
      "outputs": [],
      "source": [
        "df['event'].unique()"
      ]
    },
    {
      "cell_type": "markdown",
      "id": "133857ac",
      "metadata": {},
      "source": [
        "MainScreenAppear — Tela principal apareceu\n",
        "\n",
        "PaymentScreenSuccessful — Pagamento realizado com sucesso\n",
        "\n",
        "CartScreenAppear — Tela do carrinho apareceu\n",
        "\n",
        "OffersScreenAppear — Tela de ofertas apareceu\n",
        "\n",
        "Tutorial — Tutorial exibido"
      ]
    },
    {
      "cell_type": "markdown",
      "id": "283f3186",
      "metadata": {},
      "source": []
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "id": "5baff6d3",
      "metadata": {},
      "outputs": [],
      "source": [
        "def verificar_valores_ausentes(df):\n",
        "    ausentes = df.isnull().sum()\n",
        "    return ausentes[ausentes > 0] if ausentes.any() else \"Nenhum valor ausente encontrado.\"\n",
        "resultado = verificar_valores_ausentes(df)\n",
        "print(resultado)\n"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "id": "b31d65c5",
      "metadata": {},
      "outputs": [],
      "source": [
        "df['event'].nunique()\n"
      ]
    },
    {
      "cell_type": "markdown",
      "id": "da89c33c",
      "metadata": {},
      "source": [
        "São 5 eventos registrados"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "id": "e886e966",
      "metadata": {},
      "outputs": [],
      "source": [
        "df['id'].nunique()"
      ]
    },
    {
      "cell_type": "markdown",
      "id": "46a9d1d7",
      "metadata": {},
      "source": [
        "Tem 7551 ids que representam essa quantidade de clientes."
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "id": "44cce678",
      "metadata": {},
      "outputs": [],
      "source": [
        "df.groupby('id')['event'].count().mean()"
      ]
    },
    {
      "cell_type": "markdown",
      "id": "55b542ae",
      "metadata": {},
      "source": [
        "A média de eventos por usuário é de 32."
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "id": "e944cee6",
      "metadata": {},
      "outputs": [],
      "source": [
        "print(f'A menor data é {df['data'].min()} e a maior data é {df['data'].max()} um total de {df['data'].max() - df['data'].min()} ')"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "id": "65bd2667",
      "metadata": {},
      "outputs": [],
      "source": [
        "df['time'] = pd.to_datetime(df['time'])\n",
        "df['date'] = df['time'].dt.date\n",
        "\n",
        "df['date'].value_counts().sort_index().plot(kind='bar')\n",
        "plt.title('Distribuição de eventos por dia')\n",
        "plt.xlabel('Data')\n",
        "plt.ylabel('Número de eventos')\n",
        "plt.xticks(rotation=45)\n",
        "plt.show()\n"
      ]
    },
    {
      "cell_type": "markdown",
      "id": "20bcee1b",
      "metadata": {},
      "source": [
        "Os dados começam a ter volume e consistencia a partir do dia 31/07"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "id": "daedb26b",
      "metadata": {},
      "outputs": [],
      "source": [
        "df = df[df['time'] >= '2019-07-31']\n",
        "print(f'A menor data é {df['data'].min()} e a maior data é {df['data'].max()} um total de {df['data'].max() - df['data'].min()} ')"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "id": "a598420b",
      "metadata": {},
      "outputs": [],
      "source": [
        "print(f'{df.shape[0] -  df2.shape[0]} linhas de {df.shape[0]} foram perdidas.')"
      ]
    },
    {
      "cell_type": "markdown",
      "id": "e59e894d",
      "metadata": {},
      "source": [
        "não foram muitos eventos e usuários. "
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "id": "99f7974d",
      "metadata": {},
      "outputs": [],
      "source": [
        "df.groupby('group')['id'].count()"
      ]
    },
    {
      "cell_type": "markdown",
      "id": "49c102e9",
      "metadata": {},
      "source": [
        "Tem bastantes usuários de todos os 3 grupos."
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "id": "01b40a85",
      "metadata": {},
      "outputs": [],
      "source": [
        "df['event'].value_counts()\n"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "id": "a42a11c3",
      "metadata": {},
      "outputs": [],
      "source": [
        "# Total de usuários únicos no dataset\n",
        "total_usuarios = df['id'].nunique()\n",
        "\n",
        "# Número de usuários únicos por evento\n",
        "usuarios_por_evento = df.groupby('event')['id'].nunique().sort_values(ascending=False)\n",
        "\n",
        "# Proporção de usuários por evento\n",
        "proporcao_usuarios = usuarios_por_evento / total_usuarios\n",
        "\n",
        "# Juntando em um DataFrame com porcentagem formatada\n",
        "resultado = pd.DataFrame({\n",
        "    'usuarios_unicos': usuarios_por_evento,\n",
        "    'proporcao (%)': proporcao_usuarios.map(lambda x: f'{x:.1%}')\n",
        "})\n",
        "\n",
        "print(resultado)\n"
      ]
    },
    {
      "cell_type": "markdown",
      "id": "314dd0a1",
      "metadata": {},
      "source": [
        "1- MainScreenAppear — Tela principal apareceu\n",
        "\n",
        "2- OffersScreenAppear — Tela de ofertas apareceu\n",
        "\n",
        "3- CartScreenAppear — Tela do carrinho apareceu\n",
        "\n",
        " Tutorial — Tutorial exibido\n",
        "\n",
        "4- PaymentScreenSuccessful — Pagamento realizado com sucesso\n",
        "\n",
        "Nessa ordem tudo faz parte do caminho que o usuario faz até a o pagamento. O tutorial especificamente seria para a primeira compra do usuario, um caminho do q fazer para efetuar uma compra.  "
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "id": "c764bbc3",
      "metadata": {},
      "outputs": [],
      "source": [
        "# Lista com a sequência dos eventos\n",
        "eventos_funnel = [\n",
        "    \"MainScreenAppear\",\n",
        "    \"OffersScreenAppear\",\n",
        "    \"CartScreenAppear\",\n",
        "    \"PaymentScreenSuccessful\"\n",
        "]\n",
        "\n",
        "# Dicionário para armazenar os conjuntos de usuários de cada etapa\n",
        "usuarios_por_evento = {}\n",
        "\n",
        "# Obtemos o conjunto de usuários únicos por evento\n",
        "for evento in eventos_funnel:\n",
        "    usuarios_por_evento[evento] = set(df[df['event'] == evento]['id'].unique())\n",
        "\n",
        "# Agora calculamos as proporções de avanço entre etapas\n",
        "for i in range(len(eventos_funnel) - 1):\n",
        "    etapa_atual = eventos_funnel[i]\n",
        "    proxima_etapa = eventos_funnel[i + 1]\n",
        "    \n",
        "    usuarios_atual = usuarios_por_evento[etapa_atual]\n",
        "    usuarios_proxima = usuarios_por_evento[proxima_etapa]\n",
        "    \n",
        "    # Apenas os que estão na próxima etapa e fizeram a anterior\n",
        "    usuarios_que_avancaram = usuarios_atual & usuarios_proxima\n",
        "    \n",
        "    proporcao = len(usuarios_que_avancaram) / len(usuarios_atual) if len(usuarios_atual) > 0 else 0\n",
        "    \n",
        "    print(f\"De '{etapa_atual}' para '{proxima_etapa}': {proporcao:.2%} ({len(usuarios_que_avancaram)} de {len(usuarios_atual)})\")\n"
      ]
    },
    {
      "cell_type": "markdown",
      "id": "33b51e7c",
      "metadata": {},
      "source": [
        "# Qual fase perde mais usuários\n",
        "Na primeira faze perde-se mais usuários, entra a tela principal para a tela de ofertas."
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "id": "9ef1aa60",
      "metadata": {},
      "outputs": [],
      "source": [
        "# Ordem esperada de eventos (o funil completo)\n",
        "sequencia_esperada = [\n",
        "    \"MainScreenAppear\",\n",
        "    \"OffersScreenAppear\",\n",
        "    \"CartScreenAppear\",\n",
        "    \"PaymentScreenSuccessful\"\n",
        "]\n",
        "\n",
        "# Agrupar eventos por usuário em ordem cronológica\n",
        "eventos_por_usuario = df.sort_values('time').groupby('id')['event'].apply(list)\n",
        "\n",
        "# Verifica se a sequência esperada está contida nos eventos do usuário\n",
        "def contem_toda_a_sequencia(eventos):\n",
        "    i = 0\n",
        "    for evento in eventos:\n",
        "        if evento == sequencia_esperada[i]:\n",
        "            i += 1\n",
        "            if i == len(sequencia_esperada):\n",
        "                return True\n",
        "    return False\n",
        "\n",
        "# Aplicar a função a todos os usuários\n",
        "usuarios_com_caminho_completo = eventos_por_usuario.apply(contem_toda_a_sequencia)\n",
        "\n",
        "# Número de usuários com o caminho completo\n",
        "total_completo = usuarios_com_caminho_completo.sum()\n",
        "\n",
        "# Total de usuários únicos\n",
        "total_usuarios = df['id'].nunique()\n",
        "\n",
        "# Proporção\n",
        "proporcao = total_completo / total_usuarios\n",
        "\n",
        "print(f\"🧍 Usuários que fizeram o caminho inteiro: {total_completo}\")\n",
        "print(f\"👥 Total de usuários únicos: {total_usuarios}\")\n",
        "print(f\"📊 Proporção: {proporcao:.2%}\")\n"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "id": "2869e53b",
      "metadata": {},
      "outputs": [],
      "source": [
        "df.groupby('group')['id'].count()"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "id": "f64f6cc8",
      "metadata": {},
      "outputs": [],
      "source": [
        "# Define o evento de interesse para a análise\n",
        "evento = 'PaymentScreenSuccessful'\n",
        "\n",
        "# Conta quantos usuários únicos de cada grupo (A1 e A2) fizeram esse evento\n",
        "fez_evento = df[df['event'] == evento].groupby('group')['id'].nunique()\n",
        "\n",
        "# Conta o total de usuários únicos de cada grupo (independentemente do evento)\n",
        "total = df.groupby('group')['id'].nunique()\n",
        "\n",
        "# Calcula a proporção de usuários que fizeram o evento em cada grupo\n",
        "p1, p2 = fez_evento['A1'] / total['A1'], fez_evento['A2'] / total['A2']\n",
        "\n",
        "# Calcula a proporção combinada dos dois grupos (para usar no erro padrão)\n",
        "p_comb = (fez_evento['A1'] + fez_evento['A2']) / (total['A1'] + total['A2'])\n",
        "\n",
        "# Calcula o erro padrão da diferença entre duas proporções\n",
        "se = (p_comb * (1 - p_comb) * (1/total['A1'] + 1/total['A2'])) ** 0.5\n",
        "\n",
        "# Calcula o valor da estatística z (teste de hipótese)\n",
        "z = (p1 - p2) / se\n",
        "\n",
        "# Calcula o p-valor (probabilidade de observar uma diferença igual ou maior se não houver diferença real)\n",
        "p_valor = 2 * (1 - st.norm.cdf(abs(z)))\n",
        "\n",
        "# Exibe os resultados: quantidade de usuários por grupo que fizeram o evento, proporções e estatísticas\n",
        "print(f'A1: {fez_evento[\"A1\"]}/{total[\"A1\"]}, A2: {fez_evento[\"A2\"]}/{total[\"A2\"]}')\n",
        "print(f'Proporções → A1: {p1:.4f}, A2: {p2:.4f}')\n",
        "print(f'z = {z:.4f}, p = {p_valor:.4f}')\n",
        "\n",
        "# Interpreta o resultado: verifica se há diferença estatística significativa entre os grupos\n",
        "print(\"→ Diferença significativa\" if p_valor < 0.05 else \"→ Sem diferença significativa (A/A OK)\")\n"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "id": "dcaddc17",
      "metadata": {},
      "outputs": [],
      "source": [
        "# 1) Prepara os grupos A1 e A2 (renomeando os valores de 'group' se necessário)\n",
        "df_ctl = df \n",
        "# Total de usuários únicos por grupo\n",
        "totais = df_ctl.groupby('group')['id'].nunique()\n",
        "\n",
        "# Função para calcular o teste z de duas proporções\n",
        "def z_test_prop(k1, n1, k2, n2):\n",
        "    # Proporção combinada\n",
        "    p_comb = (k1 + k2) / (n1 + n2)\n",
        "    # Erro padrão da diferença de proporções\n",
        "    se = np.sqrt(p_comb * (1 - p_comb) * (1/n1 + 1/n2))\n",
        "    # Estatística z\n",
        "    z = (k1/n1 - k2/n2) / se\n",
        "    # P-valor bicaudal\n",
        "    p = 2 * (1 - st.norm.cdf(abs(z)))\n",
        "    return z, p\n",
        "\n",
        "# 2) Identifica o evento mais popular (com maior número de usuários)\n",
        "contagem_eventos = df_ctl.groupby('event')['id'].nunique().sort_values(ascending=False)\n",
        "evento_mais_popular = contagem_eventos.index[0]\n",
        "\n",
        "# 3) Para o evento mais popular, conta os usuários únicos em A1 e A2\n",
        "k1 = df_ctl[(df_ctl['group']=='A1') & (df_ctl['event']==evento_mais_popular)]['id'].nunique()\n",
        "k2 = df_ctl[(df_ctl['group']=='A2') & (df_ctl['event']==evento_mais_popular)]['id'].nunique()\n",
        "n1, n2 = totais['A1'], totais['A2']\n",
        "\n",
        "# Testa a diferença de proporções para todos os eventos\n",
        "resultados = []\n",
        "for ev in contagem_eventos.index:\n",
        "    # Contagem dos usuários que realizaram o evento para A1 e A2\n",
        "    k1 = df_ctl[(df_ctl['group']=='A1') & (df_ctl['event']==ev)]['id'].nunique()\n",
        "    k2 = df_ctl[(df_ctl['group']=='A2') & (df_ctl['event']==ev)]['id'].nunique()\n",
        "    # Calcula o z-test\n",
        "    z, p = z_test_prop(k1, n1, k2, n2)\n",
        "    # Adiciona os resultados à lista\n",
        "    resultados.append((ev, k1, k2, f\"{k1/n1:.2%}\", f\"{k2/n2:.2%}\", round(p, 3)))\n",
        "\n",
        "# Cria um DataFrame para organizar e visualizar os resultados\n",
        "res_df = pd.DataFrame(resultados, columns=['event', 'A1_users', 'A2_users', 'A1_%', 'A2_%', 'p_value'])\n",
        "print(res_df)\n",
        "\n",
        "# 4) Verifica se os grupos estão bem balanceados\n",
        "if (res_df['p_value'] >= 0.05).all():\n",
        "    print(\"\\n✅ Todos os eventos apresentam p ≥ 0.05 → grupos A1 e A2 parecem bem balanceados (teste A/A válido).\")\n",
        "else:\n",
        "    print(\"\\n⚠️ Há pelo menos um evento com p < 0.05 → possível desequilíbrio entre A1 e A2.\")\n"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "id": "b0a04697",
      "metadata": {},
      "outputs": [],
      "source": [
        "\n",
        "# 1) Prepara o DataFrame com A1, A2 e B\n",
        "df_exp = df\n",
        "\n",
        "# 2) Totais de usuários únicos por grupo\n",
        "totais = df_exp.groupby('group')['id'].nunique()\n",
        "total_comb = totais['A1'] + totais['A2']\n",
        "\n",
        "# 3) Função de teste z de duas proporções (retorna p-valor)\n",
        "def z_test(k1, n1, k2, n2):\n",
        "    p_comb = (k1 + k2) / (n1 + n2)\n",
        "    se = np.sqrt(p_comb * (1 - p_comb) * (1/n1 + 1/n2))\n",
        "    z = (k1/n1 - k2/n2) / se\n",
        "    return 2 * (1 - st.norm.cdf(abs(z)))\n",
        "\n",
        "# 4) Monta a tabela\n",
        "resultados = []\n",
        "for ev in df_exp['event'].unique():\n",
        "    kA1 = df_exp[(df_exp['group']=='A1') & (df_exp['event']==ev)]['id'].nunique()\n",
        "    kA2 = df_exp[(df_exp['group']=='A2') & (df_exp['event']==ev)]['id'].nunique()\n",
        "    kB  = df_exp[(df_exp['group']=='B')  & (df_exp['event']==ev)]['id'].nunique()\n",
        "    pA1, pA2, pB = kA1/totais['A1'], kA2/totais['A2'], kB/totais['B']\n",
        "    \n",
        "    resultados.append({\n",
        "        'event':      ev,\n",
        "        'A1_users':   kA1,    'A2_users':   kA2,    'B_users':    kB,\n",
        "        'A1_%':       f'{pA1:.2%}', 'A2_%': f'{pA2:.2%}', 'B_%': f'{pB:.2%}',\n",
        "        'p_A1_vs_B':  round(z_test(kA1, totais['A1'], kB, totais['B']), 3),\n",
        "        'p_A2_vs_B':  round(z_test(kA2, totais['A2'], kB, totais['B']), 3),\n",
        "        'p_comb_vs_B':round(z_test(kA1+kA2, total_comb, kB, totais['B']), 3)\n",
        "    })\n",
        "\n",
        "tabela = pd.DataFrame(resultados).sort_values('event')\n",
        "print(tabela)\n",
        "# Supondo que sua tabela final se chame `tabela`\n",
        "mask_sem_diferenca = (\n",
        "    (tabela['p_A1_vs_B']  >= 0.05) &\n",
        "    (tabela['p_A2_vs_B']  >= 0.05) &\n",
        "    (tabela['p_comb_vs_B']>= 0.05)\n",
        ")\n",
        "\n",
        "if mask_sem_diferenca.all():\n",
        "    print(\"\\n✅ Todos os eventos têm p ≥ 0.05 em A1 vs B, A2 vs B e combinado vs B → grupos bem balanceados; nenhuma diferença significativa.\")\n",
        "else:\n",
        "    print(\"\\n⚠️ Há pelo menos um evento com p < 0.05 em alguma comparação → possível efeito do tratamento ou desequilíbrio na randomização.\")\n"
      ]
    },
    {
      "cell_type": "markdown",
      "id": "a71f61e3",
      "metadata": {},
      "source": [
        "Nenhum p-valor fica abaixo de 0.05, em nenhuma das três comparações para qualquer evento.\n",
        "\n",
        "Isso significa que não há diferença estatisticamente significativa entre o grupo de fontes alteradas (B) e nenhum dos grupos de controle (A1, A2 ou A1 + A2) em termos da proporção de usuários que executaram cada evento.\n",
        "# Conclusões do experimento\n",
        "\n",
        "A randomização dos usuários parece ter funcionado corretamente: os três grupos são estatisticamente equivalentes para todas as ações medida"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "id": "8c216310",
      "metadata": {},
      "outputs": [],
      "source": [
        "alpha = 0.1\n",
        "\n",
        "if (res_df['p_value'] >= alpha).all():\n",
        "    print(f\"\\n✅ Todos os eventos apresentam p ≥ {alpha} → grupos A1 e A2 parecem bem balanceados (teste A/A válido).\")\n",
        "else:\n",
        "    print(f\"\\n⚠️ Há pelo menos um evento com p < {alpha} → possível desequilíbrio entre A1 e A2.\")\n",
        "\n",
        "\n",
        "mask_sem_diferenca = (\n",
        "    (tabela['p_A1_vs_B']  >= alpha) &\n",
        "    (tabela['p_A2_vs_B']  >= alpha) &\n",
        "    (tabela['p_comb_vs_B']>= alpha)\n",
        ")\n",
        "\n",
        "if mask_sem_diferenca.all():\n",
        "    print(f\"\\n✅ Todos os eventos têm p ≥ {alpha} em A1 vs B, A2 vs B e combinado vs B → grupos bem balanceados; nenhuma diferença significativa.\")\n",
        "else:\n",
        "    print(f\"\\n⚠️ Há pelo menos um evento com p < {alpha} em alguma comparação → possível efeito do tratamento ou desequilíbrio na randomização.\")"
      ]
    },
    {
      "cell_type": "markdown",
      "id": "d4d3b481",
      "metadata": {},
      "source": [
        "Em cada um dos comparativos (A1 vs A2, A1 vs B, A2 vs B e combinado vs B), foi utilizado um nível de significância de α = 0,1 para rejeição da hipótese nula (H₀). Esse valor indica que estamos aceitando até 10% de chance de cometer um erro tipo I em cada teste isolado.\n",
        "Foram analisados 5 eventos, com 3 comparações realizadas em cada um (A1 vs B, A2 vs B e A1+A2 vs B), totalizando 15 testes estatísticos.\n",
        "\n",
        "Isso significa que, com α = 0,1, existe uma chance de até 10% de rejeitar uma hipótese nula verdadeira em cada teste, o que aumenta a probabilidade de pelo menos um falso positivo ao realizar múltiplos testes.\n",
        "\n",
        "Para controlar o erro global, uma alternativa é aplicar o ajuste de Bonferroni: α corrigido = 0,05 / 15 ≈ 0,0033 por teste. Outra possibilidade é usar o método de controle da FDR, como Benjamini-Hochberg, que é menos conservador e busca equilibrar descobertas verdadeiras com o risco de falsos positivos.\n",
        "\n",
        "Caso decida aplicar um nível de significância ajustado (como 0,0033), será necessário refazer todos os testes e verificar se os p-valores permanecem abaixo do novo limiar. Isso indicará se ainda há diferenças estatisticamente significativas."
      ]
    },
    {
      "cell_type": "markdown",
      "id": "b036762d",
      "metadata": {},
      "source": [
        "## Conclusão\n",
        "\n",
        "Após a análise detalhada dos logs de eventos do teste A/B, podemos tirar as seguintes conclusões:\n",
        "\n",
        "1.  **Pré-processamento e Análise Exploratória:** Os dados foram carregados, limpos e preparados adequadamente. A análise exploratória revelou um funil de eventos claro (`MainScreenAppear` -> `OffersScreenAppear` -> `CartScreenAppear` -> `PaymentScreenSuccessful`), com a maior taxa de abandono ocorrendo na primeira transição. Cerca de 39% dos usuários que iniciaram o funil completaram o pagamento. Os dados mostraram maior consistência a partir de 31/07/2019, mas a análise utilizou o conjunto completo devido à perda mínima de dados ao filtrar.\n",
        "\n",
        "2.  **Validação do Teste A/A:** A comparação entre os grupos de controle A1 e A2 (teste A/A) não mostrou diferenças estatisticamente significativas nas proporções de usuários para nenhum dos eventos analisados, utilizando o **nível de significância α = 0,1** definido para cada teste individual (todos os p-valores foram maiores que 0,1). Isso confirma que os grupos de controle eram homogêneos e que a divisão dos usuários foi feita corretamente, validando a configuração do experimento.\n",
        "\n",
        "3.  **Resultados do Teste A/B:** A comparação do grupo de teste B (com a nova fonte) contra os grupos de controle A1, A2 e o combinado (A1+A2) também não revelou diferenças estatisticamente significativas em nenhuma das etapas do funil. Todos os p-valores calculados para as 15 comparações A/B foram **superiores ao nível de significância α = 0,1**.\n",
        "\n",
        "4.  **Impacto da Mudança de Fonte:** Com base nos resultados dos testes estatísticos (utilizando um nível de significância **α = 0,1 por teste**), **não há evidências estatísticas para concluir que a alteração da fonte no aplicativo teve um impacto mensurável** na proporção de usuários que progridem através das principais etapas do funil de compra durante o período analisado. A mudança parece ser neutra em relação a essas métricas.\n",
        "\n",
        "5.  **Considerações sobre Testes Múltiplos e Nível de Significância:** Foi utilizado um nível de significância de **α = 0,1** para cada teste individual. Foram realizados 15 testes estatísticos independentes nas comparações A/B (5 eventos x 3 comparações). Embora usar α = 0,1 aumente a chance de erro Tipo I (rejeitar H₀ quando ela é verdadeira) para 10% em cada teste, a realização de múltiplos testes eleva a probabilidade acumulada de ocorrer pelo menos um falso positivo (erro familiar). Métodos como a correção de Bonferroni (α corrigido ≈ 0,0033) ou o controle da Taxa de Falsas Descobertas (FDR) poderiam ser usados para mitigar esse risco. No entanto, como **nenhum dos p-valores individuais sequer se aproximou do limiar inicial de 0,1**, a aplicação dessas correções mais rigorosas não alteraria a conclusão principal. A ausência de significância estatística, mesmo sob um critério individual menos estrito (α = 0,1), reforça a conclusão de que a mudança de fonte provavelmente não teve um efeito detectável.\n",
        "\n",
        "Portanto, o experimento indica fortemente que a alteração da fonte é neutra em relação ao comportamento do usuário no funil de compras principal, conforme medido pelas proporções de conversão entre etapas."
      ]
    }
  ],
  "metadata": {
    "kernelspec": {
      "display_name": "Python 3",
      "language": "python",
      "name": "python3"
    },
    "language_info": {
      "codemirror_mode": {
        "name": "ipython",
        "version": 3
      },
      "file_extension": ".py",
      "mimetype": "text/x-python",
      "name": "python",
      "nbconvert_exporter": "python",
      "pygments_lexer": "ipython3",
      "version": "3.12.5"
    }
  },
  "nbformat": 4,
  "nbformat_minor": 5
}


=== DIRETÓRIO: Sprints\sprint 3 ===

--- ARQUIVO: Sprints\sprint 3\078eb029-d762-4f21-8c07-bfb555d6a3e9.ipynb (sem output) ---
{
  "cells": [
    {
      "cell_type": "markdown",
      "id": "mhIvmmkW414q",
      "metadata": {
        "id": "mhIvmmkW414q"
      },
      "source": [
        "# Introdução\n",
        "\n",
        "O Instacart é uma plataforma de entrega de supermercado onde os clientes podem fazer um pedido no supermercado e depois receber sua compra, semelhante ao funcionamento do Uber Eats e do iFood. O conjunto de dados que fornecemos foi modificado a partir do original. Reduzimos o tamanho dele para que seus cálculos sejam executados mais rapidamente e incluímos valores ausentes e duplicados. Também tivemos o cuidado de preservar as distribuições dos dados originais quando fizemos as alterações.\n",
        "\n",
        "Você precisa completar três etapas. Para cada uma delas, escreva uma breve introdução descrevendo como você pretende concluir a etapa e justifique suas decisões em parágrafos explicativos a medida que você avança na solução. Escreva também uma conclusão para resumir suas conclusões e escolhas.\n",
        "\n"
      ]
    },
    {
      "cell_type": "markdown",
      "id": "3MbyzpOQZ5Or",
      "metadata": {
        "id": "3MbyzpOQZ5Or"
      },
      "source": [
        "## Dicionário de dados\n",
        "\n",
        "Há cinco tabelas no conjunto de dados, e você vai precisar usar todas elas para pré-processar seus dados e fazer AED. Abaixo está um dicionário que lista as colunas de cada tabela e descreve os dados contidos nelas.\n",
        "\n",
        "- `instacart_orders.csv`: cada linha corresponde a um pedido no aplicativo da Instacart\n",
        "    - `'order_id'`: é o número que identifica cada pedido de forma exclusiva\n",
        "    - `'user_id'`: é o número de identificação exclusivo da conta de cada cliente\n",
        "    - `'order_number'`: é o número de vezes que o cliente fez um pedido\n",
        "    - `'order_dow'`: é o dia da semana em que o pedido foi feito (0 é domingo)\n",
        "    - `'order_hour_of_day'`: é a hora do dia em que o pedido foi feito\n",
        "    - `'days_since_prior_order'`: é o número de dias desde que o cliente fez seu pedido anterior\n",
        "\n",
        "\n",
        "\n",
        "\n",
        "- `products.csv`: cada linha corresponde a um produto exclusivo que os clientes podem comprar\n",
        "    - `'product_id'`: é o número de identificação unívoco de cada produto\n",
        "    - `'product_name'`: é o nome do produto\n",
        "    - `'aisle_id'`: é o número de identificação exclusivo de cada categoria de corredor do supermercado\n",
        "    - `'department_id'`: é o número de identificação exclusivo de cada categoria de departamento do supermercado\n",
        "\n",
        "\n",
        "\n",
        "\n",
        "-\t`order_products.csv`: cada linha corresponde a um item incluído em um pedido\n",
        "    -\t`'order_id'`: é o número que identifica cada pedido de forma exclusiva\n",
        "    -\t`'product_id'`: é o número de identificação exclusivo de cada produto\n",
        "    -\t`'add_to_cart_order'`: é a ordem sequencial em que cada item foi colocado no carrinho\n",
        "    -\t`'reordered'`: 0 se o cliente nunca comprou o produto antes, 1 se já o comprou\n",
        "\n",
        "\n",
        "\n",
        "\n",
        "-\t`aisles.csv`\n",
        "    -\t`'aisle_id'`: é o número de identificação exclusivo de cada categoria de corredor do supermercado\n",
        "    -\t`'aisle'`: é o nome do corredor\n",
        "\n",
        "\n",
        "\n",
        "-\t`departments.csv`\n",
        "    -\t`'department_id'`: é o número de identificação exclusivo de cada categoria de departamento do supermercado\n",
        "    -\t`'department'`: é o nome do departamento\n"
      ]
    },
    {
      "cell_type": "markdown",
      "id": "n3Ha_cNSZ8lK",
      "metadata": {
        "id": "n3Ha_cNSZ8lK"
      },
      "source": [
        "# Etapa 1. Visão geral dos dados\n",
        "\n",
        "Leia os arquivos de dados (/datasets/instacart_orders.csv, /datasets/products.csv, /datasets/aisles.csv, /datasets/departments.csv e /datasets/order_products.csv) com `pd.read_csv()` usando os parâmetros apropriados para fazer isso corretamente. Verifique as informações para cada DataFrame criado.\n"
      ]
    },
    {
      "cell_type": "markdown",
      "id": "OmlQPLlyaAfR",
      "metadata": {
        "id": "OmlQPLlyaAfR"
      },
      "source": [
        "## Plano de solução\n",
        "\n",
        "Escreva aqui seu plano para a Etapa 2. Visão geral dos dados\n",
        "\n",
        "Importar as bibliotecas necessárias (pandas, matplotlib.pyplot)\n",
        "Ler os arquivos CSV para DataFrames usando pd.read_csv(), identificando e tratando quaisquer problemas de formatação.\n",
        "Usar .info() para obter informações sobre as colunas de cada DataFrame, seus tipos de dados e a existência de valores nulos.\n",
        "Analisar as informações coletadas para determinar os passos seguintes no processo de limpeza de dados."
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "id": "fbf1adab",
      "metadata": {
        "id": "fbf1adab"
      },
      "outputs": [],
      "source": [
        "import pandas as pd\n",
        "import matplotlib.pyplot as plt# Importe as bibliotecas"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "id": "ad36396d",
      "metadata": {
        "id": "ad36396d"
      },
      "outputs": [],
      "source": [
        "instacart_orders = pd.read_csv(r\"C:\\Users\\jonat\\Documents\\GitHub\\Sprints\\sprint 3\\datasets\\instacart_orders.csv\", sep=';')# leia os conjuntos de dados em DataFrames\n",
        "products = pd.read_csv(r\"C:\\Users\\jonat\\Documents\\GitHub\\Sprints\\sprint 3\\datasets\\products.csv\", sep=';')\n",
        "aisles = pd.read_csv(r\"C:\\Users\\jonat\\Documents\\GitHub\\Sprints\\sprint 3\\datasets\\aisles.csv\", sep=';')\n",
        "departments = pd.read_csv(r\"C:\\Users\\jonat\\Documents\\GitHub\\Sprints\\sprint 3\\datasets\\departments.csv\", sep=';')\n",
        "order_products = pd.read_csv(r\"C:\\Users\\jonat\\Documents\\GitHub\\Sprints\\sprint 3\\datasets\\order_products.csv\", sep=';')"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "id": "ad6a1efa",
      "metadata": {
        "id": "ad6a1efa"
      },
      "outputs": [],
      "source": [
        "instacart_orders.info(show_counts=True)# imprima as informações sobre o DataFrame"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "id": "5130e05e",
      "metadata": {
        "id": "5130e05e"
      },
      "outputs": [],
      "source": [
        "products.info(show_counts=True)# imprima as informações sobre o DataFrame"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "id": "d8370c05",
      "metadata": {
        "id": "d8370c05"
      },
      "outputs": [],
      "source": [
        "aisles.info(show_counts=True)# imprima as informações sobre o DataFrame"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "id": "59e2090f",
      "metadata": {
        "id": "59e2090f"
      },
      "outputs": [],
      "source": [
        "departments.info(show_counts=True)# imprima as informações sobre o DataFrame"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "id": "6fc81694",
      "metadata": {
        "id": "6fc81694"
      },
      "outputs": [],
      "source": [
        "order_products.info(show_counts=True)# imprima as informações sobre o DataFrame"
      ]
    },
    {
      "cell_type": "markdown",
      "id": "t75BD19oaR5f",
      "metadata": {
        "id": "t75BD19oaR5f"
      },
      "source": [
        "## Conclusões\n",
        "\n",
        "Escreva aqui suas conclusões intermediárias da Etapa 1. Visão geral dos dados\n",
        "\n",
        "Podem existir valores nulos nas colunas days_since_prior_order, product_name e add_to_cart_order.\n",
        "Embora o arquivo esteja em formato CSV, a separação dos valores é feita por ponto e vírgula (;).\n",
        "Os arquivos foram separados para otimizar as buscas, tornando-as mais rápidas.\n",
        "O DataFrame order_products é o maior, o que pode exigir atenção especial em relação ao desempenho nos cálculos."
      ]
    },
    {
      "cell_type": "markdown",
      "id": "8RJHqxVmaVsF",
      "metadata": {
        "id": "8RJHqxVmaVsF"
      },
      "source": [
        "# Etapa 2. Preparação de dados\n",
        "\n",
        "Faça o pré-processamento dos dados da seguinte maneira:\n",
        "\n",
        "-\tVerifique e corrija os tipos de dados (por exemplo, certifique-se de que as colunas de ID sejam números inteiros)\n",
        "-\tIdentifique e preencha valores ausentes\n",
        "-\tIdentifique e remova valores duplicados\n",
        "\n",
        "Certifique-se de explicar que tipos de valores ausentes e duplicados você encontrou, como você os preencheu ou removeu, por que escolheu esses métodos e por que você acha que esses valores ausentes e duplicados estavam presentes no conjunto de dados."
      ]
    },
    {
      "cell_type": "markdown",
      "id": "p6poABZQaZYb",
      "metadata": {
        "id": "p6poABZQaZYb"
      },
      "source": [
        "## Plano de solução\n",
        "\n",
        "Escreva aqui seu plano para a Etapa 2. Preparação de dados\n",
        "\n",
        "Transformar colunas em tipos adequados:\n",
        "Identifique os dados que precisam ser convertidos para tipos corretos (como inteiro, float, string, etc.).\n",
        "\n",
        "Lidar com valores nulos ou ausentes:\n",
        "\n",
        "Substitua valores ausentes em colunas numéricas pela média.\n",
        "Substitua valores ausentes em colunas categóricas por \"unknown\".\n",
        "Identificar e remover duplicatas:\n",
        "Verifique duplicatas em seu conjunto de dados e remova-as, mantendo apenas registros únicos."
      ]
    },
    {
      "cell_type": "markdown",
      "id": "07357848-dc64-4156-9cc3-01ff4365226d",
      "metadata": {
        "id": "07357848-dc64-4156-9cc3-01ff4365226d"
      },
      "source": [
        "## Encontre e remova valores duplicados (e descreva por que você está fazendo suas escolhas)"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "id": "d0da1f41",
      "metadata": {},
      "outputs": [],
      "source": []
    },
    {
      "cell_type": "markdown",
      "id": "f179f0a9",
      "metadata": {
        "id": "f179f0a9"
      },
      "source": [
        "### DataFrame `instacart_orders`"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "id": "b99297a5-405a-463d-8535-9adc3da4ad74",
      "metadata": {
        "id": "b99297a5-405a-463d-8535-9adc3da4ad74"
      },
      "outputs": [],
      "source": [
        " # Verificar se há pedidos duplicados\n",
        "print(f\"Existem {instacart_orders['order_id'].duplicated().sum()} linhas duplicadas no dataframe\")\n"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "id": "07d99cad",
      "metadata": {},
      "outputs": [],
      "source": [
        "instacart_orders[instacart_orders[\"order_id\"].duplicated()].sample(5)"
      ]
    },
    {
      "cell_type": "markdown",
      "id": "PEkwUX_gvt5A",
      "metadata": {
        "id": "PEkwUX_gvt5A"
      },
      "source": [
        "Há linhas duplicadas? Se sim, o que elas têm em comum?\n",
        "\n",
        "Sim. Foram duplicadas apenas 2 vezes. "
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "id": "0d44de5d",
      "metadata": {
        "id": "0d44de5d"
      },
      "outputs": [],
      "source": [
        "# Com base nas suas conclusões,\n",
        "\n",
        "instacart_orders[(instacart_orders['order_hour_of_day'] == 2) & (instacart_orders['order_dow'] == 3)]# verifique todos os pedidos feitos às 2h da manhã nas quartas-feiras"
      ]
    },
    {
      "cell_type": "markdown",
      "id": "vu2OWyoqwOx5",
      "metadata": {
        "id": "vu2OWyoqwOx5"
      },
      "source": [
        "O que esse resultado quer dizer?\n",
        "Muitos das linhas duplicadas são das quarta feiras as 2 da manhã."
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "id": "480563c7",
      "metadata": {
        "id": "480563c7"
      },
      "outputs": [],
      "source": [
        "instacart_orders.drop_duplicates(inplace=True)# Remova pedidos duplicados"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "id": "0b2396a2",
      "metadata": {
        "id": "0b2396a2"
      },
      "outputs": [],
      "source": [
        "print(f\"Existem {instacart_orders['order_id'].duplicated().sum()} linhas duplicadas no dataframe\")# Verifique as linhas duplicadas mais uma vez"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "id": "f6113ef1",
      "metadata": {
        "id": "f6113ef1"
      },
      "outputs": [],
      "source": [
        "instacart_orders[(instacart_orders['order_hour_of_day'] == 2) & (instacart_orders['order_dow'] == 3)]# Verifique novamente apenas os IDs de pedidos duplicados"
      ]
    },
    {
      "cell_type": "markdown",
      "id": "5e8905ae",
      "metadata": {
        "id": "5e8905ae"
      },
      "source": [
        "\n",
        "\n",
        "Descreva brevemente suas conclusões e o que você fez com elas.\n",
        "\n",
        "Foram removidas 15 linhas(duplicadas) exatamente deste dia da semana neste horario, o que indica um problema no armazenamento de dados nesse momento da semana. "
      ]
    },
    {
      "cell_type": "markdown",
      "id": "45e6bc46",
      "metadata": {
        "id": "45e6bc46"
      },
      "source": [
        "### DataFrame `products`"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "id": "5f526b5b-8175-46fa-a0fd-441767d50e64",
      "metadata": {
        "id": "5f526b5b-8175-46fa-a0fd-441767d50e64"
      },
      "outputs": [],
      "source": [
        "print(f\"Existem {products.duplicated().sum()} linhas duplicadas\")# Verifique se há linhas completamente duplicadas"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "id": "88daa4f4",
      "metadata": {
        "id": "88daa4f4"
      },
      "outputs": [],
      "source": [
        "products[\"product_id\"].duplicated().sum()# Verifique apenas IDs dos produtos duplicados"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "id": "c773f0bf",
      "metadata": {
        "id": "c773f0bf"
      },
      "outputs": [],
      "source": [
        "products['product_name'].str.lower().duplicated().sum()# Verifique apenas nomes de produtos duplicados (converta os nomes para minúsculas para uma comparação melhor)"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "id": "01efd02e",
      "metadata": {
        "id": "01efd02e"
      },
      "outputs": [],
      "source": [
        "products[products['product_name'].str.lower().duplicated() & ~products['product_name'].isna()].sort_values('product_name')# Verifique os nomes de produtos duplicados que não estão faltando"
      ]
    },
    {
      "cell_type": "markdown",
      "id": "9da8d293",
      "metadata": {
        "id": "9da8d293"
      },
      "source": [
        "Descreva brevemente suas conclusões e o que você fez com elas.\n",
        "\n",
        "Não tem dados duplicados neste DF"
      ]
    },
    {
      "cell_type": "markdown",
      "id": "60f30db1",
      "metadata": {
        "id": "60f30db1"
      },
      "source": [
        "### DataFrame `departments`"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "id": "fb410ad4-0fbf-4b80-bb09-23fdea79afe3",
      "metadata": {
        "id": "fb410ad4-0fbf-4b80-bb09-23fdea79afe3"
      },
      "outputs": [],
      "source": [
        "print(f\"Existem {departments.duplicated().sum()} linhas duplicadas\")# Verifique se há linhas completamente duplicadas"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "id": "332b12bb",
      "metadata": {
        "id": "332b12bb"
      },
      "outputs": [],
      "source": [
        "departments.department_id.duplicated().sum()# Verifique apenas se há IDs dos produtos duplicados"
      ]
    },
    {
      "cell_type": "markdown",
      "id": "bd30d78e",
      "metadata": {
        "id": "bd30d78e"
      },
      "source": [
        "Descreva brevemente suas conclusões e o que você fez com elas.\n",
        "\n",
        "Não tem dados duplicados neste DF"
      ]
    },
    {
      "cell_type": "markdown",
      "id": "889349c1",
      "metadata": {
        "id": "889349c1"
      },
      "source": [
        "### DataFrame `aisles`"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "id": "9da89fb9-4679-40f5-ad0d-c34df753a3f8",
      "metadata": {
        "id": "9da89fb9-4679-40f5-ad0d-c34df753a3f8"
      },
      "outputs": [],
      "source": [
        "print(f\"Existem {aisles.duplicated().sum()} linhas duplicadas\")# Verifique se há linhas completamente duplicadas"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "id": "da7c2822",
      "metadata": {
        "id": "da7c2822"
      },
      "outputs": [],
      "source": [
        "departments.department_id.duplicated().sum()# Verifique apenas se há IDs dos produtos duplicados"
      ]
    },
    {
      "cell_type": "markdown",
      "id": "ac63826f",
      "metadata": {
        "id": "ac63826f"
      },
      "source": [
        "Descreva brevemente suas conclusões e o que você fez com elas.\n",
        "\n",
        "Não tem dados duplicados neste DF"
      ]
    },
    {
      "cell_type": "markdown",
      "id": "274cd06a",
      "metadata": {
        "id": "274cd06a"
      },
      "source": [
        "### DataFrame `order_products`"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "id": "52326689-84a8-4b8f-a881-7c68780f62c9",
      "metadata": {
        "id": "52326689-84a8-4b8f-a881-7c68780f62c9"
      },
      "outputs": [],
      "source": [
        "print(f\"Existem {order_products.duplicated().sum()} linhas duplicadas\")# Verifique se há linhas completamente duplicadas"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "id": "7b861391",
      "metadata": {
        "id": "7b861391"
      },
      "outputs": [],
      "source": [
        "print(\"Duplicatas em 'product_id' e 'order_id':\", order_products.duplicated(subset=[\"product_id\", \"order_id\"]).sum())\n",
        "# Verifique mais uma vez se há outros casos complicados de duplicados"
      ]
    },
    {
      "cell_type": "markdown",
      "id": "0b890492",
      "metadata": {
        "id": "0b890492"
      },
      "source": [
        "Descreva brevemente suas conclusões e o que você fez com elas.\n",
        "\n",
        "Não tem dados duplicados neste DF"
      ]
    },
    {
      "cell_type": "markdown",
      "id": "1e46de76",
      "metadata": {
        "id": "1e46de76"
      },
      "source": [
        "## Encontre e remova valores ausentes\n",
        "\n",
        "\n",
        "Ao processarmos valores duplicados, observamos que também temos valores ausentes que precisamos investigar nas seguintes colunas:\n",
        "\n",
        "*\tA coluna `'product_name'` da tabela products.\n",
        "*\tA coluna `'days_since_prior_order'` da tabela orders.\n",
        "*\tA coluna `'add_to_cart_order'` da tabela order_products.\n"
      ]
    },
    {
      "cell_type": "markdown",
      "id": "c0aebd78",
      "metadata": {
        "id": "c0aebd78"
      },
      "source": [
        "### DataFrame `products`"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "id": "fe4a8b0f",
      "metadata": {
        "id": "fe4a8b0f"
      },
      "outputs": [],
      "source": [
        "products['product_name'].isnull().sum()# Encontre valores ausentes na coluna 'product_name'"
      ]
    },
    {
      "cell_type": "markdown",
      "id": "-A6x1AbJhjkp",
      "metadata": {
        "id": "-A6x1AbJhjkp"
      },
      "source": [
        "Descreva brevemente suas conclusões."
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "id": "e96167bc",
      "metadata": {
        "id": "e96167bc"
      },
      "outputs": [],
      "source": [
        "print(products[products['product_name'].isna()]['aisle_id'].value_counts())# Todos os nomes de produtos ausentes estão associados com o corredor de ID 100?"
      ]
    },
    {
      "cell_type": "markdown",
      "id": "WRpIfXRphpSL",
      "metadata": {
        "id": "WRpIfXRphpSL"
      },
      "source": [
        "Descreva brevemente suas conclusões.\n",
        "\n",
        "Todos os dados duplicados(1258) do ID 100."
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "id": "8fd0a541",
      "metadata": {
        "id": "8fd0a541"
      },
      "outputs": [],
      "source": [
        "print(products[products['product_name'].isnull()]['department_id'].value_counts())# Todos os nomes de produtos ausentes estão associados com o departamento de ID 21?"
      ]
    },
    {
      "cell_type": "markdown",
      "id": "qDpdYn1Fht_I",
      "metadata": {
        "id": "qDpdYn1Fht_I"
      },
      "source": [
        "Descreva brevemente suas conclusões.\n",
        "\n",
        "Todos os erros veio do departamento 21."
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "id": "325c3464",
      "metadata": {
        "id": "325c3464"
      },
      "outputs": [],
      "source": [
        "print(aisles[aisles['aisle_id'] == 100])\n",
        "print(departments[departments['department_id'] == 21])# Use as tabelas department e aisle para verificar os dados do corredor com ID 100 e do departamento com ID 21."
      ]
    },
    {
      "cell_type": "markdown",
      "id": "nqhSTUPhhvEJ",
      "metadata": {
        "id": "nqhSTUPhhvEJ"
      },
      "source": [
        "Descreva brevemente suas conclusões.\n",
        "\n",
        "Não tem dados sobre o departamento 21 e o ID 100"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "id": "6b295120",
      "metadata": {
        "id": "6b295120"
      },
      "outputs": [],
      "source": [
        "products['product_name'] = products['product_name'].fillna('Unknown')\n",
        "print(\"Valores ausentes em product_name após tratamento:\", products['product_name'].isnull().sum())# Preencha nomes de produtos ausentes com 'Unknown'"
      ]
    },
    {
      "cell_type": "markdown",
      "id": "fc70e5ad",
      "metadata": {
        "id": "fc70e5ad"
      },
      "source": [
        "Descreva brevemente suas conclusões e o que você fez com elas.\n",
        "\n",
        "\n",
        "Há 125 valores ausentes na coluna product_name, todos associados ao corredor 100 e departamento 21. Estes valores foram preenchidos com a string 'Unknown', como sugerido no notebook."
      ]
    },
    {
      "cell_type": "markdown",
      "id": "7eb45c86",
      "metadata": {
        "id": "7eb45c86"
      },
      "source": [
        "### DataFrame `orders`"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "id": "93e41d96",
      "metadata": {
        "id": "93e41d96"
      },
      "outputs": [],
      "source": [
        "print(instacart_orders.isna().sum())# Encontre os valores ausentes"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "id": "166e5a86",
      "metadata": {
        "id": "166e5a86"
      },
      "outputs": [],
      "source": [
        "# Filtrar clientes que não estão no primeiro pedido\n",
        "not_first_order = instacart_orders[instacart_orders[\"order_number\"] > 1]\n",
        "\n",
        "# Verificar valores ausentes nesse subconjunto\n",
        "print(not_first_order.isna().sum())\n",
        "# Há valores ausentes para os clientes que não estão fazendo o primeiro pedido?"
      ]
    },
    {
      "cell_type": "markdown",
      "id": "4e23d089",
      "metadata": {
        "id": "4e23d089"
      },
      "source": [
        "Descreva brevemente suas conclusões e o que você fez com elas."
      ]
    },
    {
      "cell_type": "markdown",
      "id": "69dc9ca4",
      "metadata": {
        "id": "69dc9ca4"
      },
      "source": [
        "### DataFrame `order_products`"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "id": "b8240253",
      "metadata": {
        "id": "b8240253"
      },
      "outputs": [],
      "source": [
        "print(\"Valores ausentes em add_to_cart_order:\", order_products['add_to_cart_order'].isnull().sum())# Encontre os valores ausentes"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "id": "9a78e5ee",
      "metadata": {
        "id": "9a78e5ee"
      },
      "outputs": [],
      "source": [
        "print(\"Valor mínimo:\", order_products['add_to_cart_order'].min())\n",
        "print(\"Valor máximo:\", order_products['add_to_cart_order'].max())# Quais são os valores mínimo e máximo dessa coluna?"
      ]
    },
    {
      "cell_type": "markdown",
      "id": "-Z2Ja215jW78",
      "metadata": {
        "id": "-Z2Ja215jW78"
      },
      "source": [
        "Descreva brevemente suas conclusões.\n",
        "\n",
        "Existem 836 valores ausentes, sendo o valor minimo 1 e o maximo 64"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "id": "ab9d0c2b",
      "metadata": {
        "id": "ab9d0c2b"
      },
      "outputs": [],
      "source": [
        "# Salve todos os IDs dos pedidos com pelo menos um valor ausente em 'add_to_cart_order'\n",
        "missing_order_ids = order_products[order_products['add_to_cart_order'].isnull()]['order_id'].unique()\n",
        "missing_order_ids"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "id": "54c31695",
      "metadata": {
        "id": "54c31695"
      },
      "outputs": [],
      "source": [
        "# Todos os pedidos com valores ausentes contêm mais de 64 produtos?\n",
        "# Agrupe os pedidos com dados ausentes por ID de pedido\n",
        "# Conte o número de 'product_id' em cada pedido e verifique o valor mínimo da contagem\n",
        "grouped = order_products[order_products['order_id'].isin(missing_order_ids)].groupby('order_id')['product_id'].count()\n",
        "print(f\"Número de itens no pedido com valores nulos em add_to_cart_order: {grouped.min()}\")\n"
      ]
    },
    {
      "cell_type": "markdown",
      "id": "p9V6pddtjglj",
      "metadata": {
        "id": "p9V6pddtjglj"
      },
      "source": [
        "Descreva brevemente suas conclusões.\n",
        "\n",
        "Os valores ausentes em add_to_cart_order ocorrem quando há pedidos com mais de 64 produtos. "
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "id": "7a987d08",
      "metadata": {
        "id": "7a987d08"
      },
      "outputs": [],
      "source": [
        "order_products['add_to_cart_order'] = order_products['add_to_cart_order'].fillna(999).astype(int)\n",
        "print(\"Valores ausentes em add_to_cart_order após tratamento:\", order_products['add_to_cart_order'].isnull().sum())# Substitua valores ausentes na coluna 'add_to_cart_order' por 999 e converta a coluna para o tipo integer"
      ]
    },
    {
      "cell_type": "markdown",
      "id": "fea4bcc7",
      "metadata": {
        "id": "fea4bcc7"
      },
      "source": [
        "Descreva brevemente suas conclusões e o que você fez com elas.\n",
        "\n",
        "Essa coluna foi preenchida com o valor 999, e foi feita a conversão para o tipo integer."
      ]
    },
    {
      "cell_type": "markdown",
      "id": "RnplPFY1gSrb",
      "metadata": {
        "id": "RnplPFY1gSrb"
      },
      "source": [
        "## Conclusões\n",
        "\n",
        "Escreva aqui suas conclusões intermediárias da Etapa 2. Preparação de dados\n",
        "\n",
        "Foram removidas 110 linhas duplicadas do DataFrame orders.\n",
        "Os nomes de produtos ausentes no DataFrame products foram preenchidos com 'Unknown'.\n",
        "Os valores ausentes em days_since_prior_order no DataFrame orders foram preenchidos com 0, já que isso indica o primeiro pedido de um usuário.\n",
        "Os valores ausentes na coluna add_to_cart_order do DataFrame order_products foram preenchidos com 999."
      ]
    },
    {
      "cell_type": "markdown",
      "id": "UjrOIwTcz3ri",
      "metadata": {
        "id": "UjrOIwTcz3ri"
      },
      "source": [
        "# Etapa 3. Análise de dados\n",
        "\n",
        "Quando os dados estiverem processados ​​e prontos, execute a seguinte análise:"
      ]
    },
    {
      "cell_type": "markdown",
      "id": "turkish-kidney",
      "metadata": {
        "id": "turkish-kidney"
      },
      "source": [
        "# [A] Fácil (é necessário concluir tudo para passar)\n",
        "\n",
        "1.\tVerifique se os valores nas colunas `'order_hour_of_day'` e `'order_dow'` na tabela `orders` fazem sentido (ou seja, os valores da coluna  `'order_hour_of_day'` variam de 0 a 23 e os da `'order_dow'` variam de 0 a 6).\n",
        "2.\tCrie um gráfico que mostre quantas pessoas fazem pedidos a cada hora do dia.\n",
        "3.\tCrie um gráfico que mostre em que dia da semana as pessoas fazem compras.\n",
        "4.\tCrie um gráfico que mostre quanto tempo as pessoas esperam até fazer seu próximo pedido e comente sobre os valores mínimo e máximo.\n"
      ]
    },
    {
      "cell_type": "markdown",
      "id": "short-capability",
      "metadata": {
        "id": "short-capability"
      },
      "source": [
        "### [A1] Verifique se os valores fazem sentido"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "id": "growing-fruit",
      "metadata": {
        "id": "growing-fruit"
      },
      "outputs": [],
      "source": [
        "print(instacart_orders['order_hour_of_day'].unique())"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "id": "accessory-malaysia",
      "metadata": {
        "id": "accessory-malaysia"
      },
      "outputs": [],
      "source": [
        "print(\"Valores únicos em order_dow:\", instacart_orders['order_dow'].unique())"
      ]
    },
    {
      "cell_type": "markdown",
      "id": "hmR2GNQ6lCsX",
      "metadata": {
        "id": "hmR2GNQ6lCsX"
      },
      "source": [
        "Escreva suas conclusões aqui\n",
        "Os valores de order_hour_of_day variam de 0 a 23, e os valores de order_dow variam de 0 a 6, o que está de acordo com as descrições dos dados."
      ]
    },
    {
      "cell_type": "markdown",
      "id": "a6743a70",
      "metadata": {
        "id": "a6743a70"
      },
      "source": [
        "### [A2] Quantas pessoas fazem pedidos a cada hora do dia?"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "id": "a36cca27",
      "metadata": {
        "id": "a36cca27"
      },
      "outputs": [],
      "source": [
        "hour_counts = instacart_orders['order_hour_of_day'].value_counts().sort_index()\n"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "id": "6e3b788c",
      "metadata": {},
      "outputs": [],
      "source": [
        "plt.figure(figsize=(10, 6))\n",
        "plt.bar(hour_counts.index, hour_counts.values)\n",
        "plt.title('Número de Pedidos por Hora do Dia')\n",
        "plt.xlabel('Hora do Dia')\n",
        "plt.ylabel('Número de Pedidos')\n",
        "plt.show()"
      ]
    },
    {
      "cell_type": "markdown",
      "id": "11270eed",
      "metadata": {
        "id": "11270eed"
      },
      "source": [
        "Escreva suas conclusões aqui\n",
        "\n",
        "A maioria dos pedidos é feita entre as 10h e as 17h, com um pico por volta das 14h."
      ]
    },
    {
      "cell_type": "markdown",
      "id": "documented-command",
      "metadata": {
        "id": "documented-command"
      },
      "source": [
        "### [A3] Em que dia da semana as pessoas compram produtos alimentícios?"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "id": "chief-digit",
      "metadata": {
        "id": "chief-digit"
      },
      "outputs": [],
      "source": [
        "dow_counts = instacart_orders['order_dow'].value_counts().sort_index()"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "id": "8a4f1335",
      "metadata": {},
      "outputs": [],
      "source": [
        "plt.figure(figsize=(10, 6))\n",
        "plt.bar(dow_counts.index, dow_counts.values)\n",
        "plt.title('Número de Pedidos por Dia da Semana')\n",
        "plt.xlabel('Dia da Semana (0 = Domingo)')\n",
        "plt.ylabel('Número de Pedidos')\n",
        "plt.show()"
      ]
    },
    {
      "cell_type": "markdown",
      "id": "dominant-lightning",
      "metadata": {
        "id": "dominant-lightning"
      },
      "source": [
        "Escreva suas conclusões aqui\n",
        "\n",
        " Os dias 0 (Domingo) e 1 (Segunda) são os dias com mais pedidos."
      ]
    },
    {
      "cell_type": "markdown",
      "id": "cutting-concert",
      "metadata": {
        "id": "cutting-concert"
      },
      "source": [
        "### [A4] Quanto tempo as pessoas esperam até fazer outro pedido?"
      ]
    },
    {
      "cell_type": "markdown",
      "id": "discrete-vertex",
      "metadata": {
        "id": "discrete-vertex"
      },
      "source": [
        "Escreva suas conclusões \n",
        "\n",
        "O tempo entre pedidos varia bastante. O valor mínimo é 0 (possivelmente quando os pedidos são feitos no mesmo dia) e o valor máximo é 30. Há um pico na frequência de pedidos após 7 dias."
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "id": "gMOIimGd5VNb",
      "metadata": {
        "id": "gMOIimGd5VNb"
      },
      "outputs": [],
      "source": [
        "plt.figure(figsize=(10, 6))\n",
        "plt.hist(instacart_orders['days_since_prior_order'], bins=30, color='blue', edgecolor='black')\n",
        "plt.title('Distribuição do Tempo entre Pedidos')\n",
        "plt.xlabel('Dias Desde o Pedido Anterior')\n",
        "plt.ylabel('Frequência')\n",
        "plt.show()"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "id": "e2ea414d",
      "metadata": {},
      "outputs": [],
      "source": [
        "print(\"Valor mínimo:\", instacart_orders['days_since_prior_order'][instacart_orders['days_since_prior_order'] != 0.0].min())\n",
        "print(\"Valor máximo:\", instacart_orders['days_since_prior_order'].max())"
      ]
    },
    {
      "cell_type": "markdown",
      "id": "tight-staff",
      "metadata": {
        "id": "tight-staff"
      },
      "source": [
        "# [B] Médio (é necessário concluir tudo para passar)\n",
        "\n",
        "1.\tHá alguma diferença nas distribuições de `'order_hour_of_day'` nas quartas e sábados? Construa gráficos de barras para ambos os dias no mesmo gráfico e descreva as diferenças que você notou.\n",
        "2.\tConstrua um gráfico de distribuição para o número de pedidos que os clientes fazem (ou seja, quantos clientes fizeram apenas 1 pedido, quantos fizeram apenas 2, quantos apenas 3, etc.)\n",
        "3.\tQuais são os 20 produtos comprados com mais frequência? Exiba os IDs e nomes.\n"
      ]
    },
    {
      "cell_type": "markdown",
      "id": "packed-classic",
      "metadata": {
        "id": "packed-classic"
      },
      "source": [
        "### [B1] Diferenças nas quartas e sábados em `'order_hour_of_day'`. Crie gráficos de barras para ambos os dias e descreva as diferenças."
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "id": "d89b8403",
      "metadata": {
        "id": "d89b8403"
      },
      "outputs": [],
      "source": [
        "wednesday_hours = instacart_orders[instacart_orders['order_dow'] == 3]['order_hour_of_day'].value_counts().sort_index()\n",
        "saturday_hours = instacart_orders[instacart_orders['order_dow'] == 6]['order_hour_of_day'].value_counts().sort_index()\n",
        "combined_hours = pd.concat([wednesday_hours, saturday_hours], axis=1, keys=['Quarta-feira', 'Sábado'])\n",
        "\n",
        "combined_hours"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "id": "94e54e8a",
      "metadata": {
        "id": "94e54e8a"
      },
      "outputs": [],
      "source": [
        "plt.figure(figsize=(12, 6))\n",
        "\n",
        "# Criando gráfico de barras para ambos os dias\n",
        "plt.bar(wednesday_hours.index - 0.2, wednesday_hours.values, width=0.4, label='Quarta-feira')\n",
        "plt.bar(saturday_hours.index + 0.2, saturday_hours.values, width=0.4, label='Sábado')\n",
        "\n",
        "plt.xlabel('Hora do Dia')\n",
        "plt.ylabel('Número de Pedidos')\n",
        "plt.title('Comparação de Pedidos entre Quarta-feira e Sábado')\n",
        "plt.legend()\n",
        "plt.show()"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "id": "47cc06a5",
      "metadata": {},
      "outputs": [],
      "source": [
        "# Criando gráfico de barras para ambos os dias\n",
        "combined_hours.plot(kind='bar',width=2, figsize=(12, 6), alpha=0.7)\n",
        "\n",
        "plt.xlabel('Hora do Dia')\n",
        "plt.ylabel('Número de Pedidos')\n",
        "plt.title('Comparação de Pedidos entre Quarta-feira e Sábado')\n",
        "plt.legend()\n",
        "plt.show()"
      ]
    },
    {
      "cell_type": "markdown",
      "id": "e689f86f",
      "metadata": {},
      "source": [
        "Conclusão: A distribuição de pedidos ao longo do dia parece similar entre quarta-feira e sábado. No entanto, o número total de pedidos no sábado é sensivelmente maior do que na quarta."
      ]
    },
    {
      "cell_type": "markdown",
      "id": "charitable-congo",
      "metadata": {
        "id": "charitable-congo"
      },
      "source": [
        "Escreva suas conclusões aqui"
      ]
    },
    {
      "cell_type": "markdown",
      "id": "e3891143",
      "metadata": {
        "id": "e3891143"
      },
      "source": [
        "### [B2] Qual é a distribuição do número de pedidos por cliente?"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "id": "edb94a10",
      "metadata": {},
      "outputs": [],
      "source": [
        "orders_per_user = instacart_orders['user_id'].value_counts()\n",
        "orders_per_user_counts = orders_per_user.value_counts().sort_index()"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "id": "3380849e",
      "metadata": {},
      "outputs": [],
      "source": [
        "plt.figure(figsize=(10, 6))\n",
        "plt.bar(orders_per_user_counts.index, orders_per_user_counts.values)\n",
        "\n",
        "# Adicionar título e rótulos\n",
        "plt.title('Distribuição do Número de Pedidos por Cliente')\n",
        "plt.xlabel('Número de Pedidos')\n",
        "plt.ylabel('Número de Clientes')\n",
        "\n",
        "# Mostrar o gráfico\n",
        "plt.show()"
      ]
    },
    {
      "cell_type": "markdown",
      "id": "d2eff7d5",
      "metadata": {
        "id": "d2eff7d5"
      },
      "source": [
        "Escreva suas conclusões aqui\n",
        "\n",
        " A maioria dos clientes faz entre 3 e 10 pedidos. O gráfico mostra a frequência com que os clientes fazem um determinado número de pedidos."
      ]
    },
    {
      "cell_type": "markdown",
      "id": "54a0319c",
      "metadata": {
        "id": "54a0319c"
      },
      "source": [
        "### [B3] Quais são os 20 produtos mais populares? Exiba os IDs e nomes."
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "id": "exterior-arizona",
      "metadata": {
        "id": "exterior-arizona",
        "scrolled": true
      },
      "outputs": [],
      "source": [
        "top_products = order_products['product_id'].value_counts().head(20)"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "id": "universal-facial",
      "metadata": {
        "id": "universal-facial"
      },
      "outputs": [],
      "source": [
        "top_products_df = pd.merge(top_products.to_frame(), products, left_index=True, right_on='product_id')\n",
        "print(\"Top 20 produtos mais comprados:\")\n",
        "print(top_products_df[['product_id', 'product_name']])"
      ]
    },
    {
      "cell_type": "markdown",
      "id": "7df00f47",
      "metadata": {
        "id": "7df00f47"
      },
      "source": [
        "Escreva suas conclusões aqui\n",
        "\n",
        "Os 20 produtos mais populares estão listados acima, com seus IDs e nomes."
      ]
    },
    {
      "cell_type": "markdown",
      "id": "gross-theme",
      "metadata": {
        "id": "gross-theme"
      },
      "source": [
        "# [C] Difícil (é necessário concluir pelo menos duas perguntas para passar)\n",
        "\n",
        "1.\tQuantos itens as pessoas normalmente compram em um pedido? Como fica a distribuição?\n",
        "2.\tQuais são os 20 principais itens incluídos mais frequentemente em pedidos repetidos? Exiba os IDs e nomes.\n",
        "3.\tPara cada produto, qual parcela de seus pedidos são repetidos? Crie uma tabela com colunas de ID e nome do produto e a proporção de pedidos repetidos.\n",
        "4.\tPara cada cliente, qual proporção de todos os seus pedidos são repetidos?\n",
        "5.\tQuais são os 20 principais itens que as pessoas colocam nos carrinhos antes de todos os outros? Exiba o ID do produto, nome e o número de vezes que ele foi o primeiro a ser adicionado a um carrinho.\n"
      ]
    },
    {
      "cell_type": "markdown",
      "id": "romantic-deposit",
      "metadata": {
        "id": "romantic-deposit"
      },
      "source": [
        "### [C1] Quantos itens as pessoas normalmente compram em um pedido? Como fica a distribuição?"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "id": "virtual-punch",
      "metadata": {
        "id": "virtual-punch"
      },
      "outputs": [],
      "source": [
        "items_per_order = order_products['order_id'].value_counts()"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "id": "sensitive-breathing",
      "metadata": {
        "id": "sensitive-breathing"
      },
      "outputs": [],
      "source": [
        "plt.figure(figsize=(10, 6))\n",
        "plt.hist(items_per_order, bins=30)  # O parâmetro bins pode ser ajustado conforme necessário\n",
        "plt.title('Distribuição do Número de Itens por Pedido')\n",
        "plt.xlabel('Número de Itens')\n",
        "plt.ylabel('Frequência')\n",
        "plt.show()"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "id": "completed-frank",
      "metadata": {
        "id": "completed-frank"
      },
      "outputs": [],
      "source": [
        "print(\"Média de itens por pedido:\", items_per_order.mean())"
      ]
    },
    {
      "cell_type": "markdown",
      "id": "designed-mortality",
      "metadata": {
        "id": "designed-mortality"
      },
      "source": [
        "Escreva suas conclusões aqui\n",
        " O número médio de itens por pedido é de aproximadamente 10. A maioria dos pedidos contém entre 5 e 15 itens."
      ]
    },
    {
      "cell_type": "markdown",
      "id": "5e6b5537",
      "metadata": {
        "id": "5e6b5537"
      },
      "source": [
        "### [C2] Quais são os 20 principais itens incluídos com mais frequência em pedidos repetidos? Exiba os IDs e nomes."
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "id": "9374e55a",
      "metadata": {
        "id": "9374e55a"
      },
      "outputs": [],
      "source": [
        "reordered_products = order_products[order_products['reordered'] == 1]['product_id'].value_counts().head(20)\n",
        "reordered_products_df = pd.merge(reordered_products.to_frame(), products, left_index=True, right_on='product_id')"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "id": "possible-change",
      "metadata": {
        "id": "possible-change",
        "scrolled": true
      },
      "outputs": [],
      "source": [
        "print(\"Top 20 produtos repetidos:\")\n",
        "print(reordered_products_df[['product_id', 'product_name']])"
      ]
    },
    {
      "cell_type": "markdown",
      "id": "80e70c74",
      "metadata": {
        "id": "80e70c74"
      },
      "source": [
        "Escreva suas conclusões aqui\n",
        "\n",
        "Os 20 produtos mais frequentemente incluídos em pedidos repetidos estão listados acima com seus IDs e nomes."
      ]
    },
    {
      "cell_type": "markdown",
      "id": "9d312b14",
      "metadata": {
        "id": "9d312b14"
      },
      "source": [
        "### [C3] Para cada produto, qual parcela de todos os pedidos dele são repetidos?"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "id": "8ae9f4b1",
      "metadata": {
        "id": "8ae9f4b1"
      },
      "outputs": [],
      "source": [
        "total_product_orders = order_products.groupby('product_id')['order_id'].count()\n",
        "reordered_product_orders = order_products[order_products['reordered'] == 1].groupby('product_id')['order_id'].count()"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "id": "103e7fe1",
      "metadata": {
        "id": "103e7fe1"
      },
      "outputs": [],
      "source": [
        "reorder_ratio = (reordered_product_orders / total_product_orders).fillna(0)"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "id": "social-individual",
      "metadata": {
        "id": "social-individual"
      },
      "outputs": [],
      "source": [
        "reorder_ratio_df = pd.merge(reorder_ratio.to_frame(), products, left_index=True, right_on='product_id')\n",
        "reorder_ratio_df.rename(columns = {'order_id': 'reorder_ratio'}, inplace = True)\n",
        "print(reorder_ratio_df[['product_id', 'product_name', 'reorder_ratio']].head())"
      ]
    },
    {
      "cell_type": "markdown",
      "id": "I10dEIAyldcO",
      "metadata": {
        "id": "I10dEIAyldcO"
      },
      "source": [
        "Escreva suas conclusões aqui\n",
        "\n",
        "O código mostra as primeiras linhas dos produtos e suas proporções de reordem."
      ]
    },
    {
      "cell_type": "markdown",
      "id": "subject-boxing",
      "metadata": {
        "id": "subject-boxing"
      },
      "source": [
        "### [C4] Para cada cliente, qual proporção de todos os seus pedidos são repetidos?"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "id": "medical-couple",
      "metadata": {
        "id": "medical-couple",
        "scrolled": true
      },
      "outputs": [],
      "source": [
        "total_user_orders = instacart_orders.groupby('user_id')['order_id'].count()\n",
        "reordered_user_orders = instacart_orders.merge(order_products[order_products['reordered'] == 1], on='order_id').groupby('user_id')['order_id'].count()"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "id": "8892e4b4",
      "metadata": {
        "id": "8892e4b4"
      },
      "outputs": [],
      "source": [
        "reorder_user_ratio = (reordered_user_orders / total_user_orders).fillna(0)\n",
        "print(\"Proporção de pedidos repetidos por cliente:\")\n",
        "print(reorder_user_ratio.head())"
      ]
    },
    {
      "cell_type": "markdown",
      "id": "BgJSvXDsleXz",
      "metadata": {
        "id": "BgJSvXDsleXz"
      },
      "source": [
        "Escreva suas conclusões aqui\n",
        "\n",
        "O código mostra as primeiras linhas da proporção de pedidos repetidos por cliente"
      ]
    },
    {
      "cell_type": "markdown",
      "id": "92d35137",
      "metadata": {
        "id": "92d35137"
      },
      "source": [
        "### [C5] Quais são os 20 principais itens que as pessoas colocam nos carrinhos antes de todos os outros?"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "id": "0ae57274",
      "metadata": {
        "id": "0ae57274",
        "scrolled": true
      },
      "outputs": [],
      "source": [
        "first_added_products = order_products[order_products['add_to_cart_order'] == 1]['product_id'].value_counts().head(20)\n",
        "first_added_products_df = pd.merge(first_added_products.to_frame(), products, left_index=True, right_on='product_id')"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "id": "forty-netherlands",
      "metadata": {
        "id": "forty-netherlands",
        "scrolled": true
      },
      "outputs": [],
      "source": [
        "print(\"Top 20 itens adicionados primeiro ao carrinho:\")\n",
        "print(first_added_products_df[['product_id', 'product_name', 'count']])"
      ]
    },
    {
      "cell_type": "markdown",
      "id": "28ce9872",
      "metadata": {
        "id": "28ce9872"
      },
      "source": [
        "Escreva suas conclusões aqui\n",
        "\n",
        "Os 20 itens mais colocados no carrinho como primeiro item estão listados acima com seus IDs e nomes."
      ]
    },
    {
      "cell_type": "markdown",
      "id": "TisH_5Cp3wAi",
      "metadata": {
        "id": "TisH_5Cp3wAi"
      },
      "source": [
        "# Conclusão geral do projeto:"
      ]
    },
    {
      "cell_type": "markdown",
      "id": "77b0a720",
      "metadata": {},
      "source": [
        "Este projeto envolveu a limpeza, preparação e análise de um conjunto de dados de pedidos de supermercado. Através deste processo, foi possível identificar padrões de compra, como os horários e dias de maior demanda, os produtos mais populares e as preferências de reordenação dos clientes. Foi importante notar a necessidade de tratamento de valores ausentes e duplicados para garantir a integridade da análise. A combinação das etapas de limpeza e análise permitiu a extração de insights valiosos para o negócio."
      ]
    }
  ],
  "metadata": {
    "colab": {
      "provenance": []
    },
    "kernelspec": {
      "display_name": "Python 3",
      "language": "python",
      "name": "python3"
    },
    "language_info": {
      "codemirror_mode": {
        "name": "ipython",
        "version": 3
      },
      "file_extension": ".py",
      "mimetype": "text/x-python",
      "name": "python",
      "nbconvert_exporter": "python",
      "pygments_lexer": "ipython3",
      "version": "3.12.5"
    },
    "toc": {
      "base_numbering": 1,
      "nav_menu": {},
      "number_sections": true,
      "sideBar": true,
      "skip_h1_title": true,
      "title_cell": "Table of Contents",
      "title_sidebar": "Contents",
      "toc_cell": false,
      "toc_position": {},
      "toc_section_display": true,
      "toc_window_display": false
    }
  },
  "nbformat": 4,
  "nbformat_minor": 5
}


=== DIRETÓRIO: Sprints\sprint 3\datasets ===


=== DIRETÓRIO: Sprints\sprint 4 ===

--- ARQUIVO: Sprints\sprint 4\081db06e-c3f8-43e6-91d6-7c1394cf7880 (1).ipynb (sem output) ---
{
  "cells": [
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        "\n",
        "\n",
        "Olá estudante!\n",
        "\n",
        "Me chamo Rafael Meirelles e irei revisar o seu projeto hoje e em eventuais futuras submissões até que ele cumpra todos os requisitos para o aceite.\n",
        "Conte comigo nessa jornada e não se preocupe se precisar ajustar alguns detalhes, é parte do processo e fundamental para que você exercite os conceitos que vem aprendendo e assim melhore a qualidade dos seus códigos e análises.\n",
        "\n",
        "**Peço que mantenha e não altereos comentários que eu fizer por aqui para que possamos nos localizar posteriormente, ok?**\n",
        "\n",
        "Mais uma coisa, vamos utilizar um código de cores para você entender os meus feedbacks no seu notebook. Funciona assim:\n",
        "\n",
        "\n",
        "<div class=\"alert alert-danger\">\n",
        "<strong>Vermelho</strong>\n",
        "\n",
        "Erro que precisa ser consertado, caso contrário, seu projeto não pode ser aceito\n",
        "\n",
        "</div>\n",
        "\n",
        "<div class=\"alert alert-warning\">\n",
        "<strong>Amarelo</strong>\n",
        "\n",
        "Alerta de um erro não crítco, mas que pode ser corrigido para melhoria geral no seu código/análise\n",
        "\n",
        "</div>\n",
        "\n",
        "<div class=\"alert alert-success\">\n",
        "<strong>Verde</strong>\n",
        "\n",
        "Elogios\n",
        "</div>\n",
        "\n",
        "<div class=\"alert alert-info\">\n",
        "<strong>Comentário do estudante</strong>\n",
        "\n",
        "Use uma caixa azul como essa para eventuais comentários que você gostaria de fazer para mim.\n",
        "</div>\n",
        "\n",
        "\n",
        "\n"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {},
      "outputs": [],
      "source": []
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {},
      "outputs": [],
      "source": []
    },
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        "\n",
        "\n",
        "<div class=\"alert alert-danger\">\n",
        "<strong>Comentário do revisor v1</strong>\n",
        "\n",
        "Estamos no caminho certo com essa versão, mas retocar os pontos indicados abaixo nos fará chegar em um resultado ainda mais incrível.\n",
        "    \n",
        "Conte comigo para ajudá-lo (a) em qualquer questão que possa vir a ter! Lembre-se de usar as caixas azuis para se comunicar comigo.\n",
        "    \n",
        "Até breve.\n",
        "</div>"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "eAkbw7Ueuj8X"
      },
      "source": [
        "# Qual é o melhor plano?\n",
        "\n",
        "Você trabalha como analista para a empresa de telecomunicações Megaline. A empresa oferece aos clientes dois planos pré-pagos: Surf e Ultimate. O departamento comercial quer saber qual dos planos gera mais receita para ajustar o orçamento de publicidade.\n",
        "\n",
        "Você vai realizar uma análise preliminar dos planos com base em uma pequena seleção de clientes. Você terá dados de 500 clientes da Megaline: que clientes são, de onde eles são, qual plano usam e o número de chamadas e mensagens realizadas em 2018. Seu trabalho é analisar o comportamento dos clientes e determinar qual plano pré-pago gera mais receita."
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        "# Projeto\n",
        "Eu irei ler os arquivos, buscar problemas, solucionar-los, fazer engenharia de carácteristica, e demostrar os resultados por meio de graficos ou strings."
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "lnomf-3Xuj8b"
      },
      "source": [
        "## Inicialização"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "JdJusn5ouj8c"
      },
      "outputs": [],
      "source": [
        "# Carregando todas as bibliotecas\n",
        "import pandas as pd\n",
        "import numpy as np\n",
        "import seaborn as sns\n",
        "from scipy import stats as st\n",
        "import matplotlib.pyplot as plt\n",
        "from calendar import month_name\n"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "rzqsCrgquj8d"
      },
      "source": [
        "## Carregue os dados"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "HmzmQRXIuj8e"
      },
      "outputs": [],
      "source": [
        "# Carregue os arquivos de dados em diferentes DataFrames\n",
        "plans = pd.read_csv(r\"C:\\Users\\jonat\\Documents\\GitHub\\Sprints\\sprint 4\\tables\\megaline_plans.csv\")\n",
        "calls = pd.read_csv(r\"C:\\Users\\jonat\\Documents\\GitHub\\Sprints\\sprint 4\\tables\\megaline_calls.csv\")\n",
        "messages = pd.read_csv(r\"C:\\Users\\jonat\\Documents\\GitHub\\Sprints\\sprint 4\\tables\\megaline_messages.csv\")\n",
        "internet = pd.read_csv(r\"C:\\Users\\jonat\\Documents\\GitHub\\Sprints\\sprint 4\\tables\\megaline_internet.csv\")\n",
        "users = pd.read_csv(r\"C:\\Users\\jonat\\Documents\\GitHub\\Sprints\\sprint 4\\tables\\megaline_users.csv\")\n"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {},
      "outputs": [],
      "source": [
        "plans.head(1),calls.head(1),messages.head(1),internet.head(1),calls.head(1)"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        "Todas as colunas corretamente feitas, indica que não precisa mudar o \",\" do csv para outra coisa como \";\""
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "XQh-EeiIuj8e"
      },
      "source": [
        "## Prepare os dados"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "RmibJmmzuj8e"
      },
      "source": [
        "[Os dados deste projeto estão divididos em várias tabelas. Explore cada uma para obter uma compreensão inicial dos dados. Faça correções em cada tabela, se necessário.]"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "TlZUw_Cyuj8f"
      },
      "source": [
        "## Planos"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "x9qB5mAOuj8f"
      },
      "outputs": [],
      "source": [
        "# Imprima informações gerais/resumo sobre o DataFrame dos planos\n",
        "\n",
        "plans.info()"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "9MRo7tyVuj8f"
      },
      "outputs": [],
      "source": [
        "# Imprima uma amostra de dados dos planos\n",
        "\n",
        "plans"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "P8hzr-lquj8f"
      },
      "source": [
        "Um df pequeno com apenas 2 linhas com nomes das colunas corretos, tipos de dados, e dados em si. Nada para corrijir."
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "KXtaxmKsuj8f"
      },
      "source": [
        "## Corrija os dados"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "9BWuM80Buj8f"
      },
      "source": [
        "Sem erros para corrigir"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "kLcdKu6Duj8g"
      },
      "source": [
        "## Enriqueça os dados"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "x1L6F_gmuj8g"
      },
      "source": [
        "Sem modificações para fazer."
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "YJg2O9qjuj8g"
      },
      "source": [
        "## Usuários"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "7JzxwD2juj8g"
      },
      "outputs": [],
      "source": [
        "# Imprima informações gerais/resumo sobre o DataFrame dos usuários\n",
        "\n",
        "users.info()"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "5KZ8XmD8uj8g"
      },
      "outputs": [],
      "source": [
        "# Imprima uma amostra de dados dos usuários\n",
        "\n",
        "users.sample(10)"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "XGCgkfLvuj8h"
      },
      "source": [
        "O df tem uma coluna que não esta no tipo \"datetime\", na coluna churn_date tem valores nulos, porém é esperado pois são os clientes que não canselaram. \n"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "ppiEfe3luj8i"
      },
      "source": [
        "### Corrija os dados"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "os4Gubp_uj8j"
      },
      "source": [
        "Transformar a coluna reg_date, churn_date no tipo data frame"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {},
      "outputs": [],
      "source": [
        "users['churn_date'] = pd.to_datetime(users['churn_date'], errors='coerce')\n",
        "users['reg_date'] = pd.to_datetime(users['reg_date'], errors='coerce')\n",
        "users.info()"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "H3gpde3Juj8j"
      },
      "source": [
        "### Enriqueça os dados"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "HOZyfII6uj8j"
      },
      "source": [
        "NaN"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "f4uSIMuuuj8j"
      },
      "source": [
        "## Chamadas"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "hkY01fJnuj8j"
      },
      "outputs": [],
      "source": [
        "# Imprima informações gerais/resumo sobre o DataFrame das chamadas\n",
        "\n",
        "calls.info()"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "wdBwJG5Yuj8k"
      },
      "outputs": [],
      "source": [
        "# Imprima uma amostra de dados das chamadas\n",
        "calls.sample(10)\n"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "Y8An85-Tuj8k"
      },
      "source": [
        "Identifiquei que a coluna call_date não está no tipo dados, e que a muitos valores 0.00 na duração da call, podem ser calls que não foram atendidas, portanto não irei mofidificar. "
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "x5a99U4xuj8k"
      },
      "source": [
        "### Corrija os dados"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "MQqkU83Xuj8k"
      },
      "source": [
        "Corrijindo o tipo da coluna de datas"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "lBjdw0Bnuj8l"
      },
      "outputs": [],
      "source": [
        "calls['call_date'] = pd.to_datetime(calls['call_date'], errors='coerce')\n",
        "calls.info()"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "MFm5xyh4uj8l"
      },
      "source": [
        "### Enriqueça os dados"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "Udv2togruj8l"
      },
      "source": [
        "Criarei uma nova coluna com apenas os meses"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {},
      "outputs": [],
      "source": [
        "calls['month_name'] = calls['call_date'].dt.month.map(lambda x: month_name[x])\n",
        "calls"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "qLz4FkyRuj8l"
      },
      "source": [
        "## Mensagens"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "nFA9DFkCuj8l"
      },
      "outputs": [],
      "source": [
        "# Imprima informações gerais/resumo sobre o DataFrame das mensagens\n",
        "\n",
        "messages.info()"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "ysEFBZWxuj8m"
      },
      "outputs": [],
      "source": [
        "# Imprima uma amostra dos dados das mensagens\n",
        "\n",
        "messages.head(10)"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "GUtt1TqCuj8m"
      },
      "source": [
        "Sem dados nulos, porém na coluna message date não está no tipo datetime."
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "tT8N_hc6uj8m"
      },
      "source": [
        "### Corrija os dados"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "IgO0SzXKuj8m"
      },
      "source": [
        "Corrijindo o tipo da coluna de data."
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "SpBqbQHCuj8m"
      },
      "outputs": [],
      "source": [
        "messages['message_date'] = pd.to_datetime(messages['message_date'], errors='coerce')\n",
        "messages['message_date'].info()"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "feV2Njo9uj8n"
      },
      "source": [
        "### Enriqueça os dados"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "KA5XDEoZuj8n"
      },
      "source": [
        "Vou fazer uma tabela que só tera os meses."
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {},
      "outputs": [],
      "source": [
        "messages['month_name'] = messages['message_date'].dt.month.map(lambda x: month_name[x])\n",
        "messages"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "ZRFaOWzGuj8n"
      },
      "source": [
        "## Internet"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "ob3-qv4nuj8n"
      },
      "outputs": [],
      "source": [
        "# Imprima informações gerais/resumo sobre o DataFrame da internet\n",
        "\n",
        "internet.info()"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "iIHK4fZsuj8n"
      },
      "outputs": [],
      "source": [
        "#  Imprima uma amostra de dados para o tráfego da internet\n",
        "internet.sample(10)\n"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "6wpo7ugquj8o"
      },
      "source": [
        "O data frame tem a coluna session_date no tipo errado. O mb_used tem valores zerados que no caso são de clientes que não usaram os dados por algum motivo. "
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "Tly90YrTuj8o"
      },
      "source": [
        "### Corrija os dados"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "F_yvcX-9uj8o"
      },
      "source": [
        "Vou transforma a coluna session_date para o tipo datetime"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "GCoX7kbmuj8o"
      },
      "outputs": [],
      "source": [
        "internet['session_date'] = pd.to_datetime(internet['session_date'], errors='coerce')\n",
        "internet.info()"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "DEDbrtFduj8o"
      },
      "source": [
        "### Enriqueça os dados"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        "Vou fazer uma tabela que só tera os meses."
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {},
      "outputs": [],
      "source": [
        "internet['month_name'] = internet['session_date'].dt.month.map(lambda x: month_name[x])\n",
        "internet"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        "<div class=\"alert alert-success\">\n",
        "<strong>Comentário do revisor v1</strong>\n",
        "\n",
        "Excelente trabalho checando a consistência dos dados.\n",
        "\n",
        "Sempre importante para garantir uma análise robusta!\n",
        "</div>\n"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "bnOX4ARJuj8p"
      },
      "source": [
        "## Estude as condições dos planos"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "vMXVndWEuj8p"
      },
      "outputs": [],
      "source": [
        "# Imprima as condições dos planos e certifique-se de que elas fazem sentido para você\n",
        "plans\n"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        "O custo da mais cara inicial é maior porém para almentar o plano mais caro(seja adcionando mensagem, minutos ou gb) é mais barato."
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "1v1EshDmuj8q"
      },
      "source": [
        "## Agregue os dados por usuário\n"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "4hmb2pSPuj8q"
      },
      "outputs": [],
      "source": [
        "# Calcule o número de chamadas feitas por cada usuário por mês. Salve o resultado.\n",
        "call_count = calls.groupby(['user_id', 'month_name']).size().reset_index(name='call_count') \n",
        "call_count.head(10)"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "yHgBWCJJuj8q"
      },
      "outputs": [],
      "source": [
        "# Calcule a quantidade de minutos gastos por cada usuário por mês. Salve o resultado.\n",
        "\n",
        "total_minutes = calls.groupby(['user_id', 'month_name'])['duration'].sum().reset_index(name='total_minutes')\n",
        "total_minutes.head(10)"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "MaM_cPxauj8q"
      },
      "outputs": [],
      "source": [
        "# Calcule o número de mensagens enviadas por cada usuário por mês. Salve o resultado.\n",
        "\n",
        "messages_caunt =  messages.groupby(['user_id', 'month_name']).size().reset_index(name='messages_count') \n",
        "messages_caunt.head(10)      "
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "WsCEZJ_xuj8q"
      },
      "outputs": [],
      "source": [
        "# Calcule o volume de tráfego de internet usado por cada usuário por mês. Salve o resultado.\n",
        "\n",
        "total_internet = internet.groupby(['user_id', 'month_name'])['mb_used'].sum().reset_index(name='total_internet')\n",
        "total_internet.head(10)     "
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        "<div class=\"alert alert-success\">\n",
        "<strong>Comentário do revisor v1</strong>\n",
        "\n",
        "Agregações realizadas adequadamente.\n",
        "</div>\n"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "BYDTkxOauj8r"
      },
      "outputs": [],
      "source": [
        "# Junte os dados de chamadas, minutos, mensagens e internet com base em user_id e month\n",
        "\n",
        "merged_df = pd.merge(call_count, total_minutes, on=['user_id', 'month_name'], how='outer')\n",
        "merged_df = pd.merge(merged_df, total_internet, on=['user_id', 'month_name'], how='outer')\n",
        "merged_df = pd.merge(merged_df, messages_caunt, on=['user_id', 'month_name'], how='outer')\n",
        "merged_df"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        "<div class=\"alert alert-success\">\n",
        "<strong>Comentário do revisor v1</strong>\n",
        "\n",
        "Joins realizados com o uso do operador correto.\n",
        "</div>\n"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "SW-sgLaHuj8r"
      },
      "outputs": [],
      "source": [
        "# Adicione as informações sobre o plano\n",
        "\n",
        "merged_df = pd.merge(merged_df, users[['user_id', 'plan']], on='user_id', how='left')\n",
        "merged_df"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {},
      "outputs": [],
      "source": [
        "def conditional_total_sum(row):\n",
        "    \"\"\"Faz uma soma condicional das linhas levando em conta os planos\n",
        "\n",
        "    Args:\n",
        "        row \n",
        "\n",
        "    Returns:\n",
        "        total da som_\n",
        "    \"\"\"\n",
        "    total_sum = 0\n",
        "    if row['plan'] == \"surf\":  # Verifica a condição\n",
        "        total_sum += 20\n",
        "\n",
        "        if row['messages_count'] > 50:\n",
        "            total_sum = total_sum + ((row['messages_count']-50)* 0.03)\n",
        "\n",
        "        if row['total_minutes'] > 500:\n",
        "            total_sum = total_sum + ((row['total_minutes']-500)* 0.03)\n",
        "\n",
        "        if row['total_internet'] > (1024*15):\n",
        "            excess_internet  = (row['total_internet']-(1024*15))/1024\n",
        "            excess_internet  = np.ceil(excess_internet )\n",
        "            total_sum += ((excess_internet )* 10)\n",
        "    \n",
        "    else:\n",
        "        total_sum += 70\n",
        "        \n",
        "        if row['messages_count'] > 1000:\n",
        "            total_sum = total_sum + ((row['messages_count']-1000)* 0.01)\n",
        "\n",
        "        if row['total_minutes'] > 3000:\n",
        "            total_sum = total_sum + ((row['total_minutes']-3000)* 0.01)\n",
        "\n",
        "        if row['total_internet'] > (1024*30):\n",
        "            excess_internet  = (row['total_internet']-(1024*30))/1024\n",
        "            excess_internet  = np.ceil(excess_internet )\n",
        "            total_sum += ((excess_internet )* 7)\n",
        "\n",
        "    return total_sum\n"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "JiPHXbQAuj8r"
      },
      "outputs": [],
      "source": [
        "# Calcule a receita mensal para cada usuário\n",
        "# excess_internet trair o limite gratuito do pacote do número total de chamadas, mensagens de texto e dados;\n",
        "# Aplicando a função com apply\n",
        "merged_df['conditional_total_sum'] = merged_df.apply(conditional_total_sum, axis=1)\n",
        "merged_df\n"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {},
      "outputs": [],
      "source": [
        "merged_df.describe()"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        "<div class=\"alert alert-success\">\n",
        "<strong>Comentário do revisor v1</strong>\n",
        "\n",
        "Conversão para gb feita corretamente.\n",
        "    \n",
        "Receita calculada adequadamente.\n",
        "</div>\n"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "0HFWXKTQuj8r"
      },
      "source": [
        "## Estude o comportamento do usuário"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "umaMfSLxuj8s"
      },
      "source": [
        "### Chamadas"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {},
      "outputs": [],
      "source": [
        "merged_df.info()"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {},
      "outputs": [],
      "source": [
        "# ordenando os meses\n",
        "month_order = list(month_name[1:])\n",
        "merged_df['month_name'] = pd.Categorical(merged_df['month_name'], categories=month_order, ordered=True)"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "0236-tJnuj8t"
      },
      "outputs": [],
      "source": [
        "# Compare a duração média das chamadas de cada plano para cada mês. Crie um gráfico de barras para visualizar o resultado.\n",
        "\n",
        "df = merged_df['plan'] == \"surf\" #fiz artibuindo uma variavel para ser menos custoso para o hardwere\n",
        "\n",
        "surf = merged_df[df]\n",
        "surf_mean = surf.groupby(['plan', 'month_name'])['total_minutes'].mean().reset_index(name='total_minutes')\n",
        "\n",
        "ultimate = merged_df[~df]\n",
        "ultimate_mean = ultimate.groupby(['plan', 'month_name'])['total_minutes'].mean().reset_index(name='total_minutes')\n",
        "\n",
        "width = 0.9 \n",
        "plt.bar(surf_mean['month_name'], surf_mean['total_minutes'], width-0.4, label='Surf', alpha=0.5)\n",
        "plt.bar(ultimate_mean['month_name'], ultimate_mean['total_minutes'], width, label='Ultimate', alpha=0.5)\n",
        "plt.xticks(rotation=-45)\n",
        "plt.title('Comparação de Duração das Chamadas por Plano e Mês')\n",
        "plt.ylabel('Total de Minutos')\n",
        "plt.legend(loc='lower right')\n",
        "plt.show()"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "9sCQ1lP8uj8u"
      },
      "outputs": [],
      "source": [
        "# Compare o número de minutos que os usuários de cada plano necessitam a cada mês. Construa um histograma.\n",
        "\n",
        "plt.hist(surf['total_minutes'], bins=10, alpha=0.5, label='Surf')\n",
        "plt.hist(ultimate['total_minutes'], bins=10, alpha=0.5, label='Ultimate')\n",
        "plt.title('Histograma dos clientes por minutos')\n",
        "plt.ylabel('Clientes')\n",
        "plt.xlabel('Minutos')\n",
        "plt.legend(loc='right')\n",
        "plt.show()"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "cIdodPExuj8u"
      },
      "outputs": [],
      "source": [
        "# Calcule a média e a variância da duração mensal das chamadas\n",
        "\n",
        "mean = merged_df['total_minutes'].mean()\n",
        "var = np.var(merged_df['total_minutes'])\n",
        "print(f\"a media é: {mean} e a variância é: {var}\")"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "DW7vTypxuj8u"
      },
      "outputs": [],
      "source": [
        "# Faça um diagrama de caixa para visualizar a distribuição da duração mensal das chamadas\n",
        "fig, axes = plt.subplots(2, 1, figsize=(8, 6))\n",
        "\n",
        "# Boxplot 1 (primeira linha)\n",
        "sns.boxplot(data=surf['total_minutes'], ax=axes[0], orient='h').set_xlim(-100, 1400)\n",
        "axes[0].set_title('surf vx ultimate')\n",
        "\n",
        "# Boxplot 2 (segunda linha)\n",
        "sns.boxplot(data=ultimate['total_minutes'], ax=axes[1], orient='h').set_xlim(-100, 1400)\n",
        "\n",
        "plt.show()"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "Uyt3rWn7uj8u"
      },
      "source": [
        "No final no 2 ao 4 trimestre é quando tem mai demanda por minutos.\n",
        "\n",
        "O histograma indica uma calda longa para a direita e grossa para a esquerda. \n",
        "\n",
        "A media(411) esta proxima da mediana(404) oque indica pouca assimetria. \n",
        "\n",
        "A maioria não importantando o plano gasta entre 300 a 500 minutos. Ou seja no caso do plano surf faz todo sentido pois está no limiar do cliente comprar uma expanção mensal(fazendo com que a empresa ganhe mais). Porém no plano ultimate o valor maximo de minutos passa de 500 para 3000 o que é muito irreal para o plano pois ninguém conseguiu chegar a este valor, levando em conta o boxplot do ultimate o valor maximo do plano ultimate deveria ser 1000 minutos. \n"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        "<div class=\"alert alert-success\">\n",
        "<strong>Comentário do revisor v1</strong>\n",
        "\n",
        "Chamadas investigadas com visões e conclusões adequadas.\n",
        "</div>\n"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "2hWSPtrnuj8v"
      },
      "source": [
        "### Mensagens"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "9kPlAhOJuj8v"
      },
      "outputs": [],
      "source": [
        "# Compare o número de mensagens que os usuários de cada plano costumam enviar a cada mês\n",
        "\n",
        "\n",
        "surf_mean = surf.groupby(['plan', 'month_name'])['messages_count'].mean().reset_index(name='messages_count')\n",
        "\n",
        "ultimate_mean = ultimate.groupby(['plan', 'month_name'])['messages_count'].mean().reset_index(name='messages_count')\n",
        "\n",
        "width = 0.9 \n",
        "plt.bar(ultimate_mean['month_name'], ultimate_mean['messages_count'], width, label='Ultimate', alpha=0.5)\n",
        "plt.bar(surf_mean['month_name'], surf_mean['messages_count'], width-0.4, label='Surf', alpha=0.5)\n",
        "\n",
        "plt.xticks(rotation=-45)\n",
        "plt.title('Comparação de Duração das mensagens por Plano e Mês')\n",
        "plt.ylabel('Mensagens')\n",
        "plt.legend(loc='lower right')\n",
        "plt.show()"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "fIVdRuT6uj8v"
      },
      "outputs": [],
      "source": [
        "\n",
        "plt.hist(surf['messages_count'], bins=20, alpha=0.5, label='Surf')\n",
        "plt.hist(ultimate['messages_count'], bins=20, alpha=0.5, label='Ultimate')\n",
        "plt.title('Histograma dos clientes por mensagens')\n",
        "plt.ylabel('Clientes')\n",
        "plt.xlabel('Mensagens')\n",
        "plt.legend(loc='right')\n",
        "plt.show()\n"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "di6wucOLuj8v"
      },
      "outputs": [],
      "source": [
        "mean = merged_df['messages_count'].mean()\n",
        "var = np.var(merged_df['messages_count'])\n",
        "print(f\"a media é: {mean} e a variância é: {var}\")"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {},
      "outputs": [],
      "source": [
        "\n",
        "fig, axes = plt.subplots(2, 1, figsize=(8, 6))\n",
        "\n",
        "# Boxplot 1 (primeira linha)\n",
        "sns.boxplot(data=surf['messages_count'], ax=axes[0], orient='h').set_xlim(-10, 250)\n",
        "axes[0].set_title('surf vx ultimate')\n",
        "\n",
        "# Boxplot 2 (segunda linha)\n",
        "sns.boxplot(data=ultimate['messages_count'], ax=axes[1], orient='h').set_xlim(-10, 250)\n",
        "\n",
        "plt.show()"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "v6QELMtcuj8v"
      },
      "source": [
        "\n",
        "No final no 2 ao 4 trimestre é quando tem mai demanda por mensagens.\n",
        "\n",
        "O histograma só tem uma calda longa para a direita oque indica assimetria dos dados\n",
        "\n",
        "A media(42) esta proxima da mediana(34) oque indica muita assimetria. \n",
        "\n",
        "Por serem dados assimetricos tem muitos outlayers, e no caso do surf tem mais outlayers do que o ultimate.\n",
        "\n",
        "No caso dos limites o surf tem um limite muito baixo de mensagens onde uma grande parte dos clientes pagam por mensagens extras. E no caso do ultimate tem um limite muito irrealistamente grande onde nenhum dos clientes chegou usar. "
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "nHUCwAnauj8w"
      },
      "source": [
        "### Internet"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "EEm27RaRuj8w"
      },
      "outputs": [],
      "source": [
        "# Compare o número de mensagens que os usuários de cada plano costumam enviar a cada mês\n",
        "\n",
        "\n",
        "surf_mean = surf.groupby(['plan', 'month_name'])['total_internet'].mean().reset_index(name='total_internet')\n",
        "surf[\"total_internet\"]  = surf[\"total_internet\"] / 1024\n",
        "ultimate_mean= ultimate.groupby(['plan', 'month_name'])['total_internet'].mean().reset_index(name='total_internet')\n",
        "ultimate[\"total_internet\"] = ultimate[\"total_internet\"] / 1024\n",
        "width = 0.9 \n",
        "plt.bar(ultimate_mean['month_name'], ultimate_mean['total_internet'], width, label='Ultimate', alpha=0.5)\n",
        "plt.bar(surf_mean['month_name'], surf_mean['total_internet'], width-0.4, label='Surf', alpha=0.5)\n",
        "\n",
        "plt.xticks(rotation=-45)\n",
        "plt.title('Comparação de Duração das internet por Plano e Mês')\n",
        "plt.ylabel('Mensagens')\n",
        "plt.legend(loc='lower right')\n",
        "plt.show()"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "Detb0wIZuj8w"
      },
      "outputs": [],
      "source": [
        "\n",
        "plt.hist(surf['total_internet'], bins=50, alpha=0.5, label='Surf')\n",
        "plt.hist(ultimate['total_internet'], bins=50, alpha=0.5, label='Ultimate')\n",
        "plt.title('Histograma dos clientes por internet')\n",
        "plt.ylabel('Clientes')\n",
        "plt.xlabel('Dados(Gb)')\n",
        "plt.legend(loc='right')\n",
        "plt.show()\n"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "1zsw31_cuj8w"
      },
      "outputs": [],
      "source": [
        "surf_mean = surf['total_internet'].mean()\n",
        "ultimate_mean = ultimate['total_internet'].mean()\n",
        "print(f\"a media de surf é: {surf_mean}a media de ultimate é: {ultimate_mean}\")"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {},
      "outputs": [],
      "source": [
        "\n",
        "fig, axes = plt.subplots(2, 1, figsize=(8, 6))\n",
        "\n",
        "# Boxplot 1 (primeira linha)\n",
        "sns.boxplot(data=surf['total_internet'], ax=axes[0], orient='h').set_xlim(-5, 71)\n",
        "axes[0].set_title('surf vx ultimate')\n",
        "\n",
        "# Boxplot 2 (segunda linha)\n",
        "sns.boxplot(data=ultimate['total_internet'], ax=axes[1], orient='h').set_xlim(-5, 71)\n",
        "\n",
        "plt.show()"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "GsHkFpGmuj8w"
      },
      "source": [
        "Apenas janeiro não gastam muito a internet.\n",
        "\n",
        "O surf pega uma fatia maior do mercado. O histograma  tem uma calda longa para a direita.\n",
        "\n",
        "A média do ultimate é apenas 0.5% a mais que o surf, oque indica que o uso da internet é muito parecido entre os planos.\n",
        "\n",
        "O surf tem mais outlaiers mais para a direita, Oque indica que o limite esta baixo, e não abrange a maioria dos clientes. "
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        "<div class=\"alert alert-success\">\n",
        "<strong>Comentário do revisor v1</strong>\n",
        "\n",
        "Mensagens e internet investigadas com visões e conclusões adequadas.\n",
        "</div>"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "g23qXaYNuj8x"
      },
      "source": [
        "## Receita"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {},
      "outputs": [],
      "source": [
        "surf_mean = surf.groupby(['plan', 'month_name'])['conditional_total_sum'].mean().reset_index(name='conditional_total_sum')\n",
        "surf[\"conditional_total_sum\"]  = surf[\"conditional_total_sum\"]\n",
        "ultimate_mean= ultimate.groupby(['plan', 'month_name'])['conditional_total_sum'].mean().reset_index(name='conditional_total_sum')\n",
        "ultimate[\"conditional_total_sum\"] = ultimate[\"conditional_total_sum\"]\n",
        "width = 0.9 \n",
        "\n"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "CGuBwYRyuj8y"
      },
      "outputs": [],
      "source": [
        "plt.bar(ultimate_mean['month_name'], ultimate_mean['conditional_total_sum'], width, label='Ultimate', alpha=0.5)\n",
        "plt.bar(surf_mean['month_name'], surf_mean['conditional_total_sum'], width-0.4, label='Surf', alpha=0.5)\n",
        "plt.xticks(rotation=-45)\n",
        "plt.title('Comparação de Duração das receitas por Plano e Mês')\n",
        "plt.ylabel('$')\n",
        "plt.legend(loc='lower right')\n",
        "plt.show()"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "qJSyfvUguj8y"
      },
      "outputs": [],
      "source": [
        "\n",
        "plt.hist(surf['conditional_total_sum'],bins=10, alpha=0.5, label='Surf')\n",
        "plt.hist(ultimate['conditional_total_sum'],bins=2, alpha=0.5, label='Ultimate')\n",
        "plt.title('Histograma dos clientes por mensagens')\n",
        "plt.ylabel('Clientes')\n",
        "plt.xlabel('Mensagens')\n",
        "plt.legend(loc='right')\n",
        "plt.xticks(ticks=np.arange(0, 600, 70)) \n",
        "plt.show()\n"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "KUSxMW71uj8z"
      },
      "outputs": [],
      "source": [
        "surf_mean = surf['conditional_total_sum'].mean()\n",
        "ultimate_mean = ultimate['conditional_total_sum'].mean()\n",
        "print(f\"a media de surf é: {surf_mean}a media de ultimate é: {ultimate_mean}\")"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "6X34EwHpuj8z"
      },
      "source": [
        "O ultimat tem uma receita mais estável durante o ano. e o surf tem  mais demanda no 3 e 4 trimestre\n",
        "\n",
        "Tem mais dados no surf, ou seja mais cliente, e sei valor, oque atrapalha a analise. Mas tanto surf quanto ultimat tem uma calda longa para a direita.\n",
        "\n",
        "A meda do valor da surf é $60 quando o valor do plano é $20 isso quer dizer que muitos clientes pagam extra. Enquanto no ultimat isso não acontece, a media sendo $72 e o valor do plano sendo $70 poucos clientes pagam extras."
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        "<div class=\"alert alert-success\">\n",
        "<strong>Comentário do revisor v1</strong>\n",
        "\n",
        "Receita analisada em profundidade e com visões corretas.\n",
        "</div>"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "xJ6Mu-KAuj8z"
      },
      "source": [
        "## Teste hipóteses estatísticas"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "LyGrPhpUuj80"
      },
      "outputs": [],
      "source": [
        "print(\"Hipóteses do teste:\")\n",
        "print(\"H0: A média de uso total da internet pelos usuários dos planos 'Surf' e 'Ultimate' é igual.\")\n",
        "print(\"Ha: A média de uso total da internet pelos usuários dos planos 'Surf' e 'Ultimate' é diferente.\\n\")\n",
        "print(f\"a media de surf é: {surf_mean:.2f} a media de ultimate é: {ultimate_mean:.2f}\\n\")\n",
        "# Teste as hipóteses\n",
        "alpha = 0.05\n",
        "results = st.ttest_ind(\n",
        "    surf['conditional_total_sum'].sample(n=700) , \n",
        "    ultimate['conditional_total_sum'].sample(n=700))\n",
        "print(f'valor-p: {results.pvalue:.10f}')\n",
        "if (results.pvalue < alpha):\n",
        "    print(\"Rejeitamos a hipótese nula\")\n",
        "else:\n",
        "    print(\"Não podemos rejeitar a hipótese nula\")"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "98t8iiJyuj80",
        "scrolled": true
      },
      "outputs": [],
      "source": [
        "# Realizar o merge\n",
        "merged_table = pd.merge(users[['user_id', 'city']], merged_df[['user_id', 'conditional_total_sum']], on='user_id', how='inner')\n",
        "\n",
        "grouped_df = merged_table.groupby(['user_id', 'city'], as_index=False)['conditional_total_sum'].sum()\n",
        "# Resultado\n",
        "in_NYNJ = grouped_df[grouped_df['city'].str.contains('NY-NJ', na=False)]\n",
        "not_NYNJ = grouped_df[~grouped_df['city'].str.contains('NY-NJ', na=False)]\n",
        "\n",
        "\n",
        "print(\"Hipóteses do teste:\")\n",
        "print(\"H0: A média de uso total da internet pelos usuários dos planos 'Surf' e 'Ultimate' é igual.\")\n",
        "print(\"Ha: A média de uso total da internet pelos usuários dos planos 'Surf' e 'Ultimate' é diferente.\\n\")\n",
        "\n",
        "\n",
        "print(f\"a media de surf é: {in_NYNJ['conditional_total_sum'].mean():.2f} a media de ultimate é: {not_NYNJ['conditional_total_sum'].mean():.2f}\\n\")\n",
        "\n",
        "# Teste as hipóteses\n",
        "alpha = 0.05\n",
        "results = st.ttest_ind(\n",
        "    in_NYNJ['conditional_total_sum'] , \n",
        "    not_NYNJ['conditional_total_sum'])\n",
        "print(f'valor-p: {results.pvalue:.10f}')\n",
        "if (results.pvalue < alpha):\n",
        "    print(\"Rejeitamos a hipótese nula\")\n",
        "else:\n",
        "    print(\"Não podemos rejeitar a hipótese nula\")"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        "<div class=\"alert alert-danger\">\n",
        "<strong>Comentário do revisor v1</strong>\n",
        "\n",
        "O teste foi implementado e analisado corretamente, mas seria importante formular as hipóteses sendo testadas para garantimos a clareza do teste que iremos executar.\n",
        "</div>\n"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "M8WycwWFuj81"
      },
      "source": [
        "## Conclusão geral\n",
        "\n",
        "### Leitura e Identificação de Problemas:\n",
        "\n",
        "O arquivo CSV está correto e não precisa de ajustes no separador de colunas.\n",
        "Algumas colunas têm tipos de dados incorretos, como \"churn_date\" (que contém valores nulos, mas isso é esperado) e \"call_date\" (que não está no tipo datetime).\n",
        "A coluna \"message date\" também não está no tipo datetime.\n",
        "A coluna \"session_date\" tem o tipo de dado errado e \"mb_used\" tem valores zerados (indicando clientes que não usaram dados).\n",
        "\n",
        "### Observações sobre Planos e Gastos:\n",
        "\n",
        "O custo inicial do plano mais caro é maior, mas o aumento do valor para adicionar mais minutos, mensagens ou dados é mais barato.\n",
        "A demanda por minutos é maior nos trimestres 2 a 4.\n",
        "O histograma de minutos de uso tem uma cauda longa à direita e grossa à esquerda, com a média (411) próxima da mediana (404), indicando pouca assimetria.\n",
        "A maioria dos clientes gasta entre 300 e 500 minutos, o que faz sentido no plano Surf, pois está próximo ao limiar para expansão mensal. No plano Ultimate, o valor máximo de minutos é irrealista (chega até 3000 minutos).\n",
        "\n",
        "### Análise sobre Mensagens e Internet:\n",
        "\n",
        "A demanda por mensagens também aumenta nos trimestres 2 a 4.\n",
        "O histograma de mensagens tem uma cauda longa à direita, indicando assimetria e muitos outliers, especialmente no plano Surf.\n",
        "O uso da internet é mais baixo em janeiro, e o plano Surf tem maior fatia do mercado.\n",
        "A média de uso de internet no plano Ultimate (72) é ligeiramente maior do que no Surf (60), mas o uso de ambos os planos é muito parecido.\n",
        "\n",
        "### Análise de Outliers e Limites:\n",
        "\n",
        "O plano Surf tem mais outliers e um limite de mensagens muito baixo, fazendo com que muitos clientes paguem por mensagens extras. Já o plano Ultimate tem um limite irrealisticamente grande, que nenhum cliente alcança.\n",
        "O plano Surf tem mais demanda nos trimestres 3 e 4.\n",
        "A receita no plano Ultimate é mais estável durante o ano, enquanto o Surf tem mais variabilidade.\n",
        "A média de receita do plano Surf é $60, embora o preço do plano seja $20, indicando que muitos clientes pagam extras. No plano Ultimate, a média de receita é $72, próximo ao valor do plano ($70), o que significa que poucos clientes pagam extras.\n",
        "\n",
        "### Testes de Hipóteses:\n",
        "\n",
        "Hipótese sobre a receita média entre planos Ultimate e Surf: A média de receita no plano Surf é $60.33 e no Ultimate é $72.31. O valor-p (0.0000224847) é muito pequeno, portanto, rejeitamos a hipótese nula de que as receitas médias são iguais.\n",
        "Hipótese sobre a receita média entre usuários da área de NY-NJ e demais regiões: A média de receita para NY-NJ é 284.46 e para outras regiões é 302.89. O valor-p (0.5798995337) é alto, portanto, não podemos rejeitar a hipótese nula, indicando que as receitas médias entre as duas áreas não são significativamente diferentes."
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        "<div class=\"alert alert-success\">\n",
        "<strong>Comentário do revisor v1</strong>\n",
        "\n",
        "Conclusões apresentadas.\n",
        "</div>\n"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {},
      "outputs": [],
      "source": []
    }
  ],
  "metadata": {
    "ExecuteTimeLog": [
      {
        "duration": 828,
        "start_time": "2021-11-16T09:21:11.304Z"
      },
      {
        "duration": 893,
        "start_time": "2021-11-16T09:21:17.728Z"
      },
      {
        "duration": 1150,
        "start_time": "2021-11-16T09:21:29.568Z"
      },
      {
        "duration": 3,
        "start_time": "2021-11-16T09:24:14.495Z"
      },
      {
        "duration": 120,
        "start_time": "2021-11-16T09:24:46.630Z"
      },
      {
        "duration": 3,
        "start_time": "2021-11-16T09:28:27.882Z"
      },
      {
        "duration": 4,
        "start_time": "2021-11-16T09:29:54.281Z"
      },
      {
        "duration": 3,
        "start_time": "2021-11-16T09:30:45.936Z"
      },
      {
        "duration": 4,
        "start_time": "2021-11-16T09:31:06.300Z"
      },
      {
        "duration": 113,
        "start_time": "2021-11-16T09:31:37.208Z"
      },
      {
        "duration": 143,
        "start_time": "2021-11-16T09:31:48.656Z"
      },
      {
        "duration": 98,
        "start_time": "2021-11-16T09:31:55.678Z"
      },
      {
        "duration": 3,
        "start_time": "2021-11-16T09:32:08.535Z"
      },
      {
        "duration": 111,
        "start_time": "2021-11-16T09:32:10.120Z"
      },
      {
        "duration": 3,
        "start_time": "2021-11-16T09:32:15.732Z"
      },
      {
        "duration": 4,
        "start_time": "2021-11-16T09:32:29.423Z"
      },
      {
        "duration": 3,
        "start_time": "2021-11-16T10:03:03.074Z"
      },
      {
        "duration": 3,
        "start_time": "2021-11-16T10:10:01.288Z"
      },
      {
        "duration": 3,
        "start_time": "2021-11-16T10:10:46.923Z"
      },
      {
        "duration": 121,
        "start_time": "2021-11-16T10:37:46.494Z"
      },
      {
        "duration": 125,
        "start_time": "2021-11-16T10:38:20.632Z"
      },
      {
        "duration": 112,
        "start_time": "2021-11-16T10:46:53.001Z"
      },
      {
        "duration": 110,
        "start_time": "2021-11-16T10:48:25.775Z"
      },
      {
        "duration": 3,
        "start_time": "2021-11-16T10:50:18.720Z"
      },
      {
        "duration": 4,
        "start_time": "2021-11-16T10:50:37.649Z"
      },
      {
        "duration": 2,
        "start_time": "2021-11-16T10:50:51.884Z"
      },
      {
        "duration": 3,
        "start_time": "2021-11-16T10:51:56.237Z"
      },
      {
        "duration": 101,
        "start_time": "2021-11-16T10:53:13.791Z"
      },
      {
        "duration": 3,
        "start_time": "2021-11-16T10:55:59.186Z"
      },
      {
        "duration": 3,
        "start_time": "2021-11-16T10:56:10.751Z"
      },
      {
        "duration": 3,
        "start_time": "2021-11-16T10:56:49.038Z"
      },
      {
        "duration": 3,
        "start_time": "2021-11-16T10:56:49.174Z"
      },
      {
        "duration": 4,
        "start_time": "2021-11-16T10:56:49.414Z"
      },
      {
        "duration": 3,
        "start_time": "2021-11-16T10:56:49.680Z"
      },
      {
        "duration": 3,
        "start_time": "2021-11-16T10:56:50.370Z"
      },
      {
        "duration": 114,
        "start_time": "2021-11-16T10:59:34.518Z"
      },
      {
        "duration": 3,
        "start_time": "2021-11-16T11:01:41.201Z"
      },
      {
        "duration": 116,
        "start_time": "2021-11-16T11:01:48.754Z"
      },
      {
        "duration": 3,
        "start_time": "2021-11-16T11:02:16.685Z"
      },
      {
        "duration": 3,
        "start_time": "2021-11-16T11:02:19.479Z"
      },
      {
        "duration": 3,
        "start_time": "2021-11-16T11:02:47.067Z"
      },
      {
        "duration": 3,
        "start_time": "2021-11-16T11:02:49.353Z"
      },
      {
        "duration": 3,
        "start_time": "2021-11-16T11:03:07.835Z"
      },
      {
        "duration": 3,
        "start_time": "2021-11-16T11:03:07.953Z"
      },
      {
        "duration": 112,
        "start_time": "2021-11-16T11:07:52.072Z"
      },
      {
        "duration": 187,
        "start_time": "2021-11-16T11:09:23.468Z"
      },
      {
        "duration": 4,
        "start_time": "2021-11-16T11:10:01.455Z"
      },
      {
        "duration": 3,
        "start_time": "2021-11-16T11:10:05.069Z"
      },
      {
        "duration": 4,
        "start_time": "2021-11-16T11:10:13.376Z"
      },
      {
        "duration": 3,
        "start_time": "2021-11-16T11:10:14.434Z"
      },
      {
        "duration": 3,
        "start_time": "2021-11-16T11:10:22.853Z"
      },
      {
        "duration": 4,
        "start_time": "2021-11-16T11:27:29.279Z"
      },
      {
        "duration": 4,
        "start_time": "2021-11-16T11:29:08.919Z"
      },
      {
        "duration": 118,
        "start_time": "2021-11-16T11:29:46.703Z"
      },
      {
        "duration": 437,
        "start_time": "2021-11-16T11:36:02.181Z"
      },
      {
        "duration": 157,
        "start_time": "2021-11-16T11:36:14.388Z"
      },
      {
        "duration": 207,
        "start_time": "2021-11-16T11:47:15.898Z"
      },
      {
        "duration": 3,
        "start_time": "2021-11-16T11:53:52.092Z"
      },
      {
        "duration": 3,
        "start_time": "2021-11-16T11:53:52.236Z"
      },
      {
        "duration": 3,
        "start_time": "2021-11-16T11:59:12.005Z"
      },
      {
        "duration": 112,
        "start_time": "2021-11-16T12:00:33.446Z"
      },
      {
        "duration": 3,
        "start_time": "2021-11-16T12:02:14.453Z"
      },
      {
        "duration": 3,
        "start_time": "2021-11-16T12:02:39.512Z"
      },
      {
        "duration": 106,
        "start_time": "2021-11-16T12:03:03.460Z"
      },
      {
        "duration": 3,
        "start_time": "2021-11-17T20:37:21.139Z"
      },
      {
        "duration": 3,
        "start_time": "2021-11-17T20:37:22.229Z"
      },
      {
        "duration": 3,
        "start_time": "2021-11-17T20:38:38.806Z"
      },
      {
        "duration": 3,
        "start_time": "2021-11-17T20:38:41.958Z"
      },
      {
        "duration": 3,
        "start_time": "2021-11-17T20:43:46.551Z"
      },
      {
        "duration": 4,
        "start_time": "2021-11-17T20:58:21.835Z"
      },
      {
        "duration": 3,
        "start_time": "2021-11-17T20:59:21.872Z"
      },
      {
        "duration": 4,
        "start_time": "2021-11-17T20:59:45.352Z"
      },
      {
        "duration": 4,
        "start_time": "2021-11-17T20:59:49.646Z"
      },
      {
        "duration": 159,
        "start_time": "2021-11-17T21:02:26.949Z"
      },
      {
        "duration": 3,
        "start_time": "2021-11-17T21:03:53.461Z"
      },
      {
        "duration": 3,
        "start_time": "2021-11-17T21:03:53.694Z"
      },
      {
        "duration": 3,
        "start_time": "2021-11-17T21:05:28.145Z"
      },
      {
        "duration": 116,
        "start_time": "2021-11-17T21:05:57.787Z"
      },
      {
        "duration": 3,
        "start_time": "2021-11-17T21:06:37.993Z"
      },
      {
        "duration": 3,
        "start_time": "2021-11-17T21:06:38.261Z"
      },
      {
        "duration": 3,
        "start_time": "2021-11-17T21:11:54.358Z"
      },
      {
        "duration": 3,
        "start_time": "2021-11-17T21:12:43.846Z"
      },
      {
        "duration": 4,
        "start_time": "2021-11-17T21:13:08.773Z"
      },
      {
        "duration": 3,
        "start_time": "2021-11-17T21:14:44.441Z"
      },
      {
        "duration": 3,
        "start_time": "2021-11-17T21:15:42.059Z"
      },
      {
        "duration": 4,
        "start_time": "2021-11-17T21:15:51.995Z"
      },
      {
        "duration": 3,
        "start_time": "2021-11-17T21:15:53.923Z"
      },
      {
        "duration": 3,
        "start_time": "2021-11-17T21:15:55.282Z"
      },
      {
        "duration": 3,
        "start_time": "2021-11-17T21:16:28.492Z"
      },
      {
        "duration": 3,
        "start_time": "2021-11-17T21:16:32.603Z"
      },
      {
        "duration": 3,
        "start_time": "2021-11-17T21:17:06.941Z"
      },
      {
        "duration": 98,
        "start_time": "2021-11-17T21:18:05.733Z"
      },
      {
        "duration": 4,
        "start_time": "2021-11-17T21:21:35.255Z"
      },
      {
        "duration": 3,
        "start_time": "2021-11-17T21:21:37.804Z"
      },
      {
        "duration": 4,
        "start_time": "2021-11-17T21:23:06.071Z"
      },
      {
        "duration": 3,
        "start_time": "2021-11-17T21:23:24.799Z"
      },
      {
        "duration": 3,
        "start_time": "2021-11-17T21:23:32.591Z"
      },
      {
        "duration": 98,
        "start_time": "2021-11-17T21:28:31.559Z"
      },
      {
        "duration": 3,
        "start_time": "2021-11-17T21:28:45.448Z"
      },
      {
        "duration": 3,
        "start_time": "2021-11-17T21:29:17.303Z"
      },
      {
        "duration": 3,
        "start_time": "2021-11-17T21:29:29.617Z"
      },
      {
        "duration": 3,
        "start_time": "2021-11-17T21:29:32.681Z"
      },
      {
        "duration": 3,
        "start_time": "2021-11-17T21:36:11.474Z"
      },
      {
        "duration": 3,
        "start_time": "2021-11-17T21:36:14.791Z"
      },
      {
        "duration": 3,
        "start_time": "2021-11-17T21:36:53.943Z"
      },
      {
        "duration": 3,
        "start_time": "2021-11-17T21:36:56.165Z"
      },
      {
        "duration": 4,
        "start_time": "2021-11-17T21:37:16.590Z"
      },
      {
        "duration": 3,
        "start_time": "2021-11-17T21:37:22.702Z"
      },
      {
        "duration": 4,
        "start_time": "2021-11-17T21:38:03.479Z"
      },
      {
        "duration": 3,
        "start_time": "2021-11-17T21:38:08.601Z"
      },
      {
        "duration": 3,
        "start_time": "2021-11-17T21:38:12.928Z"
      },
      {
        "duration": 3,
        "start_time": "2021-11-17T21:38:48.896Z"
      },
      {
        "duration": 2,
        "start_time": "2021-11-17T21:38:49.171Z"
      },
      {
        "duration": 4,
        "start_time": "2021-11-17T21:39:57.889Z"
      },
      {
        "duration": 3,
        "start_time": "2021-11-17T21:39:58.057Z"
      },
      {
        "duration": 3,
        "start_time": "2021-11-17T21:41:20.108Z"
      },
      {
        "duration": 3,
        "start_time": "2021-11-17T21:41:20.629Z"
      },
      {
        "duration": 3,
        "start_time": "2021-11-17T21:42:49.136Z"
      },
      {
        "duration": 3,
        "start_time": "2021-11-17T21:43:15.137Z"
      },
      {
        "duration": 4,
        "start_time": "2021-11-17T21:43:16.766Z"
      },
      {
        "duration": 4,
        "start_time": "2021-11-17T21:43:31.711Z"
      },
      {
        "duration": 3,
        "start_time": "2021-11-17T21:43:36.312Z"
      },
      {
        "duration": 4,
        "start_time": "2021-11-17T21:45:08.825Z"
      },
      {
        "duration": 4,
        "start_time": "2021-11-17T21:45:10.119Z"
      },
      {
        "duration": 4,
        "start_time": "2021-11-17T21:45:13.748Z"
      },
      {
        "duration": 3,
        "start_time": "2021-11-17T21:45:22.219Z"
      },
      {
        "duration": 3,
        "start_time": "2021-11-17T21:45:33.412Z"
      },
      {
        "duration": 2,
        "start_time": "2021-11-17T21:46:01.885Z"
      },
      {
        "duration": 3,
        "start_time": "2021-11-17T21:46:03.628Z"
      },
      {
        "duration": 107,
        "start_time": "2021-11-17T21:47:32.512Z"
      },
      {
        "duration": 103,
        "start_time": "2021-11-17T21:50:36.243Z"
      },
      {
        "duration": 3,
        "start_time": "2021-11-18T06:28:31.440Z"
      },
      {
        "duration": 3,
        "start_time": "2021-11-18T06:29:00.168Z"
      },
      {
        "duration": 3,
        "start_time": "2021-11-18T06:31:27.008Z"
      },
      {
        "duration": 2,
        "start_time": "2021-11-18T06:35:34.288Z"
      },
      {
        "duration": 2,
        "start_time": "2021-11-18T06:38:04.527Z"
      },
      {
        "duration": 10,
        "start_time": "2025-01-15T21:35:50.110Z"
      },
      {
        "duration": 5,
        "start_time": "2025-01-15T21:36:02.023Z"
      },
      {
        "duration": 159,
        "start_time": "2025-01-15T21:36:06.303Z"
      },
      {
        "duration": 14,
        "start_time": "2025-01-15T21:36:12.192Z"
      },
      {
        "duration": 14,
        "start_time": "2025-01-15T21:36:19.804Z"
      },
      {
        "duration": 16,
        "start_time": "2025-01-15T21:36:46.674Z"
      },
      {
        "duration": 18,
        "start_time": "2025-01-15T21:36:53.293Z"
      },
      {
        "duration": 16,
        "start_time": "2025-01-15T21:39:55.832Z"
      }
    ],
    "colab": {
      "provenance": []
    },
    "kernelspec": {
      "display_name": "Python 3",
      "language": "python",
      "name": "python3"
    },
    "language_info": {
      "codemirror_mode": {
        "name": "ipython",
        "version": 3
      },
      "file_extension": ".py",
      "mimetype": "text/x-python",
      "name": "python",
      "nbconvert_exporter": "python",
      "pygments_lexer": "ipython3",
      "version": "3.12.5"
    },
    "toc": {
      "base_numbering": 1,
      "nav_menu": {},
      "number_sections": true,
      "sideBar": true,
      "skip_h1_title": false,
      "title_cell": "Table of Contents",
      "title_sidebar": "Contents",
      "toc_cell": false,
      "toc_position": {},
      "toc_section_display": true,
      "toc_window_display": true
    }
  },
  "nbformat": 4,
  "nbformat_minor": 1
}

--- ARQUIVO: Sprints\sprint 4\sprint4.ipynb (sem output) ---
{
  "cells": [
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "eAkbw7Ueuj8X"
      },
      "source": [
        "# Qual é o melhor plano?\n",
        "\n",
        "Você trabalha como analista para a empresa de telecomunicações Megaline. A empresa oferece aos clientes dois planos pré-pagos: Surf e Ultimate. O departamento comercial quer saber qual dos planos gera mais receita para ajustar o orçamento de publicidade.\n",
        "\n",
        "Você vai realizar uma análise preliminar dos planos com base em uma pequena seleção de clientes. Você terá dados de 500 clientes da Megaline: que clientes são, de onde eles são, qual plano usam e o número de chamadas e mensagens realizadas em 2018. Seu trabalho é analisar o comportamento dos clientes e determinar qual plano pré-pago gera mais receita."
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        "# Projeto\n",
        "Eu irei ler os arquivos, buscar problemas, solucionar-los, fazer engenharia de carácteristica, e demostrar os resultados por meio de graficos ou strings."
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "lnomf-3Xuj8b"
      },
      "source": [
        "## Inicialização"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "JdJusn5ouj8c"
      },
      "outputs": [],
      "source": [
        "# Carregando todas as bibliotecas\n",
        "import pandas as pd\n",
        "import numpy as np\n",
        "import seaborn as sns\n",
        "from scipy import stats as st\n",
        "import matplotlib.pyplot as plt\n",
        "from calendar import month_name\n"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "rzqsCrgquj8d"
      },
      "source": [
        "## Carregue os dados"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "HmzmQRXIuj8e"
      },
      "outputs": [],
      "source": [
        "# Carregue os arquivos de dados em diferentes DataFrames\n",
        "plans = pd.read_csv(r\"C:\\Users\\jonat\\Documents\\GitHub\\Sprints\\sprint 4\\tables\\megaline_plans.csv\")\n",
        "calls = pd.read_csv(r\"C:\\Users\\jonat\\Documents\\GitHub\\Sprints\\sprint 4\\tables\\megaline_calls.csv\")\n",
        "messages = pd.read_csv(r\"C:\\Users\\jonat\\Documents\\GitHub\\Sprints\\sprint 4\\tables\\megaline_messages.csv\")\n",
        "internet = pd.read_csv(r\"C:\\Users\\jonat\\Documents\\GitHub\\Sprints\\sprint 4\\tables\\megaline_internet.csv\")\n",
        "users = pd.read_csv(r\"C:\\Users\\jonat\\Documents\\GitHub\\Sprints\\sprint 4\\tables\\megaline_users.csv\")\n"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {},
      "outputs": [],
      "source": [
        "plans.head(1),calls.head(1),messages.head(1),internet.head(1),calls.head(1)"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        "Todas as colunas corretamente feitas, indica que não precisa mudar o \",\" do csv para outra coisa como \";\""
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "XQh-EeiIuj8e"
      },
      "source": [
        "## Prepare os dados"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "RmibJmmzuj8e"
      },
      "source": [
        "[Os dados deste projeto estão divididos em várias tabelas. Explore cada uma para obter uma compreensão inicial dos dados. Faça correções em cada tabela, se necessário.]"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "TlZUw_Cyuj8f"
      },
      "source": [
        "## Planos"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "x9qB5mAOuj8f"
      },
      "outputs": [],
      "source": [
        "# Imprima informações gerais/resumo sobre o DataFrame dos planos\n",
        "\n",
        "plans.info()"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "9MRo7tyVuj8f"
      },
      "outputs": [],
      "source": [
        "# Imprima uma amostra de dados dos planos\n",
        "\n",
        "plans"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "P8hzr-lquj8f"
      },
      "source": [
        "Um df pequeno com apenas 2 linhas com nomes das colunas corretos, tipos de dados, e dados em si. Nada para corrijir."
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "KXtaxmKsuj8f"
      },
      "source": [
        "## Corrija os dados"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "9BWuM80Buj8f"
      },
      "source": [
        "Sem erros para corrigir"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "kLcdKu6Duj8g"
      },
      "source": [
        "## Enriqueça os dados"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "x1L6F_gmuj8g"
      },
      "source": [
        "Sem modificações para fazer."
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "YJg2O9qjuj8g"
      },
      "source": [
        "## Usuários"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "7JzxwD2juj8g"
      },
      "outputs": [],
      "source": [
        "# Imprima informações gerais/resumo sobre o DataFrame dos usuários\n",
        "\n",
        "users.info()"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "5KZ8XmD8uj8g"
      },
      "outputs": [],
      "source": [
        "# Imprima uma amostra de dados dos usuários\n",
        "\n",
        "users.sample(10)"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "XGCgkfLvuj8h"
      },
      "source": [
        "O df tem uma coluna que não esta no tipo \"datetime\", na coluna churn_date tem valores nulos, porém é esperado pois são os clientes que não canselaram. \n"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "ppiEfe3luj8i"
      },
      "source": [
        "### Corrija os dados"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "os4Gubp_uj8j"
      },
      "source": [
        "Transformar a coluna reg_date, churn_date no tipo data frame"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {},
      "outputs": [],
      "source": [
        "users['churn_date'] = pd.to_datetime(users['churn_date'], errors='coerce')\n",
        "users['reg_date'] = pd.to_datetime(users['reg_date'], errors='coerce')\n",
        "users.info()"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "H3gpde3Juj8j"
      },
      "source": [
        "### Enriqueça os dados"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "HOZyfII6uj8j"
      },
      "source": [
        "NaN"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "f4uSIMuuuj8j"
      },
      "source": [
        "## Chamadas"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "hkY01fJnuj8j"
      },
      "outputs": [],
      "source": [
        "# Imprima informações gerais/resumo sobre o DataFrame das chamadas\n",
        "\n",
        "calls.info()"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "wdBwJG5Yuj8k"
      },
      "outputs": [],
      "source": [
        "# Imprima uma amostra de dados das chamadas\n",
        "calls.sample(10)\n"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "Y8An85-Tuj8k"
      },
      "source": [
        "Identifiquei que a coluna call_date não está no tipo dados, e que a muitos valores 0.00 na duração da call, podem ser calls que não foram atendidas, portanto não irei mofidificar. "
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "x5a99U4xuj8k"
      },
      "source": [
        "### Corrija os dados"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "MQqkU83Xuj8k"
      },
      "source": [
        "Corrijindo o tipo da coluna de datas"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "lBjdw0Bnuj8l"
      },
      "outputs": [],
      "source": [
        "calls['call_date'] = pd.to_datetime(calls['call_date'], errors='coerce')\n",
        "calls.info()"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "MFm5xyh4uj8l"
      },
      "source": [
        "### Enriqueça os dados"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "Udv2togruj8l"
      },
      "source": [
        "Criarei uma nova coluna com apenas os meses"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {},
      "outputs": [],
      "source": [
        "calls['month_name'] = calls['call_date'].dt.month.map(lambda x: month_name[x])\n",
        "calls"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "qLz4FkyRuj8l"
      },
      "source": [
        "## Mensagens"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "nFA9DFkCuj8l"
      },
      "outputs": [],
      "source": [
        "# Imprima informações gerais/resumo sobre o DataFrame das mensagens\n",
        "\n",
        "messages.info()"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "ysEFBZWxuj8m"
      },
      "outputs": [],
      "source": [
        "# Imprima uma amostra dos dados das mensagens\n",
        "\n",
        "messages.head(10)"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "GUtt1TqCuj8m"
      },
      "source": [
        "Sem dados nulos, porém na coluna message date não está no tipo datetime."
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "tT8N_hc6uj8m"
      },
      "source": [
        "### Corrija os dados"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "IgO0SzXKuj8m"
      },
      "source": [
        "Corrijindo o tipo da coluna de data."
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "SpBqbQHCuj8m"
      },
      "outputs": [],
      "source": [
        "messages['message_date'] = pd.to_datetime(messages['message_date'], errors='coerce')\n",
        "messages['message_date'].info()"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "feV2Njo9uj8n"
      },
      "source": [
        "### Enriqueça os dados"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "KA5XDEoZuj8n"
      },
      "source": [
        "Vou fazer uma tabela que só tera os meses."
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {},
      "outputs": [],
      "source": [
        "messages['month_name'] = messages['message_date'].dt.month.map(lambda x: month_name[x])\n",
        "messages"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "ZRFaOWzGuj8n"
      },
      "source": [
        "## Internet"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "ob3-qv4nuj8n"
      },
      "outputs": [],
      "source": [
        "# Imprima informações gerais/resumo sobre o DataFrame da internet\n",
        "\n",
        "internet.info()"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "iIHK4fZsuj8n"
      },
      "outputs": [],
      "source": [
        "#  Imprima uma amostra de dados para o tráfego da internet\n",
        "internet.sample(10)\n"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "6wpo7ugquj8o"
      },
      "source": [
        "O data frame tem a coluna session_date no tipo errado. O mb_used tem valores zerados que no caso são de clientes que não usaram os dados por algum motivo. "
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "Tly90YrTuj8o"
      },
      "source": [
        "### Corrija os dados"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "F_yvcX-9uj8o"
      },
      "source": [
        "Vou transforma a coluna session_date para o tipo datetime"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "GCoX7kbmuj8o"
      },
      "outputs": [],
      "source": [
        "internet['session_date'] = pd.to_datetime(internet['session_date'], errors='coerce')\n",
        "internet.info()"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "DEDbrtFduj8o"
      },
      "source": [
        "### Enriqueça os dados"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        "Vou fazer uma tabela que só tera os meses."
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {},
      "outputs": [],
      "source": [
        "internet['month_name'] = internet['session_date'].dt.month.map(lambda x: month_name[x])\n",
        "internet"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "bnOX4ARJuj8p"
      },
      "source": [
        "## Estude as condições dos planos"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "vMXVndWEuj8p"
      },
      "outputs": [],
      "source": [
        "# Imprima as condições dos planos e certifique-se de que elas fazem sentido para você\n",
        "plans\n"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        "O custo da mais cara inicial é maior porém para almentar o plano mais caro(seja adcionando mensagem, minutos ou gb) é mais barato."
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "1v1EshDmuj8q"
      },
      "source": [
        "## Agregue os dados por usuário\n"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "4hmb2pSPuj8q"
      },
      "outputs": [],
      "source": [
        "# Calcule o número de chamadas feitas por cada usuário por mês. Salve o resultado.\n",
        "call_count = calls.groupby(['user_id', 'month_name']).size().reset_index(name='call_count') \n",
        "call_count.head(10)"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "yHgBWCJJuj8q"
      },
      "outputs": [],
      "source": [
        "# Calcule a quantidade de minutos gastos por cada usuário por mês. Salve o resultado.\n",
        "\n",
        "total_minutes = calls.groupby(['user_id', 'month_name'])['duration'].sum().reset_index(name='total_minutes')\n",
        "total_minutes.head(10)"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "MaM_cPxauj8q"
      },
      "outputs": [],
      "source": [
        "# Calcule o número de mensagens enviadas por cada usuário por mês. Salve o resultado.\n",
        "\n",
        "messages_caunt =  messages.groupby(['user_id', 'month_name']).size().reset_index(name='messages_count') \n",
        "messages_caunt.head(10)      "
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "WsCEZJ_xuj8q"
      },
      "outputs": [],
      "source": [
        "# Calcule o volume de tráfego de internet usado por cada usuário por mês. Salve o resultado.\n",
        "\n",
        "total_internet = internet.groupby(['user_id', 'month_name'])['mb_used'].sum().reset_index(name='total_internet')\n",
        "total_internet.head(10)     "
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "BYDTkxOauj8r"
      },
      "outputs": [],
      "source": [
        "# Junte os dados de chamadas, minutos, mensagens e internet com base em user_id e month\n",
        "\n",
        "merged_df = pd.merge(call_count, total_minutes, on=['user_id', 'month_name'], how='outer')\n",
        "merged_df = pd.merge(merged_df, total_internet, on=['user_id', 'month_name'], how='outer')\n",
        "merged_df = pd.merge(merged_df, messages_caunt, on=['user_id', 'month_name'], how='outer')\n",
        "merged_df"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "SW-sgLaHuj8r"
      },
      "outputs": [],
      "source": [
        "# Adicione as informações sobre o plano\n",
        "\n",
        "merged_df = pd.merge(merged_df, users[['user_id', 'plan']], on='user_id', how='left')\n",
        "merged_df"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {},
      "outputs": [],
      "source": [
        "def conditional_total_sum(row):\n",
        "    \"\"\"Faz uma soma condicional das linhas levando em conta os planos\n",
        "\n",
        "    Args:\n",
        "        row \n",
        "\n",
        "    Returns:\n",
        "        total da som_\n",
        "    \"\"\"\n",
        "    total_sum = 0\n",
        "    if row['plan'] == \"surf\":  # Verifica a condição\n",
        "        total_sum += 20\n",
        "\n",
        "        if row['messages_count'] > 50:\n",
        "            total_sum = total_sum + ((row['messages_count']-50)* 0.03)\n",
        "\n",
        "        if row['total_minutes'] > 500:\n",
        "            total_sum = total_sum + ((row['total_minutes']-500)* 0.03)\n",
        "\n",
        "        if row['total_internet'] > (1024*15):\n",
        "            excess_internet  = (row['total_internet']-(1024*15))/1024\n",
        "            excess_internet  = np.ceil(excess_internet )\n",
        "            total_sum += ((excess_internet )* 10)\n",
        "    \n",
        "    else:\n",
        "        total_sum += 70\n",
        "        \n",
        "        if row['messages_count'] > 1000:\n",
        "            total_sum = total_sum + ((row['messages_count']-1000)* 0.01)\n",
        "\n",
        "        if row['total_minutes'] > 3000:\n",
        "            total_sum = total_sum + ((row['total_minutes']-3000)* 0.01)\n",
        "\n",
        "        if row['total_internet'] > (1024*30):\n",
        "            excess_internet  = (row['total_internet']-(1024*30))/1024\n",
        "            excess_internet  = np.ceil(excess_internet )\n",
        "            total_sum += ((excess_internet )* 7)\n",
        "\n",
        "    return total_sum\n"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "JiPHXbQAuj8r"
      },
      "outputs": [],
      "source": [
        "# Calcule a receita mensal para cada usuário\n",
        "# excess_internet trair o limite gratuito do pacote do número total de chamadas, mensagens de texto e dados;\n",
        "# Aplicando a função com apply\n",
        "merged_df['conditional_total_sum'] = merged_df.apply(conditional_total_sum, axis=1)\n",
        "merged_df\n"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {},
      "outputs": [],
      "source": [
        "merged_df.describe()"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "0HFWXKTQuj8r"
      },
      "source": [
        "## Estude o comportamento do usuário"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "umaMfSLxuj8s"
      },
      "source": [
        "### Chamadas"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {},
      "outputs": [],
      "source": [
        "merged_df.info()"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {},
      "outputs": [],
      "source": [
        "# ordenando os meses\n",
        "month_order = list(month_name[1:])\n",
        "merged_df['month_name'] = pd.Categorical(merged_df['month_name'], categories=month_order, ordered=True)"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "0236-tJnuj8t"
      },
      "outputs": [],
      "source": [
        "# Compare a duração média das chamadas de cada plano para cada mês. Crie um gráfico de barras para visualizar o resultado.\n",
        "\n",
        "df = merged_df['plan'] == \"surf\" #fiz artibuindo uma variavel para ser menos custoso para o hardwere\n",
        "\n",
        "surf = merged_df[df]\n",
        "surf_mean = surf.groupby(['plan', 'month_name'])['total_minutes'].mean().reset_index(name='total_minutes')\n",
        "\n",
        "ultimate = merged_df[~df]\n",
        "ultimate_mean = ultimate.groupby(['plan', 'month_name'])['total_minutes'].mean().reset_index(name='total_minutes')\n",
        "\n",
        "width = 0.9 \n",
        "plt.bar(surf_mean['month_name'], surf_mean['total_minutes'], width-0.4, label='Surf', alpha=0.5)\n",
        "plt.bar(ultimate_mean['month_name'], ultimate_mean['total_minutes'], width, label='Ultimate', alpha=0.5)\n",
        "plt.xticks(rotation=-45)\n",
        "plt.title('Comparação de Duração das Chamadas por Plano e Mês')\n",
        "plt.ylabel('Total de Minutos')\n",
        "plt.legend(loc='lower right')\n",
        "plt.show()"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "9sCQ1lP8uj8u"
      },
      "outputs": [],
      "source": [
        "# Compare o número de minutos que os usuários de cada plano necessitam a cada mês. Construa um histograma.\n",
        "\n",
        "plt.hist(surf['total_minutes'], bins=10, alpha=0.5, label='Surf')\n",
        "plt.hist(ultimate['total_minutes'], bins=10, alpha=0.5, label='Ultimate')\n",
        "plt.title('Histograma dos clientes por minutos')\n",
        "plt.ylabel('Clientes')\n",
        "plt.xlabel('Minutos')\n",
        "plt.legend(loc='right')\n",
        "plt.show()"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "cIdodPExuj8u"
      },
      "outputs": [],
      "source": [
        "# Calcule a média e a variância da duração mensal das chamadas\n",
        "\n",
        "mean = merged_df['total_minutes'].mean()\n",
        "var = np.var(merged_df['total_minutes'])\n",
        "print(f\"a media é: {mean} e a variância é: {var}\")"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "DW7vTypxuj8u"
      },
      "outputs": [],
      "source": [
        "# Faça um diagrama de caixa para visualizar a distribuição da duração mensal das chamadas\n",
        "fig, axes = plt.subplots(2, 1, figsize=(8, 6))\n",
        "\n",
        "# Boxplot 1 (primeira linha)\n",
        "sns.boxplot(data=surf['total_minutes'], ax=axes[0], orient='h').set_xlim(-100, 1400)\n",
        "axes[0].set_title('surf vx ultimate')\n",
        "\n",
        "# Boxplot 2 (segunda linha)\n",
        "sns.boxplot(data=ultimate['total_minutes'], ax=axes[1], orient='h').set_xlim(-100, 1400)\n",
        "\n",
        "plt.show()"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "Uyt3rWn7uj8u"
      },
      "source": [
        "No final no 2 ao 4 trimestre é quando tem mai demanda por minutos.\n",
        "\n",
        "O histograma indica uma calda longa para a direita e grossa para a esquerda. \n",
        "\n",
        "A media(411) esta proxima da mediana(404) oque indica pouca assimetria. \n",
        "\n",
        "A maioria não importantando o plano gasta entre 300 a 500 minutos. Ou seja no caso do plano surf faz todo sentido pois está no limiar do cliente comprar uma expanção mensal(fazendo com que a empresa ganhe mais). Porém no plano ultimate o valor maximo de minutos passa de 500 para 3000 o que é muito irreal para o plano pois ninguém conseguiu chegar a este valor, levando em conta o boxplot do ultimate o valor maximo do plano ultimate deveria ser 1000 minutos. \n"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "2hWSPtrnuj8v"
      },
      "source": [
        "### Mensagens"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "9kPlAhOJuj8v"
      },
      "outputs": [],
      "source": [
        "# Compare o número de mensagens que os usuários de cada plano costumam enviar a cada mês\n",
        "\n",
        "\n",
        "surf_mean = surf.groupby(['plan', 'month_name'])['messages_count'].mean().reset_index(name='messages_count')\n",
        "\n",
        "ultimate_mean = ultimate.groupby(['plan', 'month_name'])['messages_count'].mean().reset_index(name='messages_count')\n",
        "\n",
        "width = 0.9 \n",
        "plt.bar(ultimate_mean['month_name'], ultimate_mean['messages_count'], width, label='Ultimate', alpha=0.5)\n",
        "plt.bar(surf_mean['month_name'], surf_mean['messages_count'], width-0.4, label='Surf', alpha=0.5)\n",
        "\n",
        "plt.xticks(rotation=-45)\n",
        "plt.title('Comparação de Duração das mensagens por Plano e Mês')\n",
        "plt.ylabel('Mensagens')\n",
        "plt.legend(loc='lower right')\n",
        "plt.show()"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "fIVdRuT6uj8v"
      },
      "outputs": [],
      "source": [
        "\n",
        "plt.hist(surf['messages_count'], bins=20, alpha=0.5, label='Surf')\n",
        "plt.hist(ultimate['messages_count'], bins=20, alpha=0.5, label='Ultimate')\n",
        "plt.title('Histograma dos clientes por mensagens')\n",
        "plt.ylabel('Clientes')\n",
        "plt.xlabel('Mensagens')\n",
        "plt.legend(loc='right')\n",
        "plt.show()\n"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "di6wucOLuj8v"
      },
      "outputs": [],
      "source": [
        "mean = merged_df['messages_count'].mean()\n",
        "var = np.var(merged_df['messages_count'])\n",
        "print(f\"a media é: {mean} e a variância é: {var}\")"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {},
      "outputs": [],
      "source": [
        "\n",
        "fig, axes = plt.subplots(2, 1, figsize=(8, 6))\n",
        "\n",
        "# Boxplot 1 (primeira linha)\n",
        "sns.boxplot(data=surf['messages_count'], ax=axes[0], orient='h').set_xlim(-10, 250)\n",
        "axes[0].set_title('surf vx ultimate')\n",
        "\n",
        "# Boxplot 2 (segunda linha)\n",
        "sns.boxplot(data=ultimate['messages_count'], ax=axes[1], orient='h').set_xlim(-10, 250)\n",
        "\n",
        "plt.show()"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "v6QELMtcuj8v"
      },
      "source": [
        "\n",
        "No final no 2 ao 4 trimestre é quando tem mai demanda por mensagens.\n",
        "\n",
        "O histograma só tem uma calda longa para a direita oque indica assimetria dos dados\n",
        "\n",
        "A media(42) esta proxima da mediana(34) oque indica muita assimetria. \n",
        "\n",
        "Por serem dados assimetricos tem muitos outlayers, e no caso do surf tem mais outlayers do que o ultimate.\n",
        "\n",
        "No caso dos limites o surf tem um limite muito baixo de mensagens onde uma grande parte dos clientes pagam por mensagens extras. E no caso do ultimate tem um limite muito irrealistamente grande onde nenhum dos clientes chegou usar. "
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "nHUCwAnauj8w"
      },
      "source": [
        "### Internet"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "EEm27RaRuj8w"
      },
      "outputs": [],
      "source": [
        "# Compare o número de mensagens que os usuários de cada plano costumam enviar a cada mês\n",
        "\n",
        "\n",
        "surf_mean = surf.groupby(['plan', 'month_name'])['total_internet'].mean().reset_index(name='total_internet')\n",
        "surf[\"total_internet\"]  = surf[\"total_internet\"] / 1024\n",
        "ultimate_mean= ultimate.groupby(['plan', 'month_name'])['total_internet'].mean().reset_index(name='total_internet')\n",
        "ultimate[\"total_internet\"] = ultimate[\"total_internet\"] / 1024\n",
        "width = 0.9 \n",
        "plt.bar(ultimate_mean['month_name'], ultimate_mean['total_internet'], width, label='Ultimate', alpha=0.5)\n",
        "plt.bar(surf_mean['month_name'], surf_mean['total_internet'], width-0.4, label='Surf', alpha=0.5)\n",
        "\n",
        "plt.xticks(rotation=-45)\n",
        "plt.title('Comparação de Duração das internet por Plano e Mês')\n",
        "plt.ylabel('Mensagens')\n",
        "plt.legend(loc='lower right')\n",
        "plt.show()"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "Detb0wIZuj8w"
      },
      "outputs": [],
      "source": [
        "\n",
        "plt.hist(surf['total_internet'], bins=50, alpha=0.5, label='Surf')\n",
        "plt.hist(ultimate['total_internet'], bins=50, alpha=0.5, label='Ultimate')\n",
        "plt.title('Histograma dos clientes por internet')\n",
        "plt.ylabel('Clientes')\n",
        "plt.xlabel('Dados(Gb)')\n",
        "plt.legend(loc='right')\n",
        "plt.show()\n"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "1zsw31_cuj8w"
      },
      "outputs": [],
      "source": [
        "surf_mean = surf['total_internet'].mean()\n",
        "ultimate_mean = ultimate['total_internet'].mean()\n",
        "print(f\"a media de surf é: {surf_mean}a media de ultimate é: {ultimate_mean}\")"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {},
      "outputs": [],
      "source": [
        "\n",
        "fig, axes = plt.subplots(2, 1, figsize=(8, 6))\n",
        "\n",
        "# Boxplot 1 (primeira linha)\n",
        "sns.boxplot(data=surf['total_internet'], ax=axes[0], orient='h').set_xlim(-5, 71)\n",
        "axes[0].set_title('surf vx ultimate')\n",
        "\n",
        "# Boxplot 2 (segunda linha)\n",
        "sns.boxplot(data=ultimate['total_internet'], ax=axes[1], orient='h').set_xlim(-5, 71)\n",
        "\n",
        "plt.show()"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "GsHkFpGmuj8w"
      },
      "source": [
        "Apenas janeiro não gastam muito a internet.\n",
        "\n",
        "O surf pega uma fatia maior do mercado. O histograma  tem uma calda longa para a direita.\n",
        "\n",
        "A média do ultimate é apenas 0.5% a mais que o surf, oque indica que o uso da internet é muito parecido entre os planos.\n",
        "\n",
        "O surf tem mais outlaiers mais para a direita, Oque indica que o limite esta baixo, e não abrange a maioria dos clientes. "
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "g23qXaYNuj8x"
      },
      "source": [
        "## Receita"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "CGuBwYRyuj8y"
      },
      "outputs": [],
      "source": [
        "surf_mean = surf.groupby(['plan', 'month_name'])['conditional_total_sum'].mean().reset_index(name='conditional_total_sum')\n",
        "surf[\"conditional_total_sum\"]  = surf[\"conditional_total_sum\"]\n",
        "ultimate_mean= ultimate.groupby(['plan', 'month_name'])['conditional_total_sum'].mean().reset_index(name='conditional_total_sum')\n",
        "ultimate[\"conditional_total_sum\"] = ultimate[\"conditional_total_sum\"]\n",
        "width = 0.9 \n",
        "plt.bar(ultimate_mean['month_name'], ultimate_mean['conditional_total_sum'], width, label='Ultimate', alpha=0.5)\n",
        "plt.bar(surf_mean['month_name'], surf_mean['conditional_total_sum'], width-0.4, label='Surf', alpha=0.5)\n",
        "\n",
        "plt.xticks(rotation=-45)\n",
        "plt.title('Comparação de Duração das receitas por Plano e Mês')\n",
        "plt.ylabel('$')\n",
        "plt.legend(loc='lower right')\n",
        "# plt.show()"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "qJSyfvUguj8y"
      },
      "outputs": [],
      "source": [
        "\n",
        "plt.hist(surf['conditional_total_sum'],bins=10, alpha=0.5, label='Surf')\n",
        "plt.hist(ultimate['conditional_total_sum'],bins=2, alpha=0.5, label='Ultimate')\n",
        "plt.title('Histograma dos clientes por mensagens')\n",
        "plt.ylabel('Clientes')\n",
        "plt.xlabel('Mensagens')\n",
        "plt.legend(loc='right')\n",
        "plt.xticks(ticks=np.arange(0, 600, 70)) \n",
        "plt.show()\n"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "KUSxMW71uj8z"
      },
      "outputs": [],
      "source": [
        "surf_mean = surf['conditional_total_sum'].mean()\n",
        "ultimate_mean = ultimate['conditional_total_sum'].mean()\n",
        "print(f\"a media de surf é: {surf_mean}a media de ultimate é: {ultimate_mean}\")"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {},
      "outputs": [],
      "source": [
        "surf_mean"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "6X34EwHpuj8z"
      },
      "source": [
        "O ultimat tem uma receita mais estável durante o ano. e o surf tem  mais demanda no 3 e 4 trimestre\n",
        "\n",
        "Tem mais dados no surf, ou seja mais cliente, e sei valor, oque atrapalha a analise. Mas tanto surf quanto ultimat tem uma calda longa para a direita.\n",
        "\n",
        "A meda do valor da surf é $60 quando o valor do plano é $20 isso quer dizer que muitos clientes pagam extra. Enquanto no ultimat isso não acontece, a media sendo $72 e o valor do plano sendo $70 poucos clientes pagam extras."
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "xJ6Mu-KAuj8z"
      },
      "source": [
        "## Teste hipóteses estatísticas"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "LyGrPhpUuj80"
      },
      "outputs": [],
      "source": [
        "print(\"Hipóteses do teste:\")\n",
        "print(\"H0: A média de uso total da internet pelos usuários dos planos 'Surf' e 'Ultimate' é igual.\")\n",
        "print(\"Ha: A média de uso total da internet pelos usuários dos planos 'Surf' e 'Ultimate' é diferente.\\n\")\n",
        "print(f\"a media de surf é: {surf_mean:.2f} a media de ultimate é: {ultimate_mean:.2f}\")\n",
        "# Teste as hipóteses\n",
        "alpha = 0.05\n",
        "results = st.ttest_ind(\n",
        "    surf['conditional_total_sum'].sample(n=700) , \n",
        "    ultimate['conditional_total_sum'].sample(n=700))\n",
        "print(f'valor-p: {results.pvalue:.10f}')\n",
        "if (results.pvalue < alpha):\n",
        "    print(\"Rejeitamos a hipótese nula\")\n",
        "else:\n",
        "    print(\"Não podemos rejeitar a hipótese nula\")"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "Cz6rwE56uj80"
      },
      "source": [
        "[Teste a hipótese de que a receita média dos usuários da área de NY-NJ difere dos usuários das demais regiões.]"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "98t8iiJyuj80"
      },
      "outputs": [],
      "source": [
        "# Realizar o merge\n",
        "merged_table = pd.merge(users[['user_id', 'city']], merged_df[['user_id', 'conditional_total_sum']], on='user_id', how='inner')\n",
        "\n",
        "grouped_df = merged_table.groupby(['user_id', 'city'], as_index=False)['conditional_total_sum'].sum()\n",
        "# Resultado\n",
        "in_NYNJ = grouped_df[grouped_df['city'].str.contains('NY-NJ', na=False)]\n",
        "not_NYNJ = grouped_df[~grouped_df['city'].str.contains('NY-NJ', na=False)]\n",
        "\n",
        "\n",
        "print(\"Hipóteses do teste:\")\n",
        "print(\"H0: A média de uso total da internet pelos usuários dos planos 'Surf' e 'Ultimate' é igual.\")\n",
        "print(\"Ha: A média de uso total da internet pelos usuários dos planos 'Surf' e 'Ultimate' é diferente.\\n\")\n",
        "\n",
        "\n",
        "print(f\"a media de surf é: {in_NYNJ['conditional_total_sum'].mean():.2f} a media de ultimate é: {not_NYNJ['conditional_total_sum'].mean():.2f}\\n\")\n",
        "\n",
        "# Teste as hipóteses\n",
        "alpha = 0.05\n",
        "results = st.ttest_ind(\n",
        "    in_NYNJ['conditional_total_sum'] , \n",
        "    not_NYNJ['conditional_total_sum'])\n",
        "print(f'valor-p: {results.pvalue:.10f}')\n",
        "if (results.pvalue < alpha):\n",
        "    print(\"Rejeitamos a hipótese nula\")\n",
        "else:\n",
        "    print(\"Não podemos rejeitar a hipótese nula\")"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "M8WycwWFuj81"
      },
      "source": [
        "## Conclusão geral\n",
        "\n",
        "### Leitura e Identificação de Problemas:\n",
        "\n",
        "O arquivo CSV está correto e não precisa de ajustes no separador de colunas.\n",
        "Algumas colunas têm tipos de dados incorretos, como \"churn_date\" (que contém valores nulos, mas isso é esperado) e \"call_date\" (que não está no tipo datetime).\n",
        "A coluna \"message date\" também não está no tipo datetime.\n",
        "A coluna \"session_date\" tem o tipo de dado errado e \"mb_used\" tem valores zerados (indicando clientes que não usaram dados).\n",
        "\n",
        "### Observações sobre Planos e Gastos:\n",
        "\n",
        "O custo inicial do plano mais caro é maior, mas o aumento do valor para adicionar mais minutos, mensagens ou dados é mais barato.\n",
        "A demanda por minutos é maior nos trimestres 2 a 4.\n",
        "O histograma de minutos de uso tem uma cauda longa à direita e grossa à esquerda, com a média (411) próxima da mediana (404), indicando pouca assimetria.\n",
        "A maioria dos clientes gasta entre 300 e 500 minutos, o que faz sentido no plano Surf, pois está próximo ao limiar para expansão mensal. No plano Ultimate, o valor máximo de minutos é irrealista (chega até 3000 minutos).\n",
        "\n",
        "### Análise sobre Mensagens e Internet:\n",
        "\n",
        "A demanda por mensagens também aumenta nos trimestres 2 a 4.\n",
        "O histograma de mensagens tem uma cauda longa à direita, indicando assimetria e muitos outliers, especialmente no plano Surf.\n",
        "O uso da internet é mais baixo em janeiro, e o plano Surf tem maior fatia do mercado.\n",
        "A média de uso de internet no plano Ultimate (72) é ligeiramente maior do que no Surf (60), mas o uso de ambos os planos é muito parecido.\n",
        "\n",
        "### Análise de Outliers e Limites:\n",
        "\n",
        "O plano Surf tem mais outliers e um limite de mensagens muito baixo, fazendo com que muitos clientes paguem por mensagens extras. Já o plano Ultimate tem um limite irrealisticamente grande, que nenhum cliente alcança.\n",
        "O plano Surf tem mais demanda nos trimestres 3 e 4.\n",
        "A receita no plano Ultimate é mais estável durante o ano, enquanto o Surf tem mais variabilidade.\n",
        "A média de receita do plano Surf é $60, embora o preço do plano seja $20, indicando que muitos clientes pagam extras. No plano Ultimate, a média de receita é $72, próximo ao valor do plano ($70), o que significa que poucos clientes pagam extras.\n",
        "\n",
        "### Testes de Hipóteses:\n",
        "\n",
        "Hipótese sobre a receita média entre planos Ultimate e Surf: A média de receita no plano Surf é $60.33 e no Ultimate é $72.31. O valor-p (0.0000224847) é muito pequeno, portanto, rejeitamos a hipótese nula de que as receitas médias são iguais.\n",
        "Hipótese sobre a receita média entre usuários da área de NY-NJ e demais regiões: A média de receita para NY-NJ é 284.46 e para outras regiões é 302.89. O valor-p (0.5798995337) é alto, portanto, não podemos rejeitar a hipótese nula, indicando que as receitas médias entre as duas áreas não são significativamente diferentes."
      ]
    }
  ],
  "metadata": {
    "ExecuteTimeLog": [
      {
        "duration": 828,
        "start_time": "2021-11-16T09:21:11.304Z"
      },
      {
        "duration": 893,
        "start_time": "2021-11-16T09:21:17.728Z"
      },
      {
        "duration": 1150,
        "start_time": "2021-11-16T09:21:29.568Z"
      },
      {
        "duration": 3,
        "start_time": "2021-11-16T09:24:14.495Z"
      },
      {
        "duration": 120,
        "start_time": "2021-11-16T09:24:46.630Z"
      },
      {
        "duration": 3,
        "start_time": "2021-11-16T09:28:27.882Z"
      },
      {
        "duration": 4,
        "start_time": "2021-11-16T09:29:54.281Z"
      },
      {
        "duration": 3,
        "start_time": "2021-11-16T09:30:45.936Z"
      },
      {
        "duration": 4,
        "start_time": "2021-11-16T09:31:06.300Z"
      },
      {
        "duration": 113,
        "start_time": "2021-11-16T09:31:37.208Z"
      },
      {
        "duration": 143,
        "start_time": "2021-11-16T09:31:48.656Z"
      },
      {
        "duration": 98,
        "start_time": "2021-11-16T09:31:55.678Z"
      },
      {
        "duration": 3,
        "start_time": "2021-11-16T09:32:08.535Z"
      },
      {
        "duration": 111,
        "start_time": "2021-11-16T09:32:10.120Z"
      },
      {
        "duration": 3,
        "start_time": "2021-11-16T09:32:15.732Z"
      },
      {
        "duration": 4,
        "start_time": "2021-11-16T09:32:29.423Z"
      },
      {
        "duration": 3,
        "start_time": "2021-11-16T10:03:03.074Z"
      },
      {
        "duration": 3,
        "start_time": "2021-11-16T10:10:01.288Z"
      },
      {
        "duration": 3,
        "start_time": "2021-11-16T10:10:46.923Z"
      },
      {
        "duration": 121,
        "start_time": "2021-11-16T10:37:46.494Z"
      },
      {
        "duration": 125,
        "start_time": "2021-11-16T10:38:20.632Z"
      },
      {
        "duration": 112,
        "start_time": "2021-11-16T10:46:53.001Z"
      },
      {
        "duration": 110,
        "start_time": "2021-11-16T10:48:25.775Z"
      },
      {
        "duration": 3,
        "start_time": "2021-11-16T10:50:18.720Z"
      },
      {
        "duration": 4,
        "start_time": "2021-11-16T10:50:37.649Z"
      },
      {
        "duration": 2,
        "start_time": "2021-11-16T10:50:51.884Z"
      },
      {
        "duration": 3,
        "start_time": "2021-11-16T10:51:56.237Z"
      },
      {
        "duration": 101,
        "start_time": "2021-11-16T10:53:13.791Z"
      },
      {
        "duration": 3,
        "start_time": "2021-11-16T10:55:59.186Z"
      },
      {
        "duration": 3,
        "start_time": "2021-11-16T10:56:10.751Z"
      },
      {
        "duration": 3,
        "start_time": "2021-11-16T10:56:49.038Z"
      },
      {
        "duration": 3,
        "start_time": "2021-11-16T10:56:49.174Z"
      },
      {
        "duration": 4,
        "start_time": "2021-11-16T10:56:49.414Z"
      },
      {
        "duration": 3,
        "start_time": "2021-11-16T10:56:49.680Z"
      },
      {
        "duration": 3,
        "start_time": "2021-11-16T10:56:50.370Z"
      },
      {
        "duration": 114,
        "start_time": "2021-11-16T10:59:34.518Z"
      },
      {
        "duration": 3,
        "start_time": "2021-11-16T11:01:41.201Z"
      },
      {
        "duration": 116,
        "start_time": "2021-11-16T11:01:48.754Z"
      },
      {
        "duration": 3,
        "start_time": "2021-11-16T11:02:16.685Z"
      },
      {
        "duration": 3,
        "start_time": "2021-11-16T11:02:19.479Z"
      },
      {
        "duration": 3,
        "start_time": "2021-11-16T11:02:47.067Z"
      },
      {
        "duration": 3,
        "start_time": "2021-11-16T11:02:49.353Z"
      },
      {
        "duration": 3,
        "start_time": "2021-11-16T11:03:07.835Z"
      },
      {
        "duration": 3,
        "start_time": "2021-11-16T11:03:07.953Z"
      },
      {
        "duration": 112,
        "start_time": "2021-11-16T11:07:52.072Z"
      },
      {
        "duration": 187,
        "start_time": "2021-11-16T11:09:23.468Z"
      },
      {
        "duration": 4,
        "start_time": "2021-11-16T11:10:01.455Z"
      },
      {
        "duration": 3,
        "start_time": "2021-11-16T11:10:05.069Z"
      },
      {
        "duration": 4,
        "start_time": "2021-11-16T11:10:13.376Z"
      },
      {
        "duration": 3,
        "start_time": "2021-11-16T11:10:14.434Z"
      },
      {
        "duration": 3,
        "start_time": "2021-11-16T11:10:22.853Z"
      },
      {
        "duration": 4,
        "start_time": "2021-11-16T11:27:29.279Z"
      },
      {
        "duration": 4,
        "start_time": "2021-11-16T11:29:08.919Z"
      },
      {
        "duration": 118,
        "start_time": "2021-11-16T11:29:46.703Z"
      },
      {
        "duration": 437,
        "start_time": "2021-11-16T11:36:02.181Z"
      },
      {
        "duration": 157,
        "start_time": "2021-11-16T11:36:14.388Z"
      },
      {
        "duration": 207,
        "start_time": "2021-11-16T11:47:15.898Z"
      },
      {
        "duration": 3,
        "start_time": "2021-11-16T11:53:52.092Z"
      },
      {
        "duration": 3,
        "start_time": "2021-11-16T11:53:52.236Z"
      },
      {
        "duration": 3,
        "start_time": "2021-11-16T11:59:12.005Z"
      },
      {
        "duration": 112,
        "start_time": "2021-11-16T12:00:33.446Z"
      },
      {
        "duration": 3,
        "start_time": "2021-11-16T12:02:14.453Z"
      },
      {
        "duration": 3,
        "start_time": "2021-11-16T12:02:39.512Z"
      },
      {
        "duration": 106,
        "start_time": "2021-11-16T12:03:03.460Z"
      },
      {
        "duration": 3,
        "start_time": "2021-11-17T20:37:21.139Z"
      },
      {
        "duration": 3,
        "start_time": "2021-11-17T20:37:22.229Z"
      },
      {
        "duration": 3,
        "start_time": "2021-11-17T20:38:38.806Z"
      },
      {
        "duration": 3,
        "start_time": "2021-11-17T20:38:41.958Z"
      },
      {
        "duration": 3,
        "start_time": "2021-11-17T20:43:46.551Z"
      },
      {
        "duration": 4,
        "start_time": "2021-11-17T20:58:21.835Z"
      },
      {
        "duration": 3,
        "start_time": "2021-11-17T20:59:21.872Z"
      },
      {
        "duration": 4,
        "start_time": "2021-11-17T20:59:45.352Z"
      },
      {
        "duration": 4,
        "start_time": "2021-11-17T20:59:49.646Z"
      },
      {
        "duration": 159,
        "start_time": "2021-11-17T21:02:26.949Z"
      },
      {
        "duration": 3,
        "start_time": "2021-11-17T21:03:53.461Z"
      },
      {
        "duration": 3,
        "start_time": "2021-11-17T21:03:53.694Z"
      },
      {
        "duration": 3,
        "start_time": "2021-11-17T21:05:28.145Z"
      },
      {
        "duration": 116,
        "start_time": "2021-11-17T21:05:57.787Z"
      },
      {
        "duration": 3,
        "start_time": "2021-11-17T21:06:37.993Z"
      },
      {
        "duration": 3,
        "start_time": "2021-11-17T21:06:38.261Z"
      },
      {
        "duration": 3,
        "start_time": "2021-11-17T21:11:54.358Z"
      },
      {
        "duration": 3,
        "start_time": "2021-11-17T21:12:43.846Z"
      },
      {
        "duration": 4,
        "start_time": "2021-11-17T21:13:08.773Z"
      },
      {
        "duration": 3,
        "start_time": "2021-11-17T21:14:44.441Z"
      },
      {
        "duration": 3,
        "start_time": "2021-11-17T21:15:42.059Z"
      },
      {
        "duration": 4,
        "start_time": "2021-11-17T21:15:51.995Z"
      },
      {
        "duration": 3,
        "start_time": "2021-11-17T21:15:53.923Z"
      },
      {
        "duration": 3,
        "start_time": "2021-11-17T21:15:55.282Z"
      },
      {
        "duration": 3,
        "start_time": "2021-11-17T21:16:28.492Z"
      },
      {
        "duration": 3,
        "start_time": "2021-11-17T21:16:32.603Z"
      },
      {
        "duration": 3,
        "start_time": "2021-11-17T21:17:06.941Z"
      },
      {
        "duration": 98,
        "start_time": "2021-11-17T21:18:05.733Z"
      },
      {
        "duration": 4,
        "start_time": "2021-11-17T21:21:35.255Z"
      },
      {
        "duration": 3,
        "start_time": "2021-11-17T21:21:37.804Z"
      },
      {
        "duration": 4,
        "start_time": "2021-11-17T21:23:06.071Z"
      },
      {
        "duration": 3,
        "start_time": "2021-11-17T21:23:24.799Z"
      },
      {
        "duration": 3,
        "start_time": "2021-11-17T21:23:32.591Z"
      },
      {
        "duration": 98,
        "start_time": "2021-11-17T21:28:31.559Z"
      },
      {
        "duration": 3,
        "start_time": "2021-11-17T21:28:45.448Z"
      },
      {
        "duration": 3,
        "start_time": "2021-11-17T21:29:17.303Z"
      },
      {
        "duration": 3,
        "start_time": "2021-11-17T21:29:29.617Z"
      },
      {
        "duration": 3,
        "start_time": "2021-11-17T21:29:32.681Z"
      },
      {
        "duration": 3,
        "start_time": "2021-11-17T21:36:11.474Z"
      },
      {
        "duration": 3,
        "start_time": "2021-11-17T21:36:14.791Z"
      },
      {
        "duration": 3,
        "start_time": "2021-11-17T21:36:53.943Z"
      },
      {
        "duration": 3,
        "start_time": "2021-11-17T21:36:56.165Z"
      },
      {
        "duration": 4,
        "start_time": "2021-11-17T21:37:16.590Z"
      },
      {
        "duration": 3,
        "start_time": "2021-11-17T21:37:22.702Z"
      },
      {
        "duration": 4,
        "start_time": "2021-11-17T21:38:03.479Z"
      },
      {
        "duration": 3,
        "start_time": "2021-11-17T21:38:08.601Z"
      },
      {
        "duration": 3,
        "start_time": "2021-11-17T21:38:12.928Z"
      },
      {
        "duration": 3,
        "start_time": "2021-11-17T21:38:48.896Z"
      },
      {
        "duration": 2,
        "start_time": "2021-11-17T21:38:49.171Z"
      },
      {
        "duration": 4,
        "start_time": "2021-11-17T21:39:57.889Z"
      },
      {
        "duration": 3,
        "start_time": "2021-11-17T21:39:58.057Z"
      },
      {
        "duration": 3,
        "start_time": "2021-11-17T21:41:20.108Z"
      },
      {
        "duration": 3,
        "start_time": "2021-11-17T21:41:20.629Z"
      },
      {
        "duration": 3,
        "start_time": "2021-11-17T21:42:49.136Z"
      },
      {
        "duration": 3,
        "start_time": "2021-11-17T21:43:15.137Z"
      },
      {
        "duration": 4,
        "start_time": "2021-11-17T21:43:16.766Z"
      },
      {
        "duration": 4,
        "start_time": "2021-11-17T21:43:31.711Z"
      },
      {
        "duration": 3,
        "start_time": "2021-11-17T21:43:36.312Z"
      },
      {
        "duration": 4,
        "start_time": "2021-11-17T21:45:08.825Z"
      },
      {
        "duration": 4,
        "start_time": "2021-11-17T21:45:10.119Z"
      },
      {
        "duration": 4,
        "start_time": "2021-11-17T21:45:13.748Z"
      },
      {
        "duration": 3,
        "start_time": "2021-11-17T21:45:22.219Z"
      },
      {
        "duration": 3,
        "start_time": "2021-11-17T21:45:33.412Z"
      },
      {
        "duration": 2,
        "start_time": "2021-11-17T21:46:01.885Z"
      },
      {
        "duration": 3,
        "start_time": "2021-11-17T21:46:03.628Z"
      },
      {
        "duration": 107,
        "start_time": "2021-11-17T21:47:32.512Z"
      },
      {
        "duration": 103,
        "start_time": "2021-11-17T21:50:36.243Z"
      },
      {
        "duration": 3,
        "start_time": "2021-11-18T06:28:31.440Z"
      },
      {
        "duration": 3,
        "start_time": "2021-11-18T06:29:00.168Z"
      },
      {
        "duration": 3,
        "start_time": "2021-11-18T06:31:27.008Z"
      },
      {
        "duration": 2,
        "start_time": "2021-11-18T06:35:34.288Z"
      },
      {
        "duration": 2,
        "start_time": "2021-11-18T06:38:04.527Z"
      }
    ],
    "colab": {
      "provenance": []
    },
    "kernelspec": {
      "display_name": "Python 3",
      "language": "python",
      "name": "python3"
    },
    "language_info": {
      "codemirror_mode": {
        "name": "ipython",
        "version": 3
      },
      "file_extension": ".py",
      "mimetype": "text/x-python",
      "name": "python",
      "nbconvert_exporter": "python",
      "pygments_lexer": "ipython3",
      "version": "3.12.5"
    },
    "toc": {
      "base_numbering": 1,
      "nav_menu": {},
      "number_sections": true,
      "sideBar": true,
      "skip_h1_title": false,
      "title_cell": "Table of Contents",
      "title_sidebar": "Contents",
      "toc_cell": false,
      "toc_position": {},
      "toc_section_display": true,
      "toc_window_display": true
    }
  },
  "nbformat": 4,
  "nbformat_minor": 1
}


=== DIRETÓRIO: Sprints\sprint 4\tables ===


=== DIRETÓRIO: Sprints\sprint 6 ===

--- ARQUIVO: Sprints\sprint 6\Analysis.ipynb (sem output) ---
{
  "cells": [
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        "# Análise de Dados de Videogames"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {},
      "outputs": [],
      "source": [
        "import pandas as pd, numpy as np, matplotlib.pyplot as plt\n",
        "import seaborn as sns\n",
        "from scipy import stats as st\n",
        "df = pd.read_csv('data/games.csv')"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {},
      "outputs": [],
      "source": [
        "df.head()"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        "### Padronizar os nomes das colunas para minúsculas e substituir espaços por underscores."
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {},
      "outputs": [],
      "source": [
        "new_col_names = [old_name.strip().lower().replace(' ', '_') for old_name in df.columns]\n",
        "df.columns = new_col_names\n",
        "df.columns"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        "### Descrição das colunas\n",
        "—Name (nome)\n",
        "\n",
        "—Platform (plataforma)\n",
        "\n",
        "—Year_of_Release (Ano de lançamento)\n",
        "\n",
        "—Genre (gênero)\n",
        "\n",
        "—NA_sales (vendas norte-americanas em milhões de USD)\n",
        "\n",
        "—EU_sales (vendas na Europa em milhões de USD)\n",
        "\n",
        "—JP_sales (vendas no Japão em milhões de USD)\n",
        "\n",
        "—Other_sales (vendas em outros países em em milhões de USD)\n",
        "\n",
        "—Critic_Score (Pontuação crítica) (máximo de 100)\n",
        "\n",
        "—User_Score (Pontuação do usuário) (máximo de 10)\n",
        "\n",
        "—Classificação (ESRB)"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        "### Problemas\n",
        "colunas que tem que mudar o tipo: year_of_release , critic_score , user_score"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {},
      "outputs": [],
      "source": [
        "df.describe()"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {},
      "outputs": [],
      "source": [
        "df['critic_score'].unique()"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {},
      "outputs": [],
      "source": [
        "# Convertendo 'year_of_release' para inteiro, preenchendo NaN com 0 antes da conversão\n",
        "df['year_of_release'] = df['year_of_release'].fillna(0).astype(int)\n",
        "\n",
        "# Convertendo 'critic_score' para inteiro, preenchendo NaN com 0 antes da conversão\n",
        "df['critic_score'] = df['critic_score'].fillna(0).astype(int)\n",
        "\n",
        "# Convertendo 'user_score' para numérico, tratando erros e convertendo 'tbd' para NaN\n",
        "df['user_score'] = pd.to_numeric(df['user_score'], errors='coerce')\n",
        "\n",
        "# Exibindo informações sobre os tipos de dados após as conversões\n",
        "df.info()"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        "### Explicação das alterações de tipo de dados:\n",
        "\n",
        "- year_of_release: Convertido para int para facilitar análises numéricas e temporais. Valores ausentes foram preenchidos com 0 para indicar falta de informação de ano. A conversão para inteiro é essencial para operações de agrupamento por ano e visualizações temporais.\n",
        "\n",
        "- critic_score: Convertido para int para análise numérica. Valores ausentes foram preenchidos com 0, similar ao ano de lançamento, indicando ausência de avaliação crítica. A conversão para inteiro permite calcular estatísticas descritivas e analisar a distribuição das pontuações.\n",
        "\n",
        "- user_score: Convertido para float64 usando pd.to_numeric com errors='coerce'. Isso transforma valores não numéricos, como 'tbd' (To Be Determined), em NaN (Not a Number), representando valores ausentes de forma padrão para análise numérica. NaN é crucial para que funções estatísticas do pandas ignorem corretamente os valores ausentes.\n",
        "\n",
        "### Possíveis razões para valores ausentes:\n",
        "\n",
        "- Dados Históricos e Coleta Incompleta: Para jogos mais antigos, especialmente com year_of_release faltante, é possível que os registros de lançamento originais não fossem sistemáticos ou que a coleta de dados retrospectiva seja incompleta. A ausência de critic_score e user_score pode ser mais comum em jogos menos populares ou de nicho, que podem não ter recebido atenção da crítica ou da base de usuários em massa.\n",
        "\n",
        "- Erros de Registro e Entrada de Dados: Erros humanos durante a entrada de dados ou problemas técnicos nos sistemas de registro podem levar à falta de informação em algumas entradas.\n",
        "'TBD' em user_score: A presença de 'tbd' (To Be Determined) indica que, no momento da coleta dos dados, a pontuação do usuário ainda não estava disponível, comum para jogos recém-lançados ou menos populares.\n",
        "\n",
        "- Não Aplicável: Em alguns casos, a métrica pode simplesmente não ser aplicável. Jogos obscuros podem nunca ter sido avaliados por críticos, resultando em critic_score ausente.\n",
        "\n",
        "### Tratamento de 'TBD':\n",
        "- A abreviação 'TBD' em user_score foi tratada como um valor ausente, convertendo-se em NaN através de pd.to_numeric(errors='coerce'). Essa abordagem é justificada porque 'TBD' indica que a pontuação do usuário é indeterminada ou não divulgada, o que equivale a um valor ausente para análise quantitativa"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {},
      "outputs": [],
      "source": [
        "df['total_sales'] = (df['na_sales'] + df['eu_sales'] + df['other_sales']).round(2)\n",
        "df"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {},
      "outputs": [],
      "source": [
        "print(f'Tamanho do DataFrame ANTES remover jogos com ano ou vendas ausentes: {df.shape}')\n",
        "# Removendo jogos com ano de lançamento igual a 0 (indicando ano desconhecido ou ausente)\n",
        "df = df[df['year_of_release'] != 0]\n",
        "\n",
        "# Removendo jogos com vendas totais iguais a 0 (indicando que não tiveram vendas registradas nas regiões consideradas)\n",
        "df = df[df['total_sales'] > 0]\n",
        "\n",
        "# Exibindo o tamanho do DataFrame após a limpeza\n",
        "print(f'Tamanho do DataFrame APÓS remover jogos com ano ou vendas ausentes: {df.shape}')"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {},
      "outputs": [],
      "source": [
        "# Contando o número de jogos lançados por ano e ordenando por ano\n",
        "games_per_year = df['year_of_release'].value_counts().sort_index()\n",
        "\n",
        "# Plotando um gráfico de barras para visualizar a quantidade de jogos lançados por ano\n",
        "plt.figure(figsize=(12,6))\n",
        "games_per_year.plot(kind='bar', color='skyblue')\n",
        "plt.title('Jogos Lançados por Ano')\n",
        "plt.xlabel('Ano')\n",
        "plt.ylabel('Quantidade de Jogos')\n",
        "plt.show()"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        "### Análise da quantidade de jogos lançados por ano:\n",
        "\n",
        "\n",
        "\n",
        "O gráfico e os dados revelam um aumento no lançamento de jogos a partir dos anos 90, com um pico em meados dos anos 2000 (2008-2011), seguido por um declínio até 2016.\n",
        "\n",
        "\n",
        "Significância dos dados por período:\n",
        "\n",
        "    - Dados Pré-1990: Volume baixo de lançamentos, mercado de videogames menor e menos estabelecido. Dados menos representativos do mercado atual.\n",
        "\n",
        "    - Dados 1990-2016: Período de expansão da indústria. Dados significativos para entender tendências, ciclo de vida das plataformas e preferências dos consumidores.\n",
        "\n",
        "    - Declínio Recente (Pós-2011): Pode indicar mudança no mercado, foco em jogos de maior orçamento, aumento de jogos digitais, ou consolidação da indústria. Relevante para projetar tendências para 2017.\n",
        "Em resumo, dados a partir dos anos 90 são mais relevantes para previsões de mercado, enquanto dados anteriores contextualizam a evolução da indústria"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {},
      "outputs": [],
      "source": [
        "df['platform'].unique()\n"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        "|Código|Nome Completo|Ano de Lançamento|\n",
        "|---|---|---|\n",
        "|**Wii**|Nintendo Wii|2006|\n",
        "|**NES**|Nintendo Entertainment System|1983 (JP), 1985 (EUA)|\n",
        "|**GB**|Game Boy|1989|\n",
        "|**DS**|Nintendo DS|2004|\n",
        "|**X360**|Xbox 360|2005|\n",
        "|**PS3**|PlayStation 3|2006|\n",
        "|**PS2**|PlayStation 2|2000|\n",
        "|**SNES**|Super Nintendo Entertainment System|1990 (JP), 1991 (EUA)|\n",
        "|**GBA**|Game Boy Advance|2001|\n",
        "|**PS4**|PlayStation 4|2013|\n",
        "|**3DS**|Nintendo 3DS|2011|\n",
        "|**N64**|Nintendo 64|1996|\n",
        "|**PS**|PlayStation (PS1)|1994|\n",
        "|**XB**|Xbox|2001|\n",
        "|**PC**|Personal Computer (PC)|- (Varia conforme hardware)|\n",
        "|**2600**|Atari 2600|1977|\n",
        "|**PSP**|PlayStation Portable|2004|\n",
        "|**XOne**|Xbox One|2013|\n",
        "|**WiiU**|Nintendo Wii U|2012|\n",
        "|**GC**|Nintendo GameCube|2001|\n",
        "|**GEN**|Sega Genesis (Mega Drive)|1988 (JP), 1989 (EUA)|\n",
        "|**DC**|Sega Dreamcast|1998 (JP), 1999 (EUA)|\n",
        "|**PSV**|PlayStation Vita|2011|\n",
        "|**SAT**|Sega Saturn|1994 (JP), 1995 (EUA)|\n",
        "|**SCD**|Sega CD (Mega-CD)|1991 (JP), 1992 (EUA)|\n",
        "|**WS**|WonderSwan|1999|\n",
        "|**NG**|Neo Geo|1990|\n",
        "|**TG16**|TurboGrafx-16 (PC Engine)|1987 (JP), 1989 (EUA)|\n",
        "|**3DO**|3DO Interactive Multiplayer|1993|\n",
        "|**GG**|Sega Game Gear|1990|\n",
        "|**PCFX**|NEC PC-FX|1994|"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {},
      "outputs": [],
      "source": [
        "contagem_por_plataforma = df['platform'].value_counts()\n",
        "contagem_por_plataforma.head(10)"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {},
      "outputs": [],
      "source": [
        "# Plataformas desejadas\n",
        "platforms = ['PS2', 'DS', 'PS3', 'N64']\n",
        "\n",
        "# Filtrar e agrupar os dados para as plataformas selecionadas\n",
        "df_grouped = df[df['platform'].isin(platforms)].groupby(['year_of_release', 'platform'])['total_sales'].sum().unstack()\n",
        "\n",
        "# Calcular a soma total de vendas por ano (todas as plataformas)\n",
        "total_por_ano = df.groupby('year_of_release')['total_sales'].sum()  # <--- Nova linha\n",
        "\n",
        "# Criar o gráfico de linhas\n",
        "ax = df_grouped.plot(kind='line', figsize=(12, 6), linewidth=2)\n",
        "\n",
        "# Adicionar a linha do total ao gráfico\n",
        "total_por_ano.plot(ax=ax, color='black', linewidth=2, linestyle='--', label='Total')  # <--- Nova linha\n",
        "\n",
        "# Personalizar o gráfico\n",
        "plt.title(\"Vendas Totais por Ano para Plataformas Selecionadas\")\n",
        "plt.xlabel(\"Ano de Lançamento\")\n",
        "plt.ylabel(\"Vendas Totais (milhões de USD)\")\n",
        "plt.legend(title=\"Plataforma\")\n",
        "plt.xticks(total_por_ano.index, rotation=45)  # Garante todos os anos no eixo x\n",
        "plt.tight_layout()\n",
        "plt.grid()\n",
        "# Exibir o gráfico\n",
        "plt.show()"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        "### Analize\n",
        "No grafico demostro o crescrimento de varias plataformas, onde quando uma decrece outra cresce e ainda mostrando o total do mercado, mostrando que entre 2000 até 2007 ouve um crescimento muito grande. Demora mais ou menos 10 anos para o hipe de uma plataforma ir em bora."
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {},
      "outputs": [],
      "source": [
        "# Agrupando as vendas totais por plataforma e ordenando em ordem decrescente\n",
        "platform_sales = df.groupby('platform')['total_sales'].sum().sort_values(ascending=False)\n",
        "top_platforms = platform_sales.head(10) # Selecionando as 10 plataformas com maiores vendas\n",
        "print(\"Top 10 plataformas por vendas totais:\\n\", top_platforms)\n",
        "\n",
        "# Criando um DataFrame para as top plataformas para análise temporal\n",
        "top_platform_df = df[df['platform'].isin(top_platforms.index)]\n",
        "\n",
        "# Criando distribuições de vendas por ano para cada plataforma principal\n",
        "plt.figure(figsize=(15, 10))\n",
        "for platform in top_platforms.index:\n",
        "    platform_data = top_platform_df[top_platform_df['platform'] == platform]\n",
        "    sns.histplot(platform_data['year_of_release'], kde=False, label=platform)\n",
        "\n",
        "plt.title('Distribuição de Vendas por Ano para Top Plataformas')\n",
        "plt.xlabel('Ano de Lançamento')\n",
        "plt.ylabel('Número de Jogos Lançados') # <--- Nova linha\n",
        "plt.xticks(total_por_ano.index, rotation=45)\n",
        "plt.legend()\n",
        "plt.show()"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        "\n",
        "### **Análise da variação de vendas por plataforma e ciclo de vida:**\n",
        "\n",
        "- **Plataformas com Maiores Vendas Totais:** PS2, X360, PS3, Wii, DS, PS, PS4, GBA, PSP, 3DS lideram em vendas. Plataformas de consoles domésticos e portáteis de grande sucesso.\n",
        "    \n",
        "- **Distribuição de Vendas ao Longo do Tempo (Ciclo de Vida):**\n",
        "    \n",
        "    - Cada plataforma tem um ciclo de vida distinto de 7-10 anos. Pico de lançamentos concentrado em 5-7 anos, seguido de declínio. Ex: PS2, Wii, DS.\n",
        "        \n",
        "    - Plataformas recentes como PS4 e XOne (relevantes para o período recente) mostram ciclo de vida mais jovem (lançamentos em 2013-2016).\n",
        "        \n",
        "- **Plataformas Populares em Declínio:** PS2, PSP, DS, Wii, e PS3 mostram declínio acentuado ou ausência de lançamentos recentes (2015-2016), indicando fim de ciclo.\n",
        "    \n",
        "- **Tempo para Novas Plataformas Aparecerem e Antigas Desaparecerem:**\n",
        "    \n",
        "    - Vida 'útil' de plataforma: 7-10 anos. Novas plataformas surgem, substituindo as antigas.\n",
        "        \n",
        "    - Transição: Plataforma antiga ainda tem lançamentos enquanto a nova ganha momentum.\n",
        "        \n",
        "\n",
        "Em resumo, o mercado de consoles é dinâmico, com ciclos de vida de cerca de uma década. Plataformas antigas como PS2 e Wii estão em declínio. Para 2017, foco em plataformas recentes e em crescimento como PS4 e Xbox One."
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        "### **Determinar o período de dados relevantes para construir um modelo para 2017.**\n",
        "\n",
        "**Período de dados relevantes para previsão de 2017:**\n",
        "\n",
        "- Período mais relevante: **2013-2016**.\n",
        "    \n",
        "- **Justificativa:**\n",
        "    \n",
        "    - **Ciclo de Vida das Plataformas:** Plataformas dominantes pré-2013 (PS3, X360, Wii, DS, PS2) estavam em declínio em 2016. Plataformas em ascensão para 2017: PS4, Xbox One, Nintendo 3DS (mais madura).\n",
        "        \n",
        "    - **Declínio Geral do Mercado:** Queda nos lançamentos pós-2011. Dados recentes (2013-2016) refletem tendências de mercado atuais.\n",
        "        \n",
        "    - **Relevância para 2017:** Dados recentes refletem condições de mercado próximas a 2017. Dados antigos podem ser menos relevantes devido a mudanças tecnológicas e preferências.\n",
        "        \n",
        "\n",
        "**Decisão:** Focar nos dados de **2013-2016** para análises e previsões para 2017."
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {},
      "outputs": [],
      "source": [
        "# Filtrando o DataFrame para incluir apenas dados de 2013 em diante\n",
        "df_relevante = df[df['year_of_release'] >= 2013]\n",
        "\n",
        "# Exibindo o tamanho do DataFrame relevante e os anos abrangidos\n",
        "print(f'Tamanho do DataFrame relevante (2013-2016): {df_relevante.shape}')\n",
        "print(f\"Anos no DataFrame relevante: {df_relevante['year_of_release'].unique()}\")"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        "Desconsiderando dados anteriores."
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {},
      "outputs": [],
      "source": [
        "# Plataformas desejadas\n",
        "platforms = df_relevante.groupby('platform')['total_sales'].sum().sort_values(ascending=False).index.tolist()\n",
        "platforms_ = platforms[:5]\n",
        "\n",
        "# Filtrar e agrupar os dados para as plataformas selecionadas\n",
        "df_grouped = df_relevante[df_relevante['platform'].isin(platforms_)].groupby(['year_of_release', 'platform'])['total_sales'].sum().unstack()\n",
        "\n",
        "# Calcular a soma total de vendas por ano (todas as plataformas)\n",
        "total_por_ano = df_relevante.groupby('year_of_release')['total_sales'].sum()  # <--- Nova linha\n",
        "\n",
        "# Criar o gráfico de linhas\n",
        "ax = df_grouped.plot(kind='line', figsize=(6, 6), linewidth=2)\n",
        "\n",
        "# Adicionar a linha do total ao gráfico\n",
        "total_por_ano.plot(ax=ax, color='black', linewidth=2, linestyle='--', label='Total')  # <--- Nova linha\n",
        "\n",
        "# Personalizar o gráfico\n",
        "plt.title(\"Vendas Totais por Ano para Plataformas Selecionadas\")\n",
        "plt.xlabel(\"Ano de Lançamento\")\n",
        "plt.ylabel(\"Vendas Totais (milhões de USD)\")\n",
        "plt.legend(title=\"Plataforma\")\n",
        "plt.xticks(total_por_ano.index)  # Garante todos os anos no eixo x\n",
        "plt.tight_layout()\n",
        "plt.grid()\n",
        "# Exibir o gráfico\n",
        "plt.show()"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        "### **Análise das plataformas líderes, crescimento e declínio (2013-2016):**\n",
        "\n",
        "- **Plataformas Líderes em Vendas (2013-2016):** PS4, PS3, XOne, X360, 3DS.\n",
        "    \n",
        "- **Tendências de Crescimento e Declínio:**\n",
        "    \n",
        "    - **PS4 e XOne:** Forte crescimento (2013-2015), PS4 estável em 2016, XOne leve declínio em 2016. Plataformas em ascensão.\n",
        "        \n",
        "    - **PS3 e X360:** Declínio claro (2013-2016). Fim de ciclo.\n",
        "        \n",
        "    - **3DS:** Declínio gradual (2013-2016). Tendência de queda.\n",
        "        \n",
        "- **Plataformas Potencialmente Lucrativas para 2017:**\n",
        "    \n",
        "    - **PS4 e XOne:** Mais lucrativas e com maior potencial de crescimento para 2017. PS4 lidera.\n",
        "        \n",
        "    - **Nintendo 3DS:** Volume de vendas considerável, especialmente no Japão. Potencialmente lucrativa para público específico.\n",
        "        \n",
        "    - **PC:** Mercado estável e diversificado. Lucrativa para gêneros específicos e público.\n",
        "        \n",
        "    - **WiiU e PSVita:** Nichos de mercado, mas sem grande crescimento. Foco principal em plataformas de maior crescimento."
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {},
      "outputs": [],
      "source": [
        "lista_plataformas = df_relevante['platform'].unique()\n",
        "lista_plataformas\n",
        "platforms_b = platforms[:6]"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {},
      "outputs": [],
      "source": [
        "plt.figure(figsize=(10,6))\n",
        "sns.boxplot(\n",
        "    y='platform',\n",
        "    x='total_sales',\n",
        "    data=df_relevante,\n",
        "    order=platforms_b ,\n",
        "    orient='h'\n",
        ")\n",
        "plt.xlim(0, df_relevante['total_sales'].max() * 0.2)\n",
        "df_relevante.groupby('platform')['total_sales'].mean().reset_index().sort_values(by='total_sales', ascending=False)"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        "### **Análise dos Boxplots de Vendas Globais por Plataforma:**\n",
        "\n",
        "- **Dispersão e Outliers:** Grande dispersão nas vendas para todas as plataformas, com muitos outliers (jogos 'hit'). A maioria dos jogos vende pouco.\n",
        "    \n",
        "- **Medianas:** Medianas baixas para todas as plataformas (abaixo de 0.5 milhões USD). Maioria dos jogos não são grandes sucessos comerciais.\n",
        "    \n",
        "- **Comparação entre Plataformas (Significância das Diferenças):**\n",
        "    \n",
        "    - PS4 e XOne parecem ter medianas e 'caixas' (IQR) ligeiramente mais altas que PS3 e X360. Vendas geralmente melhores para a nova geração.\n",
        "        \n",
        "    - Caixas se sobrepõem, alta variabilidade dentro de cada plataforma. Diferenças visíveis e nas médias, mas podem não ser estatisticamente significativas na distribuição geral de vendas.\n",
        "        \n",
        "- **Vendas Médias:** PS4 e XOne têm as maiores vendas médias, seguidas por 3DS, PS3 e X360. WiiU com a menor média.\n",
        "    \n",
        "\n",
        "**Conclusão:** Diferenças nas vendas médias entre plataformas, mas alta variabilidade e sobreposição sugerem que **plataforma não é o único determinante do sucesso.** Outros fatores (gênero, qualidade, marketing) cruciais. Plataforma influencia o potencial de vendas, não garante sucesso individual."
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {},
      "outputs": [],
      "source": [
        "plt.figure(figsize=(8, 6))\n",
        "df_n_nulo = df[(df['critic_score'] > 60) & (df['platform'] == 'PS4')].dropna()\n",
        "sns.scatterplot(x=df_n_nulo['total_sales'] , y=df_n_nulo['critic_score'])"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {},
      "outputs": [],
      "source": [
        "correlacao = np.corrcoef(x=df_relevante['total_sales'][df_relevante['platform']== 'PS4'], y=df_relevante['critic_score'][df_relevante['platform']== 'PS4'])\n",
        "correlacao[1, 0]"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        "### Análise gráfico de disperção.\n",
        "- **Correlação existente, porém fraca:**  \n",
        "    Há uma relação tênue entre avaliação crítica e valor comercial dos jogos.\n",
        "    \n",
        "- **Críticas negativas como limitador:**  \n",
        "    Nenhum jogo com avaliações ruins alcançou alto valor de mercado.\n",
        "    \n",
        "- **Críticas positivas ≠ sucesso garantido:**  \n",
        "    Muitos títulos bem avaliados tiveram desempenho comercial modesto.\n",
        "    \n",
        "- **Conclusão implícita:**  \n",
        "    A recepção crítica desfavorável impede o sucesso, mas a positiva não assegura valorização elevada."
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {},
      "outputs": [],
      "source": [
        "correlations = {}\n",
        "df_d = df_relevante\n",
        "# Calcular a correlação para cada plataforma única\n",
        "for platform in df_d['platform'].unique():\n",
        "    subset = df_d[df_d['platform'] == platform]  # Filtrar por plataforma\n",
        "    if len(subset) > 1:  # Precisa de pelo menos 2 valores para calcular correlação\n",
        "        corr = np.corrcoef(subset['total_sales'], subset['critic_score'])[0, 1]\n",
        "        correlations[platform] = corr\n",
        "    else:\n",
        "        correlations[platform] = np.nan  # Correlação não pode ser calculada com um único ponto\n",
        "\n",
        "# Criar DataFrame com os resultados\n",
        "df_corr = pd.DataFrame.from_dict(correlations, orient='index', columns=['correlation'])\n",
        "df_corr.index.name = 'platform'\n",
        "\n",
        "# Exibir o resultado\n",
        "df_corr"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        "todas as plataformas tem uma correlação muito fraca."
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {},
      "outputs": [],
      "source": [
        "df['genre'].unique()"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {},
      "outputs": [],
      "source": [
        "# Plataformas desejadas\n",
        "platforms = df_relevante.groupby('genre')['total_sales'].sum().sort_values(ascending=False).index.tolist()\n",
        "platforms\n",
        "# Filtrar e agrupar os dados para as plataformas selecionadas\n",
        "df_grouped = df_relevante[df_relevante['genre'].isin(platforms[:])].groupby(['year_of_release', 'genre'])['total_sales'].sum().unstack()\n",
        "\n",
        "\n",
        "df_grouped.sum().sort_values(ascending=False).to_frame()"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        "## Generos\n",
        "| Gênero          | Tradução           | Explicação                                                                 |\n",
        "|-----------------|--------------------|----------------------------------------------------------------------------|\n",
        "| Action          | Ação               | Jogos focados em combate rápido, movimentos ágeis e desafios de reflexo    |\n",
        "| Shooter         | Tiro               | Jogos onde o objetivo principal é atirar (1ª ou 3ª pessoa)                 |\n",
        "| Sports          | Esportes           | Simulações de esportes reais como futebol, basquete, etc.                 |\n",
        "| Role-Playing    | RPG                | Jogos com narrativa forte, desenvolvimento de personagem e progressão      |\n",
        "| Misc            | Diversos           | Categoria para jogos que não se encaixam em outros gêneros específicos     |\n",
        "| Platform        | Plataforma         | Jogos com foco em saltar entre plataformas e superar obstáculos            |\n",
        "| Racing          | Corrida            | Jogos de competição com veículos (carros, motos, etc.)                     |\n",
        "| Fighting        | Luta               | Jogos de combate 1vs1 com personagens e golpes especiais                   |\n",
        "| Adventure       | Aventura           | Jogos com ênfase em exploração, quebra-cabeças e narrativa                 |\n",
        "| Simulation      | Simulação          | Jogos que imitam atividades da vida real ou sistemas complexos             |\n",
        "| Strategy        | Estratégia         | Jogos que exigem planejamento, gestão de recursos e táticas                |\n",
        "| Puzzle          | Quebra-cabeça      | Jogos baseados em desafios lógicos e resolução de enigmas                  |\n",
        "### vendas por genero\n",
        "\n",
        "Os generos que mais venderam entre o periodo foram: ação, tiro, esportes\n",
        "Tambem são os mais ativos que exigem reação rapida.\n",
        "\n",
        "Os que menos venderam foram: Quebra-cabeça, Estratégia, simulação.\n",
        "Também são os mais tranquilos, que não precisa de uma reação rapida. "
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {},
      "outputs": [],
      "source": [
        "def head_vendas(pais, x, y,): \n",
        "    \"\"\"Função para encontrar e exibir as 5 plataformas/gêneros/ratings principais por região.\n",
        "    Args:\n",
        "        df (DataFrame): DataFrame contendo os dados de jogos.\n",
        "        coluna_vendas (str): Nome da coluna de vendas da região (ex: 'na_sales').\n",
        "        regiao_nome (str): Nome da região para exibição (ex: 'América do Norte').\n",
        "    \"\"\"\n",
        "    df_grouped = df_relevante.groupby(x)[y].sum().sort_values(ascending=False)\n",
        "    top_5 = df_grouped.head()\n",
        "    \n",
        "    print(f'Top 5 {x} por vendas em {pais}:')\n",
        "    \n",
        "    for posicao, (plataforma, vendas) in enumerate(top_5.items(), 1):\n",
        "        print(f'{posicao}. {plataforma:<5} → {vendas:>8.2f} milhões')\n",
        "    print()\n",
        "\n",
        "# Exemplo de uso corrigindo o nome do país\n",
        "head_vendas('EUA', 'platform', 'na_sales')\n",
        "head_vendas('Europa', 'platform', 'eu_sales')\n",
        "head_vendas('Japão', 'platform', 'jp_sales')"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        "**EUA & Europa**\n",
        "\n",
        "- **Líderes:** PS4 domina (EUA: 108,7 mi / Europa: 141,1 mi).\n",
        "    \n",
        "- **Microsoft:** XOne tem força nos EUA (2º lugar), mas fraco na Europa (3º).\n",
        "    \n",
        "- **Legado:** PS3 e X360 ainda relevantes, especialmente nos EUA.\n",
        "    \n",
        "- **Nintendo:** 3DS em 5º, com vendas modestas.\n",
        "\n",
        "**Japão**\n",
        "\n",
        "- **Nintendo reina:** 3DS lidera (40,2 mi), sem Xbox no top 5.\n",
        "    \n",
        "- **Sony secundária:** PS3 e PS4 em 2º e 3º, mas vendas baixas.\n",
        "    \n",
        "- **Portáteis:** WiiU e PSV no top 5 refletem preferência por nichos.\n",
        "    \n",
        "\n",
        "**Contrastes Principais**\n",
        "\n",
        "1. **Ocidente:** _Home consoles_ (PS4/Xbox) + foco em tecnologia.\n",
        "    \n",
        "2. **Japão:** Portáteis (3DS) + marcas locais (Nintendo/Sony).\n",
        "    \n",
        "3. **Xbox:** Ausente no Japão; perde força na Europa.\n",
        "    \n",
        "\n",
        "**Insights**\n",
        "\n",
        "- **PS4 é global**, mas **3DS é fenômeno japonês** (vende mais lá que no Ocidente).\n",
        "    \n",
        "- **Microsoft precisa adaptar estratégias** (ex: Japão ignora Xbox).\n",
        "    \n",
        "- **Nintendo sobrevive por ecossistema único** (portáteis + family-friendly)."
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {},
      "outputs": [],
      "source": [
        "head_vendas('EUA','genre','na_sales')\n",
        "head_vendas('Eoropa','genre','eu_sales')\n",
        "head_vendas('Japão','genre','jp_sales')"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        "- **EUA & Europa:**\n",
        "    \n",
        "    - **Gêneros dominantes:** Action (1º) e Shooter (2º), com vendas altíssimas.\n",
        "        \n",
        "    - **Destaques:** Sports e RPG completam o top 4, mas com números menores.\n",
        "        \n",
        "    - **Diferença:** 5º lugar varia entre _Misc_ (EUA) e _Racing_ (Europa).\n",
        "        \n",
        "- **Japão:**\n",
        "    \n",
        "    - **Liderança absoluta de RPGs:** 32,15 mi (quase o dobro do 2º colocado, Action).\n",
        "        \n",
        "    - **Preferências únicas:** Fighting em 3º e Shooter em 4º, com vendas muito abaixo do Ocidente.\n",
        "        \n",
        "- **Contraste Cultural:**\n",
        "    \n",
        "    - **Ocidente:** Foco em ação rápida (Shooter, Sports) e competição.\n",
        "        \n",
        "    - **Japão:** Valoriza narrativa (RPGs) e nichos (Fighting).\n",
        "        \n",
        "- **Insights Chave:**\n",
        "    \n",
        "    - Shooter vende 16x mais nos EUA que no Japão.\n",
        "        \n",
        "    - RPG é o único gênero entre os top 3 em todas as regiões, mas é **dominante no Japão**.\n",
        "        \n",
        "    - Cultura local define sucesso: estratégias de lançamento devem ser adaptadas por região."
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {},
      "outputs": [],
      "source": [
        "df['rating'].unique()"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        "| Sigla  | Significado      | Descrição                                                                 |\n",
        "|--------|------------------|---------------------------------------------------------------------------|\n",
        "| E      | Everyone         | Conteúdo apropriado para todas as idades, sem material inapropriado.        |\n",
        "| nan    | Não disponível   | Informação de classificação ausente ou não especificada.                  |\n",
        "| M      | Mature           | Conteúdo destinado a adultos, com possibilidade de violência intensa, linguagem forte ou temas maduros. |\n",
        "| T      | Teen             | Apropriado para adolescentes (geralmente a partir dos 13 anos), com conteúdo moderado. |\n",
        "| E10+   | Everyone 10+     | Adequado para crianças a partir dos 10 anos, podendo conter temas um pouco mais complexos. |\n",
        "| K-A    | Kids to Adults   | Classificação antiga que indicava jogos apropriados para todas as idades.   |\n",
        "| AO     | Adults Only      | Exclusivo para adultos; pode incluir violência extrema ou conteúdo sexual explícito. |\n",
        "| EC     | Early Childhood  | Indicada para crianças muito pequenas, com conteúdos geralmente educativos. |\n",
        "| RP     | Rating Pending   | Classificação pendente, ou seja, o jogo ainda está aguardando a avaliação final. |\n"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {},
      "outputs": [],
      "source": [
        "head_vendas('EUA','rating','na_sales')\n",
        "head_vendas('Eoropa','rating','eu_sales')\n",
        "head_vendas('Japão','rating','jp_sales')"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        "### Impacto das Classificações ESRB nas Vendas Regionais:\n",
        "\n",
        "- Mercado Ocidental (NA/EU) vs. Japão: Diferença nas preferências de classificação. 'M' lidera em NA/EU, 'T' e 'E' no Japão."
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {},
      "outputs": [],
      "source": [
        "XOne = df[df['platform'] == 'XOne']\n",
        "PC = df[df['platform'] == 'PC']\n",
        "\n",
        "print(\"Hipóteses do teste:\")\n",
        "print(\"H0: A média de vendas totais dos jogos na plataforma XOne é igual à média de vendas totais dos jogos na plataforma PC.\")\n",
        "print(\"Ha: A média de vendas totais dos jogos na plataforma XOne é diferente da média de vendas totais dos jogos na plataforma PC.\\n\")\n",
        "\n",
        "print(f\"a media de XOne é: {XOne['total_sales'].mean():.2f} a media de PC é: {PC['total_sales'].mean():.2f}\")\n",
        "# Teste as hipóteses\n",
        "alpha = 0.05\n",
        "quantidade = min(len(XOne), len(PC))\n",
        "results = st.ttest_ind(\n",
        "    XOne['total_sales'].sample(n=quantidade), \n",
        "    PC['total_sales'].sample(n=quantidade))\n",
        "print(f'valor-p: {results.pvalue:.10f}')\n",
        "if (results.pvalue < alpha):\n",
        "    print(\"Rejeitamos a hipótese nula\")\n",
        "else:\n",
        "    print(\"Não podemos rejeitar a hipótese nula\")\n"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        "primeiro eu filtrei 2 tabelas com o conteudo (XOne, PC) e depois eu coloquei na formula do tteste, e com o p value eu testei se deveria aceitar ou regeitar a hipótese nula\n",
        "Eu descidi o alpha por um padrão comum de sifnificância. "
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {},
      "outputs": [],
      "source": [
        "Action = df[df['genre'] == 'Action']\n",
        "Sports = df[df['genre'] == 'Sports']\n",
        "# Impressão das hipóteses do teste\n",
        "print(\"Hipóteses do teste:\")\n",
        "print(\"H0: A média de vendas totais dos jogos do gênero Action é igual à média de vendas totais dos jogos do gênero Sports.\")\n",
        "print(\"Ha: A média de vendas totais dos jogos do gênero Action é diferente da média de vendas totais dos jogos do gênero Sports.\\n\")\n",
        "\n",
        "print(f\"a media de Action é: {Action['total_sales'].mean():.2f} a media de Sports é: {Sports['total_sales'].mean():.2f}\")\n",
        "# Teste as hipóteses\n",
        "quantidade = min(len(Action), len(Sports))\n",
        "results = st.ttest_ind(\n",
        "    Action['total_sales'].sample(n=quantidade), \n",
        "    Sports['total_sales'].sample(n=quantidade))\n",
        "print(f'valor-p: {results.pvalue:.10f}')\n",
        "if (results.pvalue < alpha):\n",
        "    print(\"Rejeitamos a hipótese nula\")\n",
        "else:\n",
        "    print(\"Não podemos rejeitar a hipótese nula\")"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        "primeiro eu filtrei 2 tabelas com o conteudo (Action, Sports) e depois eu coloquei na formula do tteste, e com o p value eu testei se deveria aceitar ou regeitar a hipótese nula\n",
        "Eu descidi o alpha por um padrão comum de sifnificância. "
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        "# **Conclusão Geral**\n",
        "\n",
        "## **Principais Descobertas da Análise de Dados de Videogames (2013-2016):**\n",
        "\n",
        "1. **Ciclo de Vida das Plataformas:** Plataformas de videogame têm ciclos de vida de aproximadamente 7-10 anos. Novas gerações de consoles substituem as antigas, com um período de transição. Plataformas como PS2, Wii e DS, apesar do sucesso passado, estão em declínio. Plataformas atuais líderes são PS4 e Xbox One.\n",
        "    \n",
        "2. **Plataformas Líderes para 2017:** PS4 e Xbox One são as plataformas mais lucrativas e com maior potencial para 2017. Nintendo 3DS ainda relevante no mercado portátil. PC é uma plataforma estável e diversificada.\n",
        "    \n",
        "3. **Vendas por Plataforma: Variabilidade e Médias:** Há diferenças nas vendas médias entre plataformas (PS4 e XOne com médias mais altas). No entanto, a variabilidade dentro de cada plataforma é alta, indicando que a plataforma não garante o sucesso de vendas. Outros fatores são cruciais.\n",
        "    \n",
        "4. **Influência das Avaliações:** Avaliações de crítica e usuários têm uma influência muito fraca nas vendas de jogos para PS4. Outros fatores como marca, gênero e marketing podem ser mais importantes.\n",
        "    \n",
        "5. **Variação de Vendas Multiplataforma:** As vendas do mesmo jogo variam consideravelmente entre plataformas, reforçando o impacto da plataforma no desempenho comercial.\n",
        "    \n",
        "6. **Gêneros Mais Lucrativos:** Action, Shooter e Sports são os gêneros mais lucrativos em vendas totais (2013-2016). Gêneros de nicho como Strategy e Puzzle têm vendas menores, mas podem ser relevantes para públicos específicos.\n",
        "    \n",
        "7. **Perfis Regionais de Usuários:**\n",
        "    \n",
        "    - **América do Norte:** Preferência por Xbox, gêneros Action, Shooter, Sports, classificação 'M'.\n",
        "        \n",
        "    - **Europa:** Preferência por PlayStation, gêneros Action, Shooter, Sports, classificação 'M'.\n",
        "        \n",
        "    - **Japão:** Forte preferência por Nintendo (portátil 3DS), gênero Role-Playing dominante, classificações 'T' e 'E' mais populares.\n",
        "        \n",
        "8. **Testes de Hipóteses:**\n",
        "    \n",
        "    - **Plataformas (Xbox One vs. PC):** Não há evidência estatística suficiente para afirmar que as avaliações médias de usuários são diferentes entre Xbox One e PC.\n",
        "        \n",
        "    - **Gêneros (Action vs. Sports):** Não há evidência estatística suficiente para afirmar que as avaliações médias de usuários são diferentes entre gêneros Action e Sports."
      ]
    }
  ],
  "metadata": {
    "kernelspec": {
      "display_name": "Python 3",
      "language": "python",
      "name": "python3"
    },
    "language_info": {
      "codemirror_mode": {
        "name": "ipython",
        "version": 3
      },
      "file_extension": ".py",
      "mimetype": "text/x-python",
      "name": "python",
      "nbconvert_exporter": "python",
      "pygments_lexer": "ipython3",
      "version": "3.12.5"
    }
  },
  "nbformat": 4,
  "nbformat_minor": 2
}

--- ARQUIVO: Sprints\sprint 6\Analysis_0.1.ipynb (sem output) ---
{
  "cells": [
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        "<div>\n",
        "Olá, Jonathas!\n",
        "\n",
        "Meu nome é Luiz. Fico feliz em revisar seu projeto. Ao longo do texto farei algumas observações sobre melhorias no código e também farei comentários sobre suas percepções sobre o assunto. Estarei aberto a feedbacks e discussões sobre o tema.\n",
        "\n",
        "**Peço que mantenha e não altere os comentários que eu fizer por aqui para que possamos nos localizar posteriormente, ok?**\n",
        "\n",
        "Mais uma coisa, vamos utilizar um código de cores para você entender o meu feedback no seu notebook. Funciona assim:\n",
        "\n",
        "<div class=\"alert alert-block alert-success\">\n",
        "<b> Comentário do revisor: </b> <a class=\"tocSkip\"></a>\n",
        "\n",
        "Sucesso. Tudo foi feito corretamente.\n",
        "</div>\n",
        "\n",
        "<div class=\"alert alert-block alert-warning\">\n",
        "<b>Comentário do revisor: </b> <a class=\"tocSkip\"></a>\n",
        "\n",
        "Alerta não crítico, mas que pode ser corrigido para melhoria geral no seu código/análise.\n",
        "</div>\n",
        "\n",
        "<div class=\"alert alert-block alert-danger\">\n",
        "\n",
        "<b>Comentário do revisor: </b> <a class=\"tocSkip\"></a>\n",
        "    \n",
        "Erro que precisa ser arrumado, caso contrário seu projeto **não** será aceito.\n",
        "</div>\n",
        "\n",
        "Você pode interagir comigo através dessa célula:\n",
        "<div class=\"alert alert-block alert-info\">\n",
        "<b>Resposta do Aluno.</b> <a class=\"tocSkip\"></a>\n",
        "</div>"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        "<div class=\"alert alert-block alert-danger\">\n",
        "<b> Comentário geral do revisor v1</b> <a class=\"tocSkip\"></a>\n",
        "    \n",
        "Obrigado por enviar o seu projeto e pelo esforço de chegar até aqui. O seu projeto está muito bom e possui alguns pontos bem interessantes, dos quais eu destaco:\n",
        "    \n",
        "- Código bem simples e estruturado \n",
        "- Comentários sucintos e bem objetivos\n",
        "- Conclusões pertinentes em cada análise e etapa de avaliação\n",
        "- Uso adequado de gráficos e visualizações\n",
        "    \n",
        "<br> \n",
        "    \n",
        "Entretanto, deixei alguns comentários em pequenos ajustes que precisamos fazer antes de avançarmos. Peço que trabalhe nesses pontos para seguirmos.\n",
        " \n",
        "<br>\n",
        "Qualquer dúvida, pode contar comigo.   \n",
        "    \n",
        "    \n",
        "**Até breve!**\n",
        "\n",
        "</div>"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        "# Análise de Dados de Videogames"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {},
      "outputs": [],
      "source": [
        "import pandas as pd, numpy as np, matplotlib.pyplot as plt\n",
        "import seaborn as sns\n",
        "from scipy import stats as st\n",
        "df = pd.read_csv('data/games.csv')"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {},
      "outputs": [],
      "source": [
        "df.head()"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        "### Padronizar os nomes das colunas para minúsculas e substituir espaços por underscores."
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {},
      "outputs": [],
      "source": [
        "new_col_names = [old_name.strip().lower().replace(' ', '_') for old_name in df.columns]\n",
        "df.columns = new_col_names\n",
        "df.columns"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        "### Descrição das colunas\n",
        "—Name (nome)\n",
        "\n",
        "—Platform (plataforma)\n",
        "\n",
        "—Year_of_Release (Ano de lançamento)\n",
        "\n",
        "—Genre (gênero)\n",
        "\n",
        "—NA_sales (vendas norte-americanas em milhões de USD)\n",
        "\n",
        "—EU_sales (vendas na Europa em milhões de USD)\n",
        "\n",
        "—JP_sales (vendas no Japão em milhões de USD)\n",
        "\n",
        "—Other_sales (vendas em outros países em em milhões de USD)\n",
        "\n",
        "—Critic_Score (Pontuação crítica) (máximo de 100)\n",
        "\n",
        "—User_Score (Pontuação do usuário) (máximo de 10)\n",
        "\n",
        "—Classificação (ESRB)"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        "### Problemas\n",
        "colunas que tem que mudar o tipo: year_of_release , critic_score , user_score"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {},
      "outputs": [],
      "source": [
        "df.describe()"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {},
      "outputs": [],
      "source": [
        "df['critic_score'].unique()"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {},
      "outputs": [],
      "source": [
        "# Convertendo 'year_of_release' para inteiro com suporte a valores ausentes (pd.Int64Dtype)\n",
        "df['year_of_release'] = df['year_of_release'].astype('Int64')\n",
        "\n",
        "# Convertendo 'critic_score' para inteiro com suporte a valores ausentes (pd.Int64Dtype)\n",
        "df['critic_score'] = df['critic_score'].astype('Int64')\n",
        "\n",
        "# Convertendo 'user_score' para numérico, tratando erros e convertendo 'tbd' para NaN\n",
        "df['user_score'] = pd.to_numeric(df['user_score'], errors='coerce')\n",
        "\n",
        "# Exibindo informações sobre os tipos de dados após as conversões\n",
        "df.info()\n"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {},
      "outputs": [],
      "source": [
        "df.sample(10)"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        "<div class=\"alert alert-block alert-success\">\n",
        "<b> Comentário do revisor: </b> <a class=\"tocSkip\"></a>\n",
        "\n",
        "- Os dados foram carregados corretamente em célula separada\n",
        "- O método `head()` foi utilizado para exibir uma amostra dos dados\n",
        "- O método `info()` foi utilizado para estudo inicial dos dados\n",
        "- O nome das colunas foi renomeado para seguir a convenção `snake_case`\n",
        "</div>"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        "### Explicação das alterações de tipo de dados:\n",
        "\n",
        "- **year_of_release**:  \n",
        "    Foi convertido para o tipo inteiro com suporte a valores ausentes (`pd.Int64Dtype`), preservando os valores `NaN` sem atribuir um valor arbitrário, como `0`. Dessa forma, evitamos distorcer a distribuição dos dados e mantemos a integridade da informação.\n",
        "    \n",
        "- **critic_score**:  \n",
        "    Também foi convertido para um inteiro com suporte a valores ausentes, permitindo que os valores `NaN` sejam mantidos, sem substituí-los por `0` — valor que poderia ser interpretado erroneamente como uma nota válida.\n",
        "    \n",
        "- **user_score**:  \n",
        "    Convertido para o tipo numérico (`float64`) usando `pd.to_numeric` com `errors='coerce'`. Essa abordagem converte valores não numéricos (por exemplo, `'tbd'`) em `NaN`, garantindo que as análises estatísticas ignorem corretamente os valores ausentes.\n",
        "\n",
        "### Possíveis razões para valores ausentes:\n",
        "\n",
        "- Dados Históricos e Coleta Incompleta: Para jogos mais antigos, especialmente com year_of_release faltante, é possível que os registros de lançamento originais não fossem sistemáticos ou que a coleta de dados retrospectiva seja incompleta. A ausência de critic_score e user_score pode ser mais comum em jogos menos populares ou de nicho, que podem não ter recebido atenção da crítica ou da base de usuários em massa.\n",
        "\n",
        "- Erros de Registro e Entrada de Dados: Erros humanos durante a entrada de dados ou problemas técnicos nos sistemas de registro podem levar à falta de informação em algumas entradas.\n",
        "'TBD' em user_score: A presença de 'tbd' (To Be Determined) indica que, no momento da coleta dos dados, a pontuação do usuário ainda não estava disponível, comum para jogos recém-lançados ou menos populares.\n",
        "\n",
        "- Não Aplicável: Em alguns casos, a métrica pode simplesmente não ser aplicável. Jogos obscuros podem nunca ter sido avaliados por críticos, resultando em critic_score ausente.\n",
        "\n",
        "### Tratamento de 'TBD':\n",
        "- A abreviação 'TBD' em user_score foi tratada como um valor ausente, convertendo-se em NaN através de pd.to_numeric(errors='coerce'). Essa abordagem é justificada porque 'TBD' indica que a pontuação do usuário é indeterminada ou não divulgada, o que equivale a um valor ausente para análise quantitativa"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        "<div class=\"alert alert-block alert-danger\">\n",
        "<b> Comentário do revisor: </b> <a class=\"tocSkip\"></a>\n",
        "\n",
        "- Aqui não é o ideal preencher os valores ausentes do atributo `year_of_release` com `0`, pois essa operação irá distorcer a distribuição dos dados. Como sugestão, você pode analisar a quantidade de valores ausentes e se compensa removê-los ou **deixar os valores ausentes** como estão.\n",
        "- Essa observação serve para os atributos de score também (`critic_score` e `user_score`). Note que `0.0` é um valor possível de nota e, desta forma, você está assumindo que **todos** os valores ausentes possuem essa nota\n",
        "\n",
        "</div>"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {},
      "outputs": [],
      "source": [
        "df['total_sales'] = (df['na_sales'] + df['eu_sales'] + df['other_sales']).round(2)\n",
        "df"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        "<div class=\"alert alert-block alert-success\">\n",
        "<b> Comentário do revisor: </b> <a class=\"tocSkip\"></a>\n",
        "\n",
        "A coluna `total_sales` foi criada corretamente para agregar a receita!\n",
        "\n",
        "</div>"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {},
      "outputs": [],
      "source": [
        "print(f'Tamanho do DataFrame ANTES remover jogos com ano ou vendas ausentes: {df.shape}')\n",
        "# Removendo jogos com ano de lançamento igual a 0 (indicando ano desconhecido ou ausente)\n",
        "df = df[df['year_of_release'] != 0]\n",
        "\n",
        "# Removendo jogos com vendas totais iguais a 0 (indicando que não tiveram vendas registradas nas regiões consideradas)\n",
        "df = df[df['total_sales'] > 0]\n",
        "\n",
        "# Exibindo o tamanho do DataFrame após a limpeza\n",
        "print(f'Tamanho do DataFrame APÓS remover jogos com ano ou vendas ausentes: {df.shape}')"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {},
      "outputs": [],
      "source": [
        "# Contando o número de jogos lançados por ano e ordenando por ano\n",
        "games_per_year = df['year_of_release'].value_counts().sort_index()\n",
        "\n",
        "# Plotando um gráfico de barras para visualizar a quantidade de jogos lançados por ano\n",
        "plt.figure(figsize=(12,6))\n",
        "games_per_year.plot(kind='bar', color='skyblue')\n",
        "plt.title('Jogos Lançados por Ano')\n",
        "plt.xlabel('Ano')\n",
        "plt.ylabel('Quantidade de Jogos')\n",
        "plt.show()"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        "### Análise da quantidade de jogos lançados por ano:\n",
        "\n",
        "\n",
        "\n",
        "O gráfico e os dados revelam um aumento no lançamento de jogos a partir dos anos 90, com um pico em meados dos anos 2000 (2008-2011), seguido por um declínio até 2016.\n",
        "\n",
        "\n",
        "Significância dos dados por período:\n",
        "\n",
        "    - Dados Pré-1990: Volume baixo de lançamentos, mercado de videogames menor e menos estabelecido. Dados menos representativos do mercado atual.\n",
        "\n",
        "    - Dados 1990-2016: Período de expansão da indústria. Dados significativos para entender tendências, ciclo de vida das plataformas e preferências dos consumidores.\n",
        "\n",
        "    - Declínio Recente (Pós-2011): Pode indicar mudança no mercado, foco em jogos de maior orçamento, aumento de jogos digitais, ou consolidação da indústria. Relevante para projetar tendências para 2017.\n",
        "Em resumo, dados a partir dos anos 90 são mais relevantes para previsões de mercado, enquanto dados anteriores contextualizam a evolução da indústria"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        "<div class=\"alert alert-block alert-success\">\n",
        "<b> Comentário do revisor: </b> <a class=\"tocSkip\"></a>\n",
        "    \n",
        "- A distribuição de lançamentos ao longo dos anos foi analisada\n",
        "- Um gráfico de barras foi utilizado corretamente\n",
        "</div>"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {},
      "outputs": [],
      "source": [
        "df['platform'].unique()\n"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        "|Código|Nome Completo|Ano de Lançamento|\n",
        "|---|---|---|\n",
        "|**Wii**|Nintendo Wii|2006|\n",
        "|**NES**|Nintendo Entertainment System|1983 (JP), 1985 (EUA)|\n",
        "|**GB**|Game Boy|1989|\n",
        "|**DS**|Nintendo DS|2004|\n",
        "|**X360**|Xbox 360|2005|\n",
        "|**PS3**|PlayStation 3|2006|\n",
        "|**PS2**|PlayStation 2|2000|\n",
        "|**SNES**|Super Nintendo Entertainment System|1990 (JP), 1991 (EUA)|\n",
        "|**GBA**|Game Boy Advance|2001|\n",
        "|**PS4**|PlayStation 4|2013|\n",
        "|**3DS**|Nintendo 3DS|2011|\n",
        "|**N64**|Nintendo 64|1996|\n",
        "|**PS**|PlayStation (PS1)|1994|\n",
        "|**XB**|Xbox|2001|\n",
        "|**PC**|Personal Computer (PC)|- (Varia conforme hardware)|\n",
        "|**2600**|Atari 2600|1977|\n",
        "|**PSP**|PlayStation Portable|2004|\n",
        "|**XOne**|Xbox One|2013|\n",
        "|**WiiU**|Nintendo Wii U|2012|\n",
        "|**GC**|Nintendo GameCube|2001|\n",
        "|**GEN**|Sega Genesis (Mega Drive)|1988 (JP), 1989 (EUA)|\n",
        "|**DC**|Sega Dreamcast|1998 (JP), 1999 (EUA)|\n",
        "|**PSV**|PlayStation Vita|2011|\n",
        "|**SAT**|Sega Saturn|1994 (JP), 1995 (EUA)|\n",
        "|**SCD**|Sega CD (Mega-CD)|1991 (JP), 1992 (EUA)|\n",
        "|**WS**|WonderSwan|1999|\n",
        "|**NG**|Neo Geo|1990|\n",
        "|**TG16**|TurboGrafx-16 (PC Engine)|1987 (JP), 1989 (EUA)|\n",
        "|**3DO**|3DO Interactive Multiplayer|1993|\n",
        "|**GG**|Sega Game Gear|1990|\n",
        "|**PCFX**|NEC PC-FX|1994|"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {},
      "outputs": [],
      "source": [
        "contagem_por_plataforma = df['platform'].value_counts()\n",
        "contagem_por_plataforma.head(10)"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {},
      "outputs": [],
      "source": [
        "# Plataformas desejadas\n",
        "platforms = ['PS2', 'DS', 'PS3', 'N64']\n",
        "\n",
        "# Filtrar e agrupar os dados para as plataformas selecionadas\n",
        "df_grouped = df[df['platform'].isin(platforms)].groupby(['year_of_release', 'platform'])['total_sales'].sum().unstack()\n",
        "\n",
        "# Calcular a soma total de vendas por ano (todas as plataformas)\n",
        "total_por_ano = df.groupby('year_of_release')['total_sales'].sum()  # <--- Nova linha\n",
        "\n",
        "# Criar o gráfico de linhas\n",
        "ax = df_grouped.plot(kind='line', figsize=(12, 6), linewidth=2)\n",
        "\n",
        "# Adicionar a linha do total ao gráfico\n",
        "total_por_ano.plot(ax=ax, color='black', linewidth=2, linestyle='--', label='Total')  # <--- Nova linha\n",
        "\n",
        "# Personalizar o gráfico\n",
        "plt.title(\"Vendas Totais por Ano para Plataformas Selecionadas\")\n",
        "plt.xlabel(\"Ano de Lançamento\")\n",
        "plt.ylabel(\"Vendas Totais (milhões de USD)\")\n",
        "plt.legend(title=\"Plataforma\")\n",
        "plt.xticks(total_por_ano.index, rotation=45)  # Garante todos os anos no eixo x\n",
        "plt.tight_layout()\n",
        "plt.grid()\n",
        "# Exibir o gráfico\n",
        "plt.show()"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        "### Analize\n",
        "No grafico demostro o crescrimento de varias plataformas, onde quando uma decrece outra cresce e ainda mostrando o total do mercado, mostrando que entre 2000 até 2007 ouve um crescimento muito grande. Demora mais ou menos 10 anos para o hipe de uma plataforma ir em bora."
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {},
      "outputs": [],
      "source": [
        "# Agrupando as vendas totais por plataforma e ordenando em ordem decrescente\n",
        "platform_sales = df.groupby('platform')['total_sales'].sum().sort_values(ascending=False)\n",
        "top_platforms = platform_sales.head(10) # Selecionando as 10 plataformas com maiores vendas\n",
        "print(\"Top 10 plataformas por vendas totais:\\n\", top_platforms)\n",
        "\n",
        "# Criando um DataFrame para as top plataformas para análise temporal\n",
        "top_platform_df = df[df['platform'].isin(top_platforms.index)]\n",
        "\n",
        "# Criando distribuições de vendas por ano para cada plataforma principal\n",
        "plt.figure(figsize=(15, 10))\n",
        "for platform in top_platforms.index:\n",
        "    platform_data = top_platform_df[top_platform_df['platform'] == platform]\n",
        "    sns.histplot(platform_data['year_of_release'], kde=False, label=platform)\n",
        "\n",
        "plt.title('Distribuição de Vendas por Ano para Top Plataformas')\n",
        "plt.xlabel('Ano de Lançamento')\n",
        "plt.ylabel('Número de Jogos Lançados') # <--- Nova linha\n",
        "plt.xticks(total_por_ano.index, rotation=45)\n",
        "plt.legend()\n",
        "plt.show()"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        "\n",
        "### **Análise da variação de vendas por plataforma e ciclo de vida:**\n",
        "\n",
        "- **Plataformas com Maiores Vendas Totais:** PS2, X360, PS3, Wii, DS, PS, PS4, GBA, PSP, 3DS lideram em vendas. Plataformas de consoles domésticos e portáteis de grande sucesso.\n",
        "    \n",
        "- **Distribuição de Vendas ao Longo do Tempo (Ciclo de Vida):**\n",
        "    \n",
        "    - Cada plataforma tem um ciclo de vida distinto de 7-10 anos. Pico de lançamentos concentrado em 5-7 anos, seguido de declínio. Ex: PS2, Wii, DS.\n",
        "        \n",
        "    - Plataformas recentes como PS4 e XOne (relevantes para o período recente) mostram ciclo de vida mais jovem (lançamentos em 2013-2016).\n",
        "        \n",
        "- **Plataformas Populares em Declínio:** PS2, PSP, DS, Wii, e PS3 mostram declínio acentuado ou ausência de lançamentos recentes (2015-2016), indicando fim de ciclo.\n",
        "    \n",
        "- **Tempo para Novas Plataformas Aparecerem e Antigas Desaparecerem:**\n",
        "    \n",
        "    - Vida 'útil' de plataforma: 7-10 anos. Novas plataformas surgem, substituindo as antigas.\n",
        "        \n",
        "    - Transição: Plataforma antiga ainda tem lançamentos enquanto a nova ganha momentum.\n",
        "        \n",
        "\n",
        "Em resumo, o mercado de consoles é dinâmico, com ciclos de vida de cerca de uma década. Plataformas antigas como PS2 e Wii estão em declínio. Para 2017, foco em plataformas recentes e em crescimento como PS4 e Xbox One."
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        "### **Determinar o período de dados relevantes para construir um modelo para 2017.**\n",
        "\n",
        "**Período de dados relevantes para previsão de 2017:**\n",
        "\n",
        "- Período mais relevante: **2013-2016**.\n",
        "    \n",
        "- **Justificativa:**\n",
        "    \n",
        "    - **Ciclo de Vida das Plataformas:** Plataformas dominantes pré-2013 (PS3, X360, Wii, DS, PS2) estavam em declínio em 2016. Plataformas em ascensão para 2017: PS4, Xbox One, Nintendo 3DS (mais madura).\n",
        "        \n",
        "    - **Declínio Geral do Mercado:** Queda nos lançamentos pós-2011. Dados recentes (2013-2016) refletem tendências de mercado atuais.\n",
        "        \n",
        "    - **Relevância para 2017:** Dados recentes refletem condições de mercado próximas a 2017. Dados antigos podem ser menos relevantes devido a mudanças tecnológicas e preferências.\n",
        "        \n",
        "\n",
        "**Decisão:** Focar nos dados de **2013-2016** para análises e previsões para 2017."
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        "<div class=\"alert alert-block alert-success\">\n",
        "<b> Comentário do revisor: </b> <a class=\"tocSkip\"></a>\n",
        "\n",
        "- As vendas totais foram analisadas corretamente\n",
        "- O ciclo de vida das plataformas em anos foi calculado\n",
        "- A conclusão foi apresentada\n",
        "</div>"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {},
      "outputs": [],
      "source": [
        "# Filtrando o DataFrame para incluir apenas dados de 2013 em diante\n",
        "df_relevante = df[df['year_of_release'] >= 2013]\n",
        "\n",
        "# Exibindo o tamanho do DataFrame relevante e os anos abrangidos\n",
        "print(f'Tamanho do DataFrame relevante (2013-2016): {df_relevante.shape}')\n",
        "print(f\"Anos no DataFrame relevante: {df_relevante['year_of_release'].unique()}\")"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        "<div class=\"alert alert-block alert-success\">\n",
        "<b> Comentário do revisor: </b> <a class=\"tocSkip\"></a>\n",
        "\n",
        "- O filtro de data foi realizado corremente. Bom trabalho nessa etapa!\n",
        "</div>"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        "Desconsiderando dados anteriores."
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {},
      "outputs": [],
      "source": [
        "# Plataformas desejadas\n",
        "platforms = df_relevante.groupby('platform')['total_sales'].sum().sort_values(ascending=False).index.tolist()\n",
        "platforms_ = platforms[:5]\n",
        "\n",
        "# Filtrar e agrupar os dados para as plataformas selecionadas\n",
        "df_grouped = df_relevante[df_relevante['platform'].isin(platforms_)].groupby(['year_of_release', 'platform'])['total_sales'].sum().unstack()\n",
        "\n",
        "# Calcular a soma total de vendas por ano (todas as plataformas)\n",
        "total_por_ano = df_relevante.groupby('year_of_release')['total_sales'].sum()  # <--- Nova linha\n",
        "\n",
        "# Criar o gráfico de linhas\n",
        "ax = df_grouped.plot(kind='line', figsize=(6, 6), linewidth=2)\n",
        "\n",
        "# Adicionar a linha do total ao gráfico\n",
        "total_por_ano.plot(ax=ax, color='black', linewidth=2, linestyle='--', label='Total')  # <--- Nova linha\n",
        "\n",
        "# Personalizar o gráfico\n",
        "plt.title(\"Vendas Totais por Ano para Plataformas Selecionadas\")\n",
        "plt.xlabel(\"Ano de Lançamento\")\n",
        "plt.ylabel(\"Vendas Totais (milhões de USD)\")\n",
        "plt.legend(title=\"Plataforma\")\n",
        "plt.xticks(total_por_ano.index)  # Garante todos os anos no eixo x\n",
        "plt.tight_layout()\n",
        "plt.grid()\n",
        "# Exibir o gráfico\n",
        "plt.show()"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        "### **Análise das plataformas líderes, crescimento e declínio (2013-2016):**\n",
        "\n",
        "- **Plataformas Líderes em Vendas (2013-2016):** PS4, PS3, XOne, X360, 3DS.\n",
        "    \n",
        "- **Tendências de Crescimento e Declínio:**\n",
        "    \n",
        "    - **PS4 e XOne:** Forte crescimento (2013-2015), PS4 estável em 2016, XOne leve declínio em 2016. Plataformas em ascensão.\n",
        "        \n",
        "    - **PS3 e X360:** Declínio claro (2013-2016). Fim de ciclo.\n",
        "        \n",
        "    - **3DS:** Declínio gradual (2013-2016). Tendência de queda.\n",
        "        \n",
        "- **Plataformas Potencialmente Lucrativas para 2017:**\n",
        "    \n",
        "    - **PS4 e XOne:** Mais lucrativas e com maior potencial de crescimento para 2017. PS4 lidera.\n",
        "        \n",
        "    - **Nintendo 3DS:** Volume de vendas considerável, especialmente no Japão. Potencialmente lucrativa para público específico.\n",
        "        \n",
        "    - **PC:** Mercado estável e diversificado. Lucrativa para gêneros específicos e público.\n",
        "        \n",
        "    - **WiiU e PSVita:** Nichos de mercado, mas sem grande crescimento. Foco principal em plataformas de maior crescimento."
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {},
      "outputs": [],
      "source": [
        "lista_plataformas = df_relevante['platform'].unique()\n",
        "lista_plataformas\n",
        "platforms_b = platforms[:6]"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {},
      "outputs": [],
      "source": [
        "plt.figure(figsize=(10,6))\n",
        "sns.boxplot(\n",
        "    y='platform',\n",
        "    x='total_sales',\n",
        "    data=df_relevante,\n",
        "    order=platforms_b ,\n",
        "    orient='h'\n",
        ")\n",
        "plt.xlim(0, df_relevante['total_sales'].max() * 0.2)\n",
        "df_relevante.groupby('platform')['total_sales'].mean().reset_index().sort_values(by='total_sales', ascending=False)"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        "### **Análise dos Boxplots de Vendas Globais por Plataforma:**\n",
        "\n",
        "- **Dispersão e Outliers:** Grande dispersão nas vendas para todas as plataformas, com muitos outliers (jogos 'hit'). A maioria dos jogos vende pouco.\n",
        "    \n",
        "- **Medianas:** Medianas baixas para todas as plataformas (abaixo de 0.5 milhões USD). Maioria dos jogos não são grandes sucessos comerciais.\n",
        "    \n",
        "- **Comparação entre Plataformas (Significância das Diferenças):**\n",
        "    \n",
        "    - PS4 e XOne parecem ter medianas e 'caixas' (IQR) ligeiramente mais altas que PS3 e X360. Vendas geralmente melhores para a nova geração.\n",
        "        \n",
        "    - Caixas se sobrepõem, alta variabilidade dentro de cada plataforma. Diferenças visíveis e nas médias, mas podem não ser estatisticamente significativas na distribuição geral de vendas.\n",
        "        \n",
        "- **Vendas Médias:** PS4 e XOne têm as maiores vendas médias, seguidas por 3DS, PS3 e X360. WiiU com a menor média.\n",
        "    \n",
        "\n",
        "**Conclusão:** Diferenças nas vendas médias entre plataformas, mas alta variabilidade e sobreposição sugerem que **plataforma não é o único determinante do sucesso.** Outros fatores (gênero, qualidade, marketing) cruciais. Plataforma influencia o potencial de vendas, não garante sucesso individual."
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {},
      "outputs": [],
      "source": [
        "plt.figure(figsize=(8, 6))\n",
        "df_n_nulo = df[(df['critic_score'] > 60) & (df['platform'] == 'PS4')].dropna()\n",
        "sns.scatterplot(x=df_n_nulo['total_sales'] , y=df_n_nulo['critic_score'])"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {},
      "outputs": [],
      "source": [
        "correlacao = np.corrcoef(x=df_relevante['total_sales'][df_relevante['platform']== 'PS4'], y=df_relevante['critic_score'][df_relevante['platform']== 'PS4'])\n",
        "correlacao[1, 0]"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        "### Análise gráfico de disperção.\n",
        "- **Correlação existente, porém fraca:**  \n",
        "    Há uma relação tênue entre avaliação crítica e valor comercial dos jogos.\n",
        "    \n",
        "- **Críticas negativas como limitador:**  \n",
        "    Nenhum jogo com avaliações ruins alcançou alto valor de mercado.\n",
        "    \n",
        "- **Críticas positivas ≠ sucesso garantido:**  \n",
        "    Muitos títulos bem avaliados tiveram desempenho comercial modesto.\n",
        "    \n",
        "- **Conclusão implícita:**  \n",
        "    A recepção crítica desfavorável impede o sucesso, mas a positiva não assegura valorização elevada."
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        "<div class=\"alert alert-block alert-success\">\n",
        "<b> Comentário do revisor: </b> <a class=\"tocSkip\"></a>\n",
        "\n",
        "A correlação entre score e vendas foi analisada. Aqui você pode perceber a importância de não preencher os atributos de `score` com valores fictícios.\n",
        "</div>"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {},
      "outputs": [],
      "source": [
        "correlations = {}\n",
        "df_d = df_relevante\n",
        "# Calcular a correlação para cada plataforma única\n",
        "for platform in df_d['platform'].unique():\n",
        "    subset = df_d[df_d['platform'] == platform]  # Filtrar por plataforma\n",
        "    if len(subset) > 1:  # Precisa de pelo menos 2 valores para calcular correlação\n",
        "        corr = np.corrcoef(subset['total_sales'], subset['critic_score'])[0, 1]\n",
        "        correlations[platform] = corr\n",
        "    else:\n",
        "        correlations[platform] = np.nan  # Correlação não pode ser calculada com um único ponto\n",
        "\n",
        "# Criar DataFrame com os resultados\n",
        "df_corr = pd.DataFrame.from_dict(correlations, orient='index', columns=['correlation'])\n",
        "df_corr.index.name = 'platform'\n",
        "\n",
        "# Exibir o resultado\n",
        "df_corr"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        "todas as plataformas tem uma correlação muito fraca."
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {},
      "outputs": [],
      "source": [
        "df['genre'].unique()"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {},
      "outputs": [],
      "source": [
        "# Plataformas desejadas\n",
        "platforms = df_relevante.groupby('genre')['total_sales'].sum().sort_values(ascending=False).index.tolist()\n",
        "platforms\n",
        "# Filtrar e agrupar os dados para as plataformas selecionadas\n",
        "df_grouped = df_relevante[df_relevante['genre'].isin(platforms[:])].groupby(['year_of_release', 'genre'])['total_sales'].sum().unstack()\n",
        "\n",
        "\n",
        "df_grouped.sum().sort_values(ascending=False).to_frame()"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        "### Generos\n",
        "| Gênero          | Tradução           | Explicação                                                                 |\n",
        "|-----------------|--------------------|----------------------------------------------------------------------------|\n",
        "| Action          | Ação               | Jogos focados em combate rápido, movimentos ágeis e desafios de reflexo    |\n",
        "| Shooter         | Tiro               | Jogos onde o objetivo principal é atirar (1ª ou 3ª pessoa)                 |\n",
        "| Sports          | Esportes           | Simulações de esportes reais como futebol, basquete, etc.                 |\n",
        "| Role-Playing    | RPG                | Jogos com narrativa forte, desenvolvimento de personagem e progressão      |\n",
        "| Misc            | Diversos           | Categoria para jogos que não se encaixam em outros gêneros específicos     |\n",
        "| Platform        | Plataforma         | Jogos com foco em saltar entre plataformas e superar obstáculos            |\n",
        "| Racing          | Corrida            | Jogos de competição com veículos (carros, motos, etc.)                     |\n",
        "| Fighting        | Luta               | Jogos de combate 1vs1 com personagens e golpes especiais                   |\n",
        "| Adventure       | Aventura           | Jogos com ênfase em exploração, quebra-cabeças e narrativa                 |\n",
        "| Simulation      | Simulação          | Jogos que imitam atividades da vida real ou sistemas complexos             |\n",
        "| Strategy        | Estratégia         | Jogos que exigem planejamento, gestão de recursos e táticas                |\n",
        "| Puzzle          | Quebra-cabeça      | Jogos baseados em desafios lógicos e resolução de enigmas                  |\n",
        "### vendas por genero\n",
        "\n",
        "Os generos que mais venderam entre o periodo foram: ação, tiro, esportes\n",
        "Tambem são os mais ativos que exigem reação rapida.\n",
        "\n",
        "Os que menos venderam foram: Quebra-cabeça, Estratégia, simulação.\n",
        "Também são os mais tranquilos, que não precisa de uma reação rapida. "
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        "<div class=\"alert alert-block alert-success\">\n",
        "<b> Comentário do revisor: </b> <a class=\"tocSkip\"></a>\n",
        "\n",
        "- A análise de lançamentos e vendas por gênero foi conduzida\n",
        "- As conclusões foram apresentadas\n",
        "</div>"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {},
      "outputs": [],
      "source": [
        "def head_vendas(pais, x, y):\n",
        "    \"\"\"\n",
        "    Função para encontrar e exibir as 5 principais categorias (plataformas/gêneros/ratings)\n",
        "    por vendas em uma região, exibindo também o desvio padrão das vendas de cada categoria.\n",
        "    \n",
        "    Args:\n",
        "        pais (str): Nome da região (ex: 'América do Norte').\n",
        "        x (str): Coluna para agrupamento (ex: 'platform', 'genre', 'rating').\n",
        "        y (str): Nome da coluna de vendas da região (ex: 'na_sales').\n",
        "    \"\"\"\n",
        "    # Agrupa os dados calculando a soma e o desvio padrão das vendas para cada categoria\n",
        "    df_grouped = df_relevante.groupby(x)[y].agg(['sum', 'std']).sort_values('sum', ascending=False)\n",
        "    top_5 = df_grouped.head(5)\n",
        "    \n",
        "    print(f'Top 5 {x} por vendas em {pais}:')\n",
        "    \n",
        "    for posicao, (categoria, row) in enumerate(top_5.iterrows(), 1):\n",
        "        soma = row['sum']\n",
        "        desvio = row['std']\n",
        "        print(f'{posicao}. {categoria:<5} → {soma:>8.2f} milhões (STD:{desvio:>5.2f})')\n",
        "    print()\n",
        "\n",
        "# Exemplo de uso corrigindo o nome do país\n",
        "head_vendas('EUA', 'platform', 'na_sales')\n",
        "head_vendas('Europa', 'platform', 'eu_sales')\n",
        "head_vendas('Japão', 'platform', 'jp_sales')"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        "**EUA & Europa**\n",
        "\n",
        "- **Líderes:** PS4 domina (EUA: 108,7 mi / Europa: 141,1 mi).\n",
        "    \n",
        "- **Microsoft:** XOne tem força nos EUA (2º lugar), mas fraco na Europa (3º).\n",
        "    \n",
        "- **Legado:** PS3 e X360 ainda relevantes, especialmente nos EUA.\n",
        "    \n",
        "- **Nintendo:** 3DS em 5º, com vendas modestas.\n",
        "\n",
        "**Japão**\n",
        "\n",
        "- **Nintendo reina:** 3DS lidera (40,2 mi), sem Xbox no top 5.\n",
        "    \n",
        "- **Sony secundária:** PS3 e PS4 em 2º e 3º, mas vendas baixas.\n",
        "    \n",
        "- **Portáteis:** WiiU e PSV no top 5 refletem preferência por nichos.\n",
        "    \n",
        "\n",
        "**Contrastes Principais**\n",
        "\n",
        "1. **Ocidente:** _Home consoles_ (PS4/Xbox) + foco em tecnologia.\n",
        "    \n",
        "2. **Japão:** Portáteis (3DS) + marcas locais (Nintendo/Sony).\n",
        "    \n",
        "3. **Xbox:** Ausente no Japão; perde força na Europa.\n",
        "    \n",
        "\n",
        "**Insights**\n",
        "\n",
        "- **PS4 é global**, mas **3DS é fenômeno japonês** (vende mais lá que no Ocidente).\n",
        "    \n",
        "- **Microsoft precisa adaptar estratégias** (ex: Japão ignora Xbox).\n",
        "    \n",
        "- **Nintendo sobrevive por ecossistema único** (portáteis + family-friendly).\n",
        "\n",
        "### STD\n",
        "\n",
        " **EUA:**\n",
        "\n",
        "- O **X360** tem o maior **STD (1.03)**, indicando que há uma grande variação nas vendas dos jogos dessa plataforma. Alguns títulos venderam excepcionalmente bem, enquanto outros tiveram vendas baixas.\n",
        "- **PS4 e XOne** têm desvios relativamente baixos (0.62 e 0.63), sugerindo que a maioria dos jogos vende dentro de uma faixa mais previsível.\n",
        "\n",
        " **Europa:**\n",
        "\n",
        "- O **PS4** tem as maiores vendas (141.09M) e um **STD médio (0.86)**, indicando que, apesar de ter alguns grandes sucessos, a variação não é extrema.\n",
        "- **XOne tem um STD bem baixo (0.37)**, o que sugere que seus jogos tiveram vendas mais consistentes na região.\n",
        "- O **PS3 tem um STD mais alto (0.78)**, sugerindo maior variação entre os jogos vendidos.\n",
        "\n",
        " **Japão:**\n",
        "\n",
        "- O mercado japonês apresenta os menores desvios padrão, o que significa que as vendas são mais estáveis e previsíveis.\n",
        "- **PS3 e PS4 têm STDs extremamente baixos (0.12 e 0.07, respectivamente)**, sugerindo que os jogos para essas plataformas vendem de forma bastante homogênea.\n",
        "- **3DS tem um STD maior (0.68)**, o que indica que alguns títulos tiveram vendas muito altas, enquanto outros ficaram abaixo da média."
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {},
      "outputs": [],
      "source": [
        "head_vendas('EUA','genre','na_sales')\n",
        "head_vendas('Eoropa','genre','eu_sales')\n",
        "head_vendas('Japão','genre','jp_sales')"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        "- **EUA & Europa:**\n",
        "    \n",
        "    - **Gêneros dominantes:** Action (1º) e Shooter (2º), com vendas altíssimas.\n",
        "        \n",
        "    - **Destaques:** Sports e RPG completam o top 4, mas com números menores.\n",
        "        \n",
        "    - **Diferença:** 5º lugar varia entre _Misc_ (EUA) e _Racing_ (Europa).\n",
        "        \n",
        "- **Japão:**\n",
        "    \n",
        "    - **Liderança absoluta de RPGs:** 32,15 mi (quase o dobro do 2º colocado, Action).\n",
        "        \n",
        "    - **Preferências únicas:** Fighting em 3º e Shooter em 4º, com vendas muito abaixo do Ocidente.\n",
        "        \n",
        "- **Contraste Cultural:**\n",
        "    \n",
        "    - **Ocidente:** Foco em ação rápida (Shooter, Sports) e competição.\n",
        "        \n",
        "    - **Japão:** Valoriza narrativa (RPGs) e nichos (Fighting).\n",
        "        \n",
        "- **Insights Chave:**\n",
        "    \n",
        "    - Shooter vende 16x mais nos EUA que no Japão.\n",
        "        \n",
        "    - RPG é o único gênero entre os top 3 em todas as regiões, mas é **dominante no Japão**.\n",
        "        \n",
        "    - Cultura local define sucesso: estratégias de lançamento devem ser adaptadas por região.\n",
        "\n",
        "### STD\n",
        "- **Nos EUA e Europa:**\n",
        "    \n",
        "    - Gêneros como **Shooter** e **Action** têm um **STD alto**, indicando que alguns jogos vendem muito bem, enquanto outros têm vendas baixas.\n",
        "    - Já gêneros como **Sports** e **Role-Playing** têm um **STD menor**, sugerindo uma distribuição mais uniforme das vendas.\n",
        "    - No caso das plataformas, **PS4 e XOne** possuem um STD relativamente baixo, mostrando que as vendas são mais equilibradas entre os jogos dessas plataformas.\n",
        "- **No Japão:**\n",
        "    \n",
        "    - O **STD geral é menor**, principalmente para gêneros como **Role-Playing e Action**, o que sugere que a maioria dos jogos vende em uma faixa mais próxima, sem grandes discrepâncias.\n",
        "    - Plataformas como **PS4 e PSV** apresentam **desvios baixos**, indicando que os jogos vendem de forma mais consistente."
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {},
      "outputs": [],
      "source": [
        "df['rating'].unique()"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        "| Sigla  | Significado      | Descrição                                                                 |\n",
        "|--------|------------------|---------------------------------------------------------------------------|\n",
        "| E      | Everyone         | Conteúdo apropriado para todas as idades, sem material inapropriado.        |\n",
        "| nan    | Não disponível   | Informação de classificação ausente ou não especificada.                  |\n",
        "| M      | Mature           | Conteúdo destinado a adultos, com possibilidade de violência intensa, linguagem forte ou temas maduros. |\n",
        "| T      | Teen             | Apropriado para adolescentes (geralmente a partir dos 13 anos), com conteúdo moderado. |\n",
        "| E10+   | Everyone 10+     | Adequado para crianças a partir dos 10 anos, podendo conter temas um pouco mais complexos. |\n",
        "| K-A    | Kids to Adults   | Classificação antiga que indicava jogos apropriados para todas as idades.   |\n",
        "| AO     | Adults Only      | Exclusivo para adultos; pode incluir violência extrema ou conteúdo sexual explícito. |\n",
        "| EC     | Early Childhood  | Indicada para crianças muito pequenas, com conteúdos geralmente educativos. |\n",
        "| RP     | Rating Pending   | Classificação pendente, ou seja, o jogo ainda está aguardando a avaliação final. |\n"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {},
      "outputs": [],
      "source": [
        "head_vendas('EUA','rating','na_sales')\n",
        "head_vendas('Eoropa','rating','eu_sales')\n",
        "head_vendas('Japão','rating','jp_sales')"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        "<div class=\"alert alert-block alert-warning\">\n",
        "<b> Comentário do revisor: </b> <a class=\"tocSkip\"></a>\n",
        "\n",
        "- O perfil de usuário foi criado por região. Sugestão: aqui você poderia calcular outras estatísticas descritivas como **desvio padrão** de vendas por região\n",
        "- As conclusões foram apresentadas\n",
        "</div>"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        "### Impacto das Classificações ESRB nas Vendas Regionais:\n",
        "\n",
        "- Mercado Ocidental (NA/EU) vs. Japão: Diferença nas preferências de classificação. 'M' lidera em NA/EU, 'T' e 'E' no Japão."
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {},
      "outputs": [],
      "source": [
        "XOne = df[df['platform'] == 'XOne']\n",
        "PC = df[df['platform'] == 'PC']\n",
        "\n",
        "print(\"Hipóteses do teste:\")\n",
        "print(\"H0: A média de vendas totais dos jogos na plataforma XOne é igual à média de vendas totais dos jogos na plataforma PC.\")\n",
        "print(\"Ha: A média de vendas totais dos jogos na plataforma XOne é diferente da média de vendas totais dos jogos na plataforma PC.\\n\")\n",
        "\n",
        "print(f\"a media de XOne é: {XOne['total_sales'].mean():.2f} a media de PC é: {PC['total_sales'].mean():.2f}\")\n",
        "# Teste as hipóteses\n",
        "alpha = 0.05\n",
        "quantidade = min(len(XOne), len(PC))\n",
        "results = st.ttest_ind(\n",
        "    XOne['total_sales'].sample(n=quantidade), \n",
        "    PC['total_sales'].sample(n=quantidade),\n",
        "    equal_var=False )\n",
        "print(f'valor-p: {results.pvalue:.10f}')\n",
        "if (results.pvalue < alpha):\n",
        "    print(\"Rejeitamos a hipótese nula\")\n",
        "else:\n",
        "    print(\"Não podemos rejeitar a hipótese nula\")\n"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        "primeiro eu filtrei 2 tabelas com o conteudo (XOne, PC) e depois eu coloquei na formula do tteste, e com o p value eu testei se deveria aceitar ou regeitar a hipótese nula\n",
        "Eu descidi o alpha por um padrão comum de sifnificância. "
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {},
      "outputs": [],
      "source": [
        "Action = df[df['genre'] == 'Action']\n",
        "Sports = df[df['genre'] == 'Sports']\n",
        "# Impressão das hipóteses do teste\n",
        "print(\"Hipóteses do teste:\")\n",
        "print(\"H0: A média de vendas totais dos jogos do gênero Action é igual à média de vendas totais dos jogos do gênero Sports.\")\n",
        "print(\"Ha: A média de vendas totais dos jogos do gênero Action é diferente da média de vendas totais dos jogos do gênero Sports.\\n\")\n",
        "\n",
        "print(f\"a media de Action é: {Action['total_sales'].mean():.2f} a media de Sports é: {Sports['total_sales'].mean():.2f}\")\n",
        "# Teste as hipóteses\n",
        "quantidade = min(len(Action), len(Sports))\n",
        "results = st.ttest_ind(\n",
        "    Action['total_sales'].sample(n=quantidade), \n",
        "    Sports['total_sales'].sample(n=quantidade),\n",
        "    equal_var=False)\n",
        "print(f'valor-p: {results.pvalue:.10f}')\n",
        "if (results.pvalue < alpha):\n",
        "    print(\"Rejeitamos a hipótese nula\")\n",
        "else:\n",
        "    print(\"Não podemos rejeitar a hipótese nula\")"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        "primeiro eu filtrei 2 tabelas com o conteudo (Action, Sports) e depois eu coloquei na formula do tteste, e com o p value eu testei se deveria aceitar ou regeitar a hipótese nula\n",
        "Eu descidi o alpha por um padrão comum de sifnificância. "
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        "<div class=\"alert alert-block alert-danger\">\n",
        "<b> Comentário do revisor: </b> <a class=\"tocSkip\"></a>\n",
        "\n",
        "Aqui precisamos de um pequeno ajuste no teste acima:\n",
        "- [x] As hipóteses nula e alternativa foram definidas corretamente\n",
        "- [x] O `p-value` foi exibido para o `teste-t`\n",
        "- [ ] O argumento `equal_var` foi definido corretamente no método `ttest_ind(..)`\n",
        "- [x] O teste foi executado corretamente\n",
        "    \n",
        "</div>"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        "# **Conclusão Geral**\n",
        "\n",
        "## **Principais Descobertas da Análise de Dados de Videogames (2013-2016):**\n",
        "\n",
        "1. **Ciclo de Vida das Plataformas:** Plataformas de videogame têm ciclos de vida de aproximadamente 7-10 anos. Novas gerações de consoles substituem as antigas, com um período de transição. Plataformas como PS2, Wii e DS, apesar do sucesso passado, estão em declínio. Plataformas atuais líderes são PS4 e Xbox One.\n",
        "    \n",
        "2. **Plataformas Líderes para 2017:** PS4 e Xbox One são as plataformas mais lucrativas e com maior potencial para 2017. Nintendo 3DS ainda relevante no mercado portátil. PC é uma plataforma estável e diversificada.\n",
        "    \n",
        "3. **Vendas por Plataforma: Variabilidade e Médias:** Há diferenças nas vendas médias entre plataformas (PS4 e XOne com médias mais altas). No entanto, a variabilidade dentro de cada plataforma é alta, indicando que a plataforma não garante o sucesso de vendas. Outros fatores são cruciais.\n",
        "    \n",
        "4. **Influência das Avaliações:** Avaliações de crítica e usuários têm uma influência muito fraca nas vendas de jogos para PS4. Outros fatores como marca, gênero e marketing podem ser mais importantes.\n",
        "    \n",
        "5. **Variação de Vendas Multiplataforma:** As vendas do mesmo jogo variam consideravelmente entre plataformas, reforçando o impacto da plataforma no desempenho comercial.\n",
        "    \n",
        "6. **Gêneros Mais Lucrativos:** Action, Shooter e Sports são os gêneros mais lucrativos em vendas totais (2013-2016). Gêneros de nicho como Strategy e Puzzle têm vendas menores, mas podem ser relevantes para públicos específicos.\n",
        "    \n",
        "7. **Perfis Regionais de Usuários:**\n",
        "    \n",
        "    - **América do Norte:** Preferência por Xbox, gêneros Action, Shooter, Sports, classificação 'M'.\n",
        "        \n",
        "    - **Europa:** Preferência por PlayStation, gêneros Action, Shooter, Sports, classificação 'M'.\n",
        "        \n",
        "    - **Japão:** Forte preferência por Nintendo (portátil 3DS), gênero Role-Playing dominante, classificações 'T' e 'E' mais populares.\n",
        "        \n",
        "8. **Testes de Hipóteses:**\n",
        "    \n",
        "    - **Plataformas (Xbox One vs. PC):** Não há evidência estatística suficiente para afirmar que as avaliações médias de usuários são diferentes entre Xbox One e PC.\n",
        "        \n",
        "    - **Gêneros (Action vs. Sports):** Não há evidência estatística suficiente para afirmar que as avaliações médias de usuários são diferentes entre gêneros Action e Sports."
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        "<div class=\"alert alert-block alert-success\">\n",
        "<b> Comentário do revisor: </b> <a class=\"tocSkip\"></a>\n",
        "\n",
        "Bom trabalho com a conclusão final. Muito bem estruturado, resumindo os principais resultados do estudo.\n",
        "</div>"
      ]
    }
  ],
  "metadata": {
    "kernelspec": {
      "display_name": "Python 3",
      "language": "python",
      "name": "python3"
    },
    "language_info": {
      "codemirror_mode": {
        "name": "ipython",
        "version": 3
      },
      "file_extension": ".py",
      "mimetype": "text/x-python",
      "name": "python",
      "nbconvert_exporter": "python",
      "pygments_lexer": "ipython3",
      "version": "3.12.5"
    },
    "toc": {
      "base_numbering": 1,
      "nav_menu": {},
      "number_sections": true,
      "sideBar": true,
      "skip_h1_title": true,
      "title_cell": "Table of Contents",
      "title_sidebar": "Contents",
      "toc_cell": false,
      "toc_position": {},
      "toc_section_display": true,
      "toc_window_display": false
    }
  },
  "nbformat": 4,
  "nbformat_minor": 2
}


=== DIRETÓRIO: Sprints\sprint 6\data ===


=== DIRETÓRIO: Sprints\sprint 8 ===


=== DIRETÓRIO: Sprints\sprint 8\dados ===

--- ARQUIVO: Sprints\sprint 8\sprint 8.ipynb (sem output) ---
{
  "cells": [
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {},
      "outputs": [],
      "source": [
        "import pandas as pd\n",
        "import numpy as np\n",
        "import matplotlib.pyplot as plt\n",
        "import seaborn as sns\n"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {},
      "outputs": [],
      "source": [
        "df_cost = pd.read_csv('dados/costs_us.csv ')\n",
        "df_orders = pd.read_csv('dados/orders_log_us.csv')\n",
        "df_visits = pd.read_csv('dados/visits_log_us.csv')"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        "---\n",
        "### Analizando cost\n",
        "A tabela costs (dados sobre as despesas com marketing):\n",
        "\n",
        "- source_id — identificador da origem de anúncio\n",
        "- dt — data\n",
        "- costs — despesas com esta origem de anúncio neste dia\n",
        "\n",
        "#### Mudanças\n",
        "Tabela dt para data\n",
        "\n",
        "##### nome novo das colunas\n",
        "- id\n",
        "- date\n",
        "- cost"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {},
      "outputs": [],
      "source": [
        "df_cost.info()\n",
        "df_cost.head()"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {},
      "outputs": [],
      "source": [
        "# Renomeando as colunas\n",
        "df_cost.rename(columns={'source_id': 'id', 'dt': 'date', 'df_cost': 'cost'}, inplace=True)\n",
        "\n",
        "# Convertendo a coluna 'date' para datetime\n",
        "df_cost['date'] = pd.to_datetime(df_cost['date'])\n",
        "\n",
        "# Exibindo o resultado\n",
        "df_cost.info()\n",
        "df_cost.head()"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        "---\n",
        "### Analizando orders\n",
        "A tabela orders (dados sobre os pedidos):\n",
        "\n",
        "- Uid — identificador unívoco do usuário que faz um pedido\n",
        "- Buy Ts — data e hora do pedido\n",
        "- Revenue — a receita da Y.Afisha com o pedido\n",
        "\n",
        "#### Mudanças\n",
        "Coluna Buy Ts para DateFrame\n",
        "\n",
        "##### nome novo das colunas\n",
        "- buy_date\n",
        "- date\n",
        "- uid"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {},
      "outputs": [],
      "source": [
        "df_orders.info()\n",
        "df_orders.tail()"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {},
      "outputs": [],
      "source": [
        "# Renomeando as colunas\n",
        "df_orders.rename(columns={'Uid': 'uid', 'Buy Ts': 'buy_date', 'Revenue': 'revenue'}, inplace=True)\n",
        "\n",
        "# Convertendo a coluna 'buy_date' para datetime\n",
        "df_orders['buy_date'] = pd.to_datetime(df_orders['buy_date'])\n",
        "\n",
        "# Exibindo o resultado\n",
        "df_orders.info()\n",
        "df_orders.tail()"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        "---\n",
        "### Analizando visits\n",
        "A tabela visits (os logs do servidor com dados sobre os acessos ao site):\n",
        "\n",
        "- Uid — identificador unívoco do usuário\n",
        "- Device — dispositivo do usuário\n",
        "- Start Ts — data e hora do início da sessão\n",
        "- End Ts — data e hora do final da sessão\n",
        "- Source Id — identificador da origem do anúncio através do qual o usuário chegou\n",
        "\n",
        "#### Mudanças\n",
        "Coluna End ts, start Ts para DateFrame\n",
        "Coluna devise para category\n",
        "\n",
        "##### nome novo das colunas\n",
        "- device\n",
        "- end_date\n",
        "- id\n",
        "- start_date\n",
        "- uid"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {},
      "outputs": [],
      "source": [
        "df_visits.info()\n",
        "df_visits.head()"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {},
      "outputs": [],
      "source": [
        "# Renomeando as colunas\n",
        "df_visits.rename(columns={'Uid': 'uid', 'Device': 'device', 'Start Ts': 'start_date', 'End Ts': 'end_date', 'Source Id': 'id'}, inplace=True)\n",
        "\n",
        "# Convertendo as colunas de data para datetime\n",
        "df_visits['start_date'] = pd.to_datetime(df_visits['start_date'])\n",
        "df_visits['end_date'] = pd.to_datetime(df_visits['end_date'])\n",
        "\n",
        "# Convertendo a coluna 'device' para category\n",
        "df_visits['device'] = df_visits['device'].astype('category')\n",
        "\n",
        "# Exibindo o resultado\n",
        "df_visits.info()\n",
        "df_visits.head()"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {},
      "outputs": [],
      "source": [
        "df_visits.sample(10)\n"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        "Na tabela df_visits teve uma redução no tamanho de 3,4 megas"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {},
      "outputs": [],
      "source": [
        "#Quantas pessoas usam-no cada dia, semana e mês?\n",
        "# Criando a coluna 'week_start' com a data da segunda-feira daquela semana\n",
        "df_visits['week_start'] = df_visits['end_date'] - pd.to_timedelta(df_visits['end_date'].dt.weekday, unit='D')\n",
        "df_visits['week_start'] = df_visits['week_start'].dt.date\n",
        "\n",
        "# Agrupando por dia (usando apenas a parte da data) e calculando o número de usuários únicos em cada dia\n",
        "daily_users = df_visits.groupby(df_visits['end_date'].dt.date)['uid'].nunique()\n",
        "qts_pessoas_dia = daily_users.mean()\n",
        "\n",
        "# Agrupando por semana (coluna week_start) e calculando o número de usuários únicos em cada semana\n",
        "weekly_users = df_visits.groupby('week_start')['uid'].nunique()\n",
        "qts_pessoas_semana = weekly_users.mean()\n",
        "\n",
        "# Agrupando por mês e calculando o número de usuários únicos em cada mês\n",
        "monthly_users = df_visits.groupby(df_visits['end_date'].dt.to_period(\"M\"))['uid'].nunique()\n",
        "qts_pessoas_mes = monthly_users.mean()\n",
        "\n",
        "# Imprimindo as médias com duas casas decimais\n",
        "print(f\"\"\"O Y.Afisha em média tem:\n",
        "      - por dia: {qts_pessoas_dia:.0f} pessoas\n",
        "      - por semana: {qts_pessoas_semana:.0f} pessoas\n",
        "      - por mês: {qts_pessoas_mes:.0f} pessoas\"\"\")\n"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {},
      "outputs": [],
      "source": [
        "# Uso diário (DAU)\n",
        "dau = df_visits.groupby(df_visits['start_date'].dt.date)['uid'].nunique()\n",
        "dau.plot(title='Usuários Diários (DAU)')\n",
        "plt.show()\n",
        "\n",
        "# Uso semanal (WAU)\n",
        "wau = df_visits.resample('W', on='start_date')['uid'].nunique()\n",
        "wau.plot(title='Usuários Semanais (WAU)')\n",
        "plt.show()\n",
        "\n",
        "# Uso mensal (MAU)\n",
        "mau = df_visits.resample('M', on='start_date')['uid'].nunique()\n",
        "mau.plot(title='Usuários Mensais (MAU)')\n",
        "plt.show()"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {},
      "outputs": [],
      "source": [
        "#Quantas sessões ocorrem por dia? (um usuário pode realizar várias sessões).\n",
        "# Agrupando por dia (extraindo apenas a data de 'end_date') e contando as sessões\n",
        "daily_sessions = df_visits.groupby(df_visits['end_date'].dt.date).size()\n",
        "# Exibindo o número de sessões por dia\n",
        "print(\"Sessões por dia:\")\n",
        "print(daily_sessions)\n",
        "# Se você quiser calcular a média de sessões por dia:\n",
        "average_sessions = daily_sessions.mean()\n",
        "print(f\"\\nMédia de sessões por dia: {average_sessions.mean():.0f}\")"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {},
      "outputs": [],
      "source": [
        "985/906 -1"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {},
      "outputs": [],
      "source": [
        "sessoes_dia = df_visits.resample('D', on='start_date').size()\n",
        "sessoes_dia.plot(title='Sessões por Dia')\n",
        "plt.show()"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        "Um usuario em media pode fazer 2 sessões porém é raro(8%). "
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {},
      "outputs": [],
      "source": [
        "#Que comprimento tem cada sessão?\n",
        "t_das_sessões = (df_visits['end_date'] - df_visits['start_date'] ).dt.total_seconds()/60 \n",
        "print(t_das_sessões)\n",
        "print()\n",
        "print(f\"O tempo médio das sessões é:{t_das_sessões.mean():.0f}\")"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {},
      "outputs": [],
      "source": [
        "#Com que frequência os usuários voltam?\n",
        "\n",
        "# Ordenar o DataFrame por usuário e data de visita\n",
        "df_visits = df_visits.sort_values(by=['uid', 'start_date'])\n",
        "\n",
        "# Agrupar por usuário e selecionar a primeira e segunda visita de cada um\n",
        "primeira_segunda_visitas = df_visits.groupby('uid').head(2)\n",
        "\n",
        "# Calcular a diferença de tempo entre a primeira e a segunda visita\n",
        "primeira_segunda_visitas['time_diff'] = primeira_segunda_visitas.groupby('uid')['start_date'].diff()\n",
        "\n",
        "# Filtrar apenas as segundas visitas (onde há uma primeira visita anterior)\n",
        "segundas_visitas = primeira_segunda_visitas.dropna(subset=['time_diff'])\n",
        "\n",
        "# Calcular a porcentagem de usuários que retornaram da primeira para a segunda visita\n",
        "porcentagem_retorno_primeira_segunda = (len(segundas_visitas) / df_visits['uid'].nunique()) * 100\n",
        "\n",
        "print(f\"Porcentagem de usuários que retornaram da primeira para a segunda visita: {porcentagem_retorno_primeira_segunda:.0f}%\")"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {},
      "outputs": [],
      "source": [
        "# Quando as pessoas começam a comprar?\n",
        "# 1. Identificar a primeira visita de cada usuário\n",
        "first_visit = df_visits.groupby('uid')['start_date'].min()\n",
        "\n",
        "# 2. Identificar a primeira compra de cada usuário\n",
        "first_purchase = df_orders.groupby('uid')['buy_date'].min()\n",
        "\n",
        "# 3. Calcular a diferença entre a primeira visita e a primeira compra\n",
        "# Para garantir que as duas colunas estejam no formato datetime\n",
        "first_visit = pd.to_datetime(first_visit)\n",
        "first_purchase = pd.to_datetime(first_purchase)\n",
        "\n",
        "# Calcular a diferença de dias entre a primeira visita e a primeira compra\n",
        "days_to_first_purchase = (first_purchase - first_visit).dt.days\n",
        "\n",
        "def replace_negative_days(x):\n",
        "    if x >= 0:  # Se o valor for positivo ou zero\n",
        "        return x  # Mantém o valor original\n",
        "    else:  # Se o valor for negativo\n",
        "        return 0  # Substitui por 0\n",
        "# Se a diferença for 0, será Dia 0; Se for 1, será Dia 1, e assim por diante.\n",
        "days_to_first_purchase_label = days_to_first_purchase.apply(replace_negative_days)\n",
        "\n",
        "# Exibir o resultado\n",
        "print(f\"Em media começam a comprar em {days_to_first_purchase_label.mean():.0f} dias\")\n"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {},
      "outputs": [],
      "source": [
        "\n",
        "# Criar coluna 'cohort' com o mês do primeiro acesso de cada usuário\n",
        "df_visits['cohort'] = df_visits.groupby('uid')['start_date'].transform('min').dt.to_period('M')\n",
        "\n",
        "# Calcular a diferença em meses entre a data da sessão e a coorte\n",
        "df_visits['month_offset'] = (df_visits['start_date'].dt.to_period('M') - df_visits['cohort']).apply(lambda x: x.n)\n",
        "# Agrupar por coorte e offset mensal\n",
        "cohort_data = df_visits.groupby(['cohort', 'month_offset'])['uid'].nunique().reset_index()\n",
        "\n",
        "# Criar pivot table para visualização\n",
        "cohort_pivot = cohort_data.pivot_table(index='cohort', columns='month_offset', values='uid', aggfunc='sum')\n",
        "\n",
        "# Calcular a retenção como porcentagem do mês inicial\n",
        "cohort_size = cohort_pivot[0]  # Número de usuários no mês 0 (coorte)\n",
        "retention_matrix = cohort_pivot.divide(cohort_size, axis=0) * 100  # Retenção em %\n",
        "plt.figure(figsize=(12, 8))\n",
        "sns.heatmap(\n",
        "    retention_matrix,\n",
        "    annot=True,\n",
        "    fmt='.1f',\n",
        "    cmap='Blues',\n",
        "    linewidths=0.5,\n",
        "    mask=retention_matrix.isnull()\n",
        ")\n",
        "plt.title('Retenção Mensal por Coorte (%) - Corrigido')\n",
        "plt.xlabel('Meses após a Coorte')\n",
        "plt.ylabel('Coorte (Mês/Ano)')\n",
        "plt.show()"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        "Dos 23% que voltam a comprar tendem a voltar dps de 3 dias."
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {},
      "outputs": [],
      "source": [
        "# Quantos pedidos os clientes fazem durante um determinado período de tempo?\n",
        "\n",
        "\n",
        "pedidos_dia = df_orders.groupby(df_orders['buy_date'].dt.date)['uid'].nunique().mean()\n",
        "\n",
        "# 2. Número médio de pessoas por semana\n",
        "pedidos_semana = df_orders.groupby(df_orders['buy_date'].dt.isocalendar().week)['uid'].nunique().mean()\n",
        "\n",
        "# 3. Número médio de pessoas por mês\n",
        "pedidos_mes = df_orders.groupby(df_orders['buy_date'].dt.to_period('M'))['uid'].nunique().mean()\n",
        "\n",
        "# Exibir os resultados\n",
        "print(f\"\"\"Pedidos em média :\n",
        "      - por dia: {pedidos_dia:.0f} pessoas\n",
        "      - por semana: {pedidos_semana:.0f} pessoas\n",
        "      - por mês: {pedidos_mes:.0f} pessoas\"\"\")\n"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {},
      "outputs": [],
      "source": [
        "# Primeiro acesso e primeira compra por usuário\n",
        "primeiro_acesso = df_visits.groupby('uid')['start_date'].min().reset_index()\n",
        "primeira_compra = df_orders.groupby('uid')['buy_date'].min().reset_index()\n",
        "\n",
        "# Combinar dados e calcular diferença\n",
        "df_conversao = pd.merge(primeiro_acesso, primeira_compra, on='uid', how='inner')\n",
        "df_conversao['dias_conversao'] = (df_conversao['buy_date'] - df_conversao['start_date']).dt.days\n",
        "\n",
        "# Distribuição do tempo de conversão\n",
        "plt.hist(df_conversao['dias_conversao'], bins=30, edgecolor='k')\n",
        "plt.title('Distribuição do Tempo para Primeira Compra')\n",
        "plt.xlabel('Dias após o Registro')\n",
        "plt.ylabel('Número de Usuários')\n",
        "plt.show()"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {},
      "outputs": [],
      "source": [
        "# Qual é o volume médio de uma compra?\n",
        "\n",
        "volume_medio_compra = df_orders['revenue'].mean()\n",
        "volume_mediano_compra = df_orders['revenue'].median()\n",
        "\n",
        "\n",
        "print(f\"\"\"O volume médio de uma compra é: {volume_medio_compra:.2f}\n",
        "O volume mediano de uma compras é: {volume_mediano_compra:.2f}\"\"\")"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        "Média de 5 e mediana de 2,50 indicam que 50% gastam até 2,50, enquanto alguns clientes com valores altos elevam a média."
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {},
      "outputs": [],
      "source": [
        "# Quanto dinheiro eles trazem para a empresa (LTV)?\n",
        "import pandas as pd\n",
        "\n",
        "# Definir margem bruta\n",
        "margem_bruta = 0.3\n",
        "\n",
        "# Calcular o LTV, excluindo valores zero e nulos\n",
        "ltv = (\n",
        "    df_orders.groupby('uid')['revenue']\n",
        "    .sum()                           # Soma da receita por usuário\n",
        "    .replace(0.0, pd.NA)             # Substitui zeros por NA (para excluir)\n",
        "    .dropna()                        # Remove todos os NA (zeros e nulos originais)\n",
        "    * margem_bruta                   # Aplica a margem bruta\n",
        ")\n",
        "\n",
        "# Calcular o LTV médio ajustado\n",
        "ltv_ajustado = ltv.mean()\n",
        "\n",
        "# Resultados\n",
        "print(f\"\"\"O LTV (excluindo clientes sem receita) é: \n",
        "{ltv}\n",
        "\n",
        "O valor médio que um cliente traz (considerando apenas compradores) é: {ltv_ajustado:.2f}\"\"\")\n"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        "Em toda sua vida um cliente gasta em média 2.07, levando em conta uma margem bruta de 30%."
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {},
      "outputs": [],
      "source": [
        "#Quanto dinheiro foi gasto? No total/por origem/ao longo do tempo\n",
        "\n",
        "# 1. Total de dinheiro gasto\n",
        "total_cost = df_cost['costs'].sum()\n",
        "print(f\"Total de dinheiro gasto: {total_cost:.2f}\")\n",
        "\n",
        "# 2. Dinheiro gasto por origem (ID)\n",
        "cost_by_id = df_cost.groupby('id')['costs'].sum().reset_index()\n",
        "print(\"\\nDinheiro gasto por origem (ID):\")\n",
        "print(cost_by_id)\n",
        "\n",
        "# 3. Dinheiro gasto ao longo do tempo\n",
        "df_cost['date'] = pd.to_datetime(df_cost['date'])  # Garantir que a coluna 'date' seja do tipo datetime\n",
        "cost_over_time = df_cost.groupby('date')['costs'].sum().reset_index()\n",
        "print(\"\\nDinheiro gasto ao longo do tempo:\")\n",
        "print(cost_over_time)"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {},
      "outputs": [],
      "source": [
        "custos_por_origem = df_cost.groupby('id')['costs'].sum()\n",
        "custos_por_origem.plot(kind='bar', title='Custos por Origem')\n",
        "plt.show()"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {},
      "outputs": [],
      "source": [
        "#Quanto custou a aquisição de clientes para cada origem?\n",
        "clientes_por_origem = df_visits.groupby('id')['uid'].nunique().reset_index()\n",
        "clientes_por_origem.columns = ['id', 'num_clientes']\n",
        "\n",
        "# Juntar com df_cost para obter o custo total por origem\n",
        "custo_por_origem = df_cost.groupby('id')['costs'].sum().reset_index()\n",
        "\n",
        "# Calcular o CAC por origem\n",
        "cac_por_origem = pd.merge(custo_por_origem, clientes_por_origem, on='id')\n",
        "cac_por_origem['CAC'] = cac_por_origem['costs'] / cac_por_origem['num_clientes']\n",
        "\n",
        "# Exibir o resultado\n",
        "print(\"Custo de Aquisição de Clientes (CAC) por origem:\")\n",
        "print(cac_por_origem[['id', 'CAC']])"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {},
      "outputs": [],
      "source": [
        "# Usuários adquiridos por origem (primeiro acesso)\n",
        "usuarios_por_origem = df_visits.groupby('id')['uid'].nunique()\n",
        "\n",
        "# CAC por origem\n",
        "cac = custos_por_origem / usuarios_por_origem\n",
        "cac.plot(kind='bar', title='CAC por Origem')\n",
        "plt.show()"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {},
      "outputs": [],
      "source": [
        "#Os investimentos valeram a pena? (ROI)\n",
        "# 1. Calcular o custo total de aquisição\n",
        "custo_total = df_cost['costs'].sum()\n",
        "print(f\"Custo total de aquisição: {custo_total:.2f}\")\n",
        "\n",
        "# 2. Calcular a receita total gerada\n",
        "receita_total = df_orders['revenue'].sum()\n",
        "print(f\"Receita total gerada: {receita_total:.2f}\")\n",
        "\n",
        "# 3. Calcular o ROI\n",
        "roi = (receita_total - custo_total) / custo_total * 100\n",
        "print(f\"ROI: {roi:.2f}%\")\n",
        "\n",
        "# 4. Verificar se o investimento valeu a pena\n",
        "if roi > 0:\n",
        "    print(\"O investimento valeu a pena! (ROI positivo)\")\n",
        "else:\n",
        "    print(\"O investimento não valeu a pena. (ROI negativo)\")"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {},
      "outputs": [],
      "source": [
        "# Receita por origem (considerando primeiro acesso)\n",
        "usuarios_compra = df_visits.drop_duplicates('uid').merge(df_orders, on='uid')\n",
        "receita_por_origem = usuarios_compra.groupby('id')['revenue'].sum()\n",
        "roi = (receita_por_origem - custos_por_origem) / custos_por_origem\n",
        "roi.plot(kind='bar', title='ROI por Origem')\n",
        "plt.show()"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {},
      "outputs": [],
      "source": [
        "total_visits = len(df_visits)\n",
        "total_orders = len(df_orders)\n",
        "conversion_rate_geral = (total_orders / total_visits) * 100\n",
        "\n",
        "visits_por_origem = df_visits.groupby('id')['uid'].nunique()\n",
        "orders_por_origem = df_orders.merge(df_visits[['uid', 'id']], on='uid').groupby('id')['uid'].count()\n",
        "conversion_rate_por_origem = (orders_por_origem / visits_por_origem) * 100\n",
        "\n",
        "plt.figure(figsize=(10, 6))\n",
        "plt.bar(['Visitas', 'Pedidos'], [total_visits, total_orders], color=['skyblue', 'lightcoral'])\n",
        "plt.title('Funil de Conversão Geral (Visitas -> Pedidos)')\n",
        "plt.ylabel('Número')\n",
        "plt.show()\n"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        "## Conclusão e Recomendações para a Estratégia de Marketing da Y.Afisha\n",
        "\n",
        "**Sumário Executivo:**\n",
        "\n",
        "A análise de marketing da Y.Afisha revela que, apesar de uma base de usuários engajada, o **ROI geral das campanhas de marketing é negativo (-23.42%)**.  Isso indica que os gastos com marketing superam a receita gerada, sinalizando a necessidade urgente de otimização da estratégia.\n",
        "\n",
        "**Recomendações Estratégicas:**\n",
        "\n",
        "1.  **Redução do Orçamento de Marketing:**\n",
        "    *   **Justificativa:** O ROI negativo demonstra que o investimento atual não é sustentável. Reduzir o orçamento geral é crucial para evitar maiores perdas financeiras.\n",
        "    *   **Ação:**  Recomendamos uma **redução conservadora no orçamento total de marketing**, reavaliando os gastos em cada canal para maximizar a eficiência com recursos limitados.\n",
        "\n",
        "2.  **Realocação Estratégica de Recursos para Canais de Baixo CAC:**\n",
        "    *   **Justificativa:** As origens **9 e 10** apresentam o menor Custo de Aquisição de Cliente (CAC), indicando maior eficiência na conversão de usuários em clientes a um custo menor.\n",
        "    *   **Ação:**  **Aumentar o investimento nas origens 9 e 10**, que demonstraram ser os canais mais custo-efetivos. Explorar e otimizar ainda mais esses canais pode gerar um melhor retorno sobre o investimento.\n",
        "\n",
        "3.  **Reavaliação e Otimização de Canais de Alto CAC:**\n",
        "    *   **Justificativa:** As origens **2 e 3** apresentam os CACs mais altos e, portanto, são menos eficientes no momento.\n",
        "    *   **Ação:**\n",
        "        *   **Investigar e otimizar as campanhas nas origens 2 e 3:** Analisar detalhadamente as estratégias de marketing nesses canais para identificar pontos de ineficiência e oportunidades de melhoria. Isso pode incluir a revisão de segmentação de público, criativos de anúncios, e páginas de destino.\n",
        "        *   **Considerar a suspensão ou redução drástica do investimento:** Se a otimização não apresentar resultados significativos em um período determinado, recomenda-se **suspender ou reduzir drasticamente o investimento nesses canais**, direcionando os recursos para origens mais promissoras.\n",
        "\n",
        "4.  **Foco na Melhoria do Engajamento e Valor da Compra:**\n",
        "    *   **Justificativa:** Apesar da boa retenção inicial, a curta duração das sessões e o baixo volume médio de compra limitam o LTV dos clientes.\n",
        "    *   **Ação:**\n",
        "        *   **Aumentar o engajamento nas sessões:** Implementar estratégias para aumentar o tempo de permanência dos usuários no site ou aplicativo, como melhorias na experiência do usuário, conteúdo mais atraente e recomendações personalizadas.\n",
        "        *   **Incentivar compras de maior valor:** Desenvolver táticas para aumentar o valor médio das compras, como promoções para compras acima de um determinado valor, ofertas de pacotes, ou destaque de produtos de maior receita.\n",
        "\n",
        "**Métricas Chave e Justificativas:**\n",
        "\n",
        "*   **ROI (Retorno sobre Investimento):**  Métrica primordial para avaliar a rentabilidade geral do investimento em marketing. O ROI negativo (-23.42%) sinaliza que a estratégia atual não é economicamente viável.\n",
        "*   **CAC (Custo de Aquisição de Cliente):** Essencial para entender a eficiência de cada canal de marketing. A priorização de canais com CAC mais baixo (9 e 10) visa otimizar o custo por cliente adquirido.\n",
        "*   **LTV (Lifetime Value):**  Importante para medir o valor a longo prazo de cada cliente. Aumentar o LTV, mesmo que o CAC seja mantido, pode melhorar a rentabilidade geral. As ações recomendadas para aumentar o engajamento e o valor da compra visam diretamente este aumento do LTV.\n",
        "*   **DAU/WAU/MAU e Retenção:** Indicam o engajamento da base de usuários. Embora os números sejam relativamente bons, a otimização da experiência do usuário pode aumentar ainda mais o engajamento e, consequentemente, a conversão e a receita.\n",
        "*   **Tempo de Sessão:**  A curta duração média das sessões (11 minutos) sugere que há espaço para melhorar a experiência do usuário e o engajamento dentro das sessões, com o objetivo de aumentar a conversão e o valor da compra.\n",
        "*   **Tempo até a Primeira Compra:** O curto período de 3 dias sugere um potencial de conversão rápida. As campanhas de marketing podem ser otimizadas para capitalizar essa janela de oportunidade e incentivar a primeira compra de novos usuários.\n",
        "*   **Volume Médio de Compra e Mediana:**  O baixo volume médio e mediana indicam a necessidade de estratégias para aumentar o valor das transações, o que impactará diretamente na receita e no LTV.\n",
        "\n",
        "**Conclusão Final:**\n",
        "\n",
        "É imperativo que a Y.Afisha adote uma abordagem mais estratégica e focada em resultados para suas campanhas de marketing. A realocação do orçamento para canais mais eficientes, combinada com esforços para melhorar o engajamento do usuário e o valor da compra, são passos cruciais para reverter o ROI negativo e construir uma estratégia de marketing sustentável e lucrativa a longo prazo. A monitorização contínua das métricas chave e a realização de testes A/B para otimizar as campanhas são fundamentais para o sucesso futuro."
      ]
    }
  ],
  "metadata": {
    "kernelspec": {
      "display_name": "Python 3",
      "language": "python",
      "name": "python3"
    },
    "language_info": {
      "codemirror_mode": {
        "name": "ipython",
        "version": 3
      },
      "file_extension": ".py",
      "mimetype": "text/x-python",
      "name": "python",
      "nbconvert_exporter": "python",
      "pygments_lexer": "ipython3",
      "version": "3.12.5"
    }
  },
  "nbformat": 4,
  "nbformat_minor": 2
}

--- ARQUIVO: Sprints\sprint 8\sprint8.ipynb (sem output) ---
{
  "cells": [
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        "# Revisão de código \n",
        "\n",
        "Olá! \n",
        "\n",
        "Meu nome é Suelen. Estou feliz em revisar seu projeto hoje!\n",
        "\n",
        "Quando vejo um erro pela primeira vez, apenas aponto. Deixarei você encontrá-lo e corrigi-lo sozinho. Além disso, ao longo do texto, farei algumas observações sobre melhorias no código e também farei comentários sobre suas percepções sobre o assunto. Mas se você ainda não consegue lidar com essa tarefa, darei uma dica mais precisa na próxima iteração e também alguns exemplos práticos. Estarei aberto a feedbacks e discussões sobre o tema.\n",
        "\n",
        "Você pode encontrar meus comentários em caixas verdes, amarelas ou vermelhas como estas:\n",
        "\n",
        "\n",
        "<div class=\"alert alert-block alert-success\">\n",
        "<b>Comentário: </b> <a class=\"tocSkip\"></a>\n",
        "\n",
        "Sucesso. Tudo está correto.\n",
        "</div>\n",
        "\n",
        "<div class=\"alert alert-block alert-warning\">\n",
        "<b>Comentário: </b> <a class=\"tocSkip\"></a>\n",
        "\n",
        "Observações. Algumas recomendações.\n",
        "</div>\n",
        "\n",
        "<div class=\"alert alert-block alert-danger\">\n",
        "\n",
        "<b>Comentário: </b> <a class=\"tocSkip\"></a>\n",
        "\n",
        "O bloco requer algumas correções. O trabalho não pode ser aceito com os comentários vermelhos.\n",
        "</div>\n",
        "\n",
        "Você pode me responder usando isto:\n",
        "\n",
        "<div class=\"alert alert-block alert-info\">\n",
        "<b>Resposta do aluno.  \n",
        "    </b> <a class=\"tocSkip\"></a>\n",
        "</div>\n",
        "\n"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {},
      "outputs": [],
      "source": []
    },
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        "<div class=\"alert alert-block alert-danger\">\n",
        "\n",
        "<b>Comentário geral: </b> <a class=\"tocSkip\"></a>\n",
        "\n",
        "Parabéns pela conclusão do projeto, Jonathas !😊. Seu projeto já está com uma qualidade excelente. Gostei muito da sua análise temporal, no entanto o projeto exige analise temporal em coortes. Adicionei comentários com dicas de como resolvermos essas análises. Os pontos necessários de ajustes são: \n",
        "\n",
        "    - Cálculo de LTV por coortes \n",
        "    - Cálculo CAC e ROI por coortes \n",
        "    \n",
        "Boa sorte! Estamos próximos da aprovação!🤞 \n",
        "\n",
        "Em caso de dúvidas, não hesite em nos perguntar!\n",
        "</div>"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {},
      "outputs": [],
      "source": [
        "import pandas as pd\n",
        "import numpy as np\n",
        "import matplotlib.pyplot as plt\n",
        "import seaborn as sns\n"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {},
      "outputs": [],
      "source": [
        "df_cost = pd.read_csv('dados/costs_us.csv ')\n",
        "df_orders = pd.read_csv('dados/orders_log_us.csv')\n",
        "df_visits = pd.read_csv('dados/visits_log_us.csv')"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        "---\n",
        "### Analizando cost\n",
        "A tabela costs (dados sobre as despesas com marketing):\n",
        "\n",
        "- source_id — identificador da origem de anúncio\n",
        "- dt — data\n",
        "- costs — despesas com esta origem de anúncio neste dia\n",
        "\n",
        "#### Mudanças\n",
        "Tabela dt para data\n",
        "\n",
        "##### nome novo das colunas\n",
        "- id\n",
        "- date\n",
        "- cost"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {},
      "outputs": [],
      "source": [
        "df_cost.info()\n",
        "df_cost.head()"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {},
      "outputs": [],
      "source": [
        "# Renomeando as colunas\n",
        "df_cost.rename(columns={'source_id': 'id', 'dt': 'date', 'df_cost': 'cost'}, inplace=True)\n",
        "\n",
        "# Convertendo a coluna 'date' para datetime\n",
        "df_cost['date'] = pd.to_datetime(df_cost['date'])\n",
        "\n",
        "# Exibindo o resultado\n",
        "df_cost.info()\n",
        "df_cost.head()"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        "---\n",
        "### Analizando orders\n",
        "A tabela orders (dados sobre os pedidos):\n",
        "\n",
        "- Uid — identificador unívoco do usuário que faz um pedido\n",
        "- Buy Ts — data e hora do pedido\n",
        "- Revenue — a receita da Y.Afisha com o pedido\n",
        "\n",
        "#### Mudanças\n",
        "Coluna Buy Ts para DateFrame\n",
        "\n",
        "##### nome novo das colunas\n",
        "- buy_date\n",
        "- date\n",
        "- uid"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {},
      "outputs": [],
      "source": [
        "df_orders.info()\n",
        "df_orders.tail()"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {},
      "outputs": [],
      "source": [
        "# Renomeando as colunas\n",
        "df_orders.rename(columns={'Uid': 'uid', 'Buy Ts': 'buy_date', 'Revenue': 'revenue'}, inplace=True)\n",
        "\n",
        "# Convertendo a coluna 'buy_date' para datetime\n",
        "df_orders['buy_date'] = pd.to_datetime(df_orders['buy_date'])\n",
        "\n",
        "# Exibindo o resultado\n",
        "df_orders.info()\n",
        "df_orders.tail()"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        "---\n",
        "### Analizando visits\n",
        "A tabela visits (os logs do servidor com dados sobre os acessos ao site):\n",
        "\n",
        "- Uid — identificador unívoco do usuário\n",
        "- Device — dispositivo do usuário\n",
        "- Start Ts — data e hora do início da sessão\n",
        "- End Ts — data e hora do final da sessão\n",
        "- Source Id — identificador da origem do anúncio através do qual o usuário chegou\n",
        "\n",
        "#### Mudanças\n",
        "Coluna End ts, start Ts para DateFrame\n",
        "Coluna devise para category\n",
        "\n",
        "##### nome novo das colunas\n",
        "- device\n",
        "- end_date\n",
        "- id\n",
        "- start_date\n",
        "- uid"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {},
      "outputs": [],
      "source": [
        "df_visits.info()\n",
        "df_visits.head()"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {},
      "outputs": [],
      "source": [
        "# Renomeando as colunas\n",
        "df_visits.rename(columns={'Uid': 'uid', 'Device': 'device', 'Start Ts': 'start_date', 'End Ts': 'end_date', 'Source Id': 'id'}, inplace=True)\n",
        "\n",
        "# Convertendo as colunas de data para datetime\n",
        "df_visits['start_date'] = pd.to_datetime(df_visits['start_date'])\n",
        "df_visits['end_date'] = pd.to_datetime(df_visits['end_date'])\n",
        "\n",
        "# Convertendo a coluna 'device' para category\n",
        "df_visits['device'] = df_visits['device'].astype('category')\n",
        "\n",
        "# Exibindo o resultado\n",
        "df_visits.info()\n",
        "df_visits.head()"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {},
      "outputs": [],
      "source": [
        "df_visits.sample(10)\n"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        "Na tabela df_visits teve uma redução no tamanho de 3,4 megas"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {},
      "outputs": [],
      "source": [
        "#Quantas pessoas usam-no cada dia, semana e mês?\n",
        "# Criando a coluna 'week_start' com a data da segunda-feira daquela semana\n",
        "df_visits['week_start'] = df_visits['end_date'] - pd.to_timedelta(df_visits['end_date'].dt.weekday, unit='D')\n",
        "df_visits['week_start'] = df_visits['week_start'].dt.date\n",
        "\n",
        "# Agrupando por dia (usando apenas a parte da data) e calculando o número de usuários únicos em cada dia\n",
        "daily_users = df_visits.groupby(df_visits['end_date'].dt.date)['uid'].nunique()\n",
        "qts_pessoas_dia = daily_users.mean()\n",
        "\n",
        "# Agrupando por semana (coluna week_start) e calculando o número de usuários únicos em cada semana\n",
        "weekly_users = df_visits.groupby('week_start')['uid'].nunique()\n",
        "qts_pessoas_semana = weekly_users.mean()\n",
        "\n",
        "# Agrupando por mês e calculando o número de usuários únicos em cada mês\n",
        "monthly_users = df_visits.groupby(df_visits['end_date'].dt.to_period(\"M\"))['uid'].nunique()\n",
        "qts_pessoas_mes = monthly_users.mean()\n",
        "\n",
        "# Imprimindo as médias com duas casas decimais\n",
        "print(f\"\"\"O Y.Afisha em média tem:\n",
        "      - por dia: {qts_pessoas_dia:.0f} pessoas\n",
        "      - por semana: {qts_pessoas_semana:.0f} pessoas\n",
        "      - por mês: {qts_pessoas_mes:.0f} pessoas\"\"\")\n"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {},
      "outputs": [],
      "source": [
        "# Uso diário (DAU)\n",
        "dau = df_visits.groupby(df_visits['start_date'].dt.date)['uid'].nunique()\n",
        "dau.plot(title='Usuários Diários (DAU)')\n",
        "plt.show()\n",
        "\n",
        "# Uso semanal (WAU)\n",
        "wau = df_visits.resample('W', on='start_date')['uid'].nunique()\n",
        "wau.plot(title='Usuários Semanais (WAU)')\n",
        "plt.show()\n",
        "\n",
        "# Uso mensal (MAU)\n",
        "mau = df_visits.resample('M', on='start_date')['uid'].nunique()\n",
        "mau.plot(title='Usuários Mensais (MAU)')\n",
        "plt.show()"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {},
      "outputs": [],
      "source": [
        "#Quantas sessões ocorrem por dia? (um usuário pode realizar várias sessões).\n",
        "# Agrupando por dia (extraindo apenas a data de 'end_date') e contando as sessões\n",
        "daily_sessions = df_visits.groupby(df_visits['end_date'].dt.date).size()\n",
        "# Exibindo o número de sessões por dia\n",
        "print(\"Sessões por dia:\")\n",
        "print(daily_sessions)\n",
        "# Se você quiser calcular a média de sessões por dia:\n",
        "average_sessions = daily_sessions.mean()\n",
        "print(f\"\\nMédia de sessões por dia: {average_sessions.mean():.0f}\")"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {},
      "outputs": [],
      "source": [
        "985/906 -1"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {},
      "outputs": [],
      "source": [
        "sessoes_dia = df_visits.resample('D', on='start_date').size()\n",
        "sessoes_dia.plot(title='Sessões por Dia')\n",
        "plt.show()"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        "Um usuario em media pode fazer 2 sessões porém é raro(8%). "
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {},
      "outputs": [],
      "source": [
        "#Que comprimento tem cada sessão?\n",
        "t_das_sessões = (df_visits['end_date'] - df_visits['start_date'] ).dt.total_seconds()/60 \n",
        "print(t_das_sessões)\n",
        "print()\n",
        "print(f\"O tempo médio das sessões é:{t_das_sessões.mean():.0f}\")"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        "<div class=\"alert alert-block alert-success\">\n",
        "<b> Comentário: </b> <a class=\"tocSkip\"></a>\n",
        "    \n",
        "- O import das bibliotecas foi feito de forma correta e em uma célula separada\n",
        "- Os dados foram carregados corretamente.\n",
        "- Foram utilizados comandos como `head()`e `info()`.\n",
        "- Bom uso das visualizações gráficas! É uma ótima forma de enriquecer ainda mais a análise exploratória dos dados.\n",
        "- Aluno adicionou comentários com suas observações osbre os dados.\n",
        "</div>"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {},
      "outputs": [],
      "source": [
        "#Com que frequência os usuários voltam?\n",
        "\n",
        "# Ordenar o DataFrame por usuário e data de visita\n",
        "df_visits = df_visits.sort_values(by=['uid', 'start_date'])\n",
        "\n",
        "# Agrupar por usuário e selecionar a primeira e segunda visita de cada um\n",
        "primeira_segunda_visitas = df_visits.groupby('uid').head(2)\n",
        "\n",
        "# Calcular a diferença de tempo entre a primeira e a segunda visita\n",
        "primeira_segunda_visitas['time_diff'] = primeira_segunda_visitas.groupby('uid')['start_date'].diff()\n",
        "\n",
        "# Filtrar apenas as segundas visitas (onde há uma primeira visita anterior)\n",
        "segundas_visitas = primeira_segunda_visitas.dropna(subset=['time_diff'])\n",
        "\n",
        "# Calcular a porcentagem de usuários que retornaram da primeira para a segunda visita\n",
        "porcentagem_retorno_primeira_segunda = (len(segundas_visitas) / df_visits['uid'].nunique()) * 100\n",
        "\n",
        "print(f\"Porcentagem de usuários que retornaram da primeira para a segunda visita: {porcentagem_retorno_primeira_segunda:.0f}%\")"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {},
      "outputs": [],
      "source": [
        "# Quando as pessoas começam a comprar?\n",
        "# 1. Identificar a primeira visita de cada usuário\n",
        "first_visit = df_visits.groupby('uid')['start_date'].min()\n",
        "\n",
        "# 2. Identificar a primeira compra de cada usuário\n",
        "first_purchase = df_orders.groupby('uid')['buy_date'].min()\n",
        "\n",
        "# 3. Calcular a diferença entre a primeira visita e a primeira compra\n",
        "# Para garantir que as duas colunas estejam no formato datetime\n",
        "first_visit = pd.to_datetime(first_visit)\n",
        "first_purchase = pd.to_datetime(first_purchase)\n",
        "\n",
        "# Calcular a diferença de dias entre a primeira visita e a primeira compra\n",
        "days_to_first_purchase = (first_purchase - first_visit).dt.days\n",
        "\n",
        "def replace_negative_days(x):\n",
        "    if x >= 0:  # Se o valor for positivo ou zero\n",
        "        return x  # Mantém o valor original\n",
        "    else:  # Se o valor for negativo\n",
        "        return 0  # Substitui por 0\n",
        "# Se a diferença for 0, será Dia 0; Se for 1, será Dia 1, e assim por diante.\n",
        "days_to_first_purchase_label = days_to_first_purchase.apply(replace_negative_days)\n",
        "\n",
        "# Exibir o resultado\n",
        "print(f\"Em media começam a comprar em {days_to_first_purchase_label.mean():.0f} dias\")\n"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {},
      "outputs": [],
      "source": [
        "\n",
        "# Criar coluna 'cohort' com o mês do primeiro acesso de cada usuário\n",
        "df_visits['cohort'] = df_visits.groupby('uid')['start_date'].transform('min').dt.to_period('M')\n",
        "\n",
        "# Calcular a diferença em meses entre a data da sessão e a coorte\n",
        "df_visits['month_offset'] = (df_visits['start_date'].dt.to_period('M') - df_visits['cohort']).apply(lambda x: x.n)\n",
        "# Agrupar por coorte e offset mensal\n",
        "cohort_data = df_visits.groupby(['cohort', 'month_offset'])['uid'].nunique().reset_index()\n",
        "\n",
        "# Criar pivot table para visualização\n",
        "cohort_pivot = cohort_data.pivot_table(index='cohort', columns='month_offset', values='uid', aggfunc='sum')\n",
        "\n",
        "# Calcular a retenção como porcentagem do mês inicial\n",
        "cohort_size = cohort_pivot[0]  # Número de usuários no mês 0 (coorte)\n",
        "retention_matrix = cohort_pivot.divide(cohort_size, axis=0) * 100  # Retenção em %\n",
        "plt.figure(figsize=(12, 8))\n",
        "sns.heatmap(\n",
        "    retention_matrix,\n",
        "    annot=True,\n",
        "    fmt='.1f',\n",
        "    cmap='Blues',\n",
        "    linewidths=0.5,\n",
        "    mask=retention_matrix.isnull()\n",
        ")\n",
        "plt.title('Retenção Mensal por Coorte (%) - Corrigido')\n",
        "plt.xlabel('Meses após a Coorte')\n",
        "plt.ylabel('Coorte (Mês/Ano)')\n",
        "plt.show()"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        "Dos 23% que voltam a comprar tendem a voltar dps de 3 dias."
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        "<div class=\"alert alert-block alert-success\">\n",
        "<b> Comentário: </b> <a class=\"tocSkip\"></a>\n",
        "    \n",
        "Taxa de retenção calculada corretamente.\n",
        "</div>"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {},
      "outputs": [],
      "source": [
        "# Quantos pedidos os clientes fazem durante um determinado período de tempo?\n",
        "\n",
        "\n",
        "pedidos_dia = df_orders.groupby(df_orders['buy_date'].dt.date)['uid'].nunique().mean()\n",
        "\n",
        "# 2. Número médio de pessoas por semana\n",
        "pedidos_semana = df_orders.groupby(df_orders['buy_date'].dt.isocalendar().week)['uid'].nunique().mean()\n",
        "\n",
        "# 3. Número médio de pessoas por mês\n",
        "pedidos_mes = df_orders.groupby(df_orders['buy_date'].dt.to_period('M'))['uid'].nunique().mean()\n",
        "\n",
        "# Exibir os resultados\n",
        "print(f\"\"\"Pedidos em média :\n",
        "      - por dia: {pedidos_dia:.0f} pessoas\n",
        "      - por semana: {pedidos_semana:.0f} pessoas\n",
        "      - por mês: {pedidos_mes:.0f} pessoas\"\"\")\n"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {},
      "outputs": [],
      "source": [
        "# Primeiro acesso e primeira compra por usuário\n",
        "primeiro_acesso = df_visits.groupby('uid')['start_date'].min().reset_index()\n",
        "primeira_compra = df_orders.groupby('uid')['buy_date'].min().reset_index()\n",
        "\n",
        "# Combinar dados e calcular diferença\n",
        "df_conversao = pd.merge(primeiro_acesso, primeira_compra, on='uid', how='inner')\n",
        "df_conversao['dias_conversao'] = (df_conversao['buy_date'] - df_conversao['start_date']).dt.days\n",
        "\n",
        "# Distribuição do tempo de conversão\n",
        "plt.hist(df_conversao['dias_conversao'], bins=30, edgecolor='k')\n",
        "plt.title('Distribuição do Tempo para Primeira Compra')\n",
        "plt.xlabel('Dias após o Registro')\n",
        "plt.ylabel('Número de Usuários')\n",
        "plt.show()"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {},
      "outputs": [],
      "source": [
        "# Qual é o volume médio de uma compra?\n",
        "\n",
        "volume_medio_compra = df_orders['revenue'].mean()\n",
        "volume_mediano_compra = df_orders['revenue'].median()\n",
        "\n",
        "\n",
        "print(f\"\"\"O volume médio de uma compra é: {volume_medio_compra:.2f}\n",
        "O volume mediano de uma compras é: {volume_mediano_compra:.2f}\"\"\")"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        "Média de 5 e mediana de 2,50 indicam que 50% gastam até 2,50, enquanto alguns clientes com valores altos elevam a média."
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {},
      "outputs": [],
      "source": [
        "# Quanto dinheiro eles trazem para a empresa (LTV)?\n",
        "\n",
        "\n",
        "# Definir margem bruta\n",
        "margem_bruta = 0.3\n",
        "\n",
        "# Calcular o LTV, excluindo valores zero e nulos\n",
        "ltv = (\n",
        "    df_orders.groupby('uid')['revenue']\n",
        "    .sum()                           # Soma da receita por usuário\n",
        "    .replace(0.0, pd.NA)             # Substitui zeros por NA (para excluir)\n",
        "    .dropna()                        # Remove todos os NA (zeros e nulos originais)\n",
        "    * margem_bruta                   # Aplica a margem bruta\n",
        ")\n",
        "\n",
        "# Calcular o LTV médio ajustado\n",
        "ltv_ajustado = ltv.mean()\n",
        "\n",
        "# Resultados\n",
        "print(f\"\"\"O LTV (excluindo clientes sem receita) é: \n",
        "{ltv}\n",
        "\n",
        "O valor médio que um cliente traz (considerando apenas compradores) é: {ltv_ajustado:.2f}\"\"\")\n",
        "\n",
        "\n"
      ]
    },
    {
      "attachments": {
        "image.png": {
          "image/png": "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2b59e+BuAKKjo0lJSSEqKsq/Ly8vj8LCQmpra7HZbCQkJJCYmNik98bx48fJy8vzzyXSKCQkhI4dO/qXsHU6nU16npjNZiIjI0lOTm5ym6diGAZOp5PDhw9TWVkJQFRUFMnJyURHRweW+5WVlVFUVITD4aBjx46Bh/+r/v37s2XLFoZNmk/GwOsDD/9PHHYTcVFm6twGpRU+DANiIs2E2E1UOw0qa+q/qZtM9XN8xEaZCXGYMIz6eTQqq3046wz/vCEmwG43ERt5Ql1d/XVqak/rafpf5e7+gOULZ/i3b7p/F1Hx328eFasFYiNM2O31IYfRMOFrdS046wy8vvqa6AgTVrOJwvKvw4vYSBNRYSfPeuLxQmGZD5en/tyI0PqhRmYz+BrmH6morp835Yd5ROotff0Otq56FoCxY8fyySefBJYEpfT0dHJycgCYP38+s2fPDiwJOkuXLmXcuHH+7W3btpGVldWkJhjNnj2bBx98EIDBgwezbt26wJKglJWVxY4dOwCYM2cOc+fODSwJOuvWrWPo0KH+7TVr1jTZDlbz5s3zPz/69Onjf94Eu2HDhrF27VoA7r77bv/7TDDbuXNnkyHuS5YsYfz48U1qgtFDDz3ErFmzAOjUqRO5ubmBJUFp/PjxTJ8+nRkzvv7839r9+ZVayqp+yG8Cp+eSETaGZZ76D/9nksrs7MBdp9TqeoSEh4czZMiQU7ZevXqdFEi0a9eOrKwsBg0aRL9+/UhNTT1pCEv79u3p37//Sdfr16+fPwShYSnetLQ0+vbty8CBAzn77LPp3r37Sbd5KiaTibCwMDIyMhg4cCADBw6kR48e3xqC0NATpVu3bt8rBPmx1bkMjhd5KSmvD0EAyirrh880hiA0zGxc5zbIK/aSc8xD7nEP+cVeamq/DkFoWJu6zhVQV1JfdybyeKGw3OBooY/DBT6OFPrILzWoctaHII01xeUG+aVNe3DUD53xndSOFtWHII3nllUZHC2qv/7RIh/FFQbuHzgEERERERERCSatLggRERERERERCUYttXxuW/tDrIIQERERERERkVagcdrS5m5tjYIQEREREREREQkaCkJEREREREREWoGThqw0U2syuWMboCBERERERERERL5R24pBFISIiIiIiIiItAo+n9Eira0lIQpCRERERERERCRoKAgRERERERERaQUMGpfQbeYWeEdaOQUhIiIiIiIiIq1BW0skWoiCEBEREREREZHWwOCkFV2ao7U1CkJEREREREREWgGDhnEqLdHaEAUhIiIiIiIiIq1BC+Ugjf9tKxSEiIiIiIiIiLQCBi0zNKZtxSAKQkRERERERERahzY4X0dLUBASJHyGD5/XHfTNMLxNHxef56SaYGyG4TvhMfHhdrvV3G6ME37R6HGpb15v09eQx+M5qSYY24mPi2EYJx0P1nbia8jr9Z50PBibx+PxPyboNeRveg2duuk1dHILfA3pcalvPt/Xn+X0Gvq6nfi4tBWGAYbPaPbW1rqEmCoOHjytHykyPT1wl7QC/fv3Z8uWLdgcEVitoYGHg47XW4ertsK/HRoRj8lkaVITjFy1lXjcTgDsdjuxsbGBJUGpqKjI/+E8IiKC8PDwwJKg43K5KC0t9W/Hx8djtVqb1ASjyspKampqALDZbMTFxQWWBKXi4mL/l5bw8HAiIiICS4KO2+2mpKTEvx0XF4fNZmtSE4yqqqqorq4GwGq1Eh8fH1gSlEpKSnC73QCEhYURGRkZWBJ0PB4PxcXF/u3Y2FjsdnuTmmBUU1NDZWUlABaLhYSEhMCSoFRaWspTTz3FjBkzAg+1Wvf+s5LSyuYPeKaODuXcfmf+a60yOztw1ykpCGnjGoMQERERERGRYPP888+3qSDk909XtEwQMiaUUf0dgbvPOKcbhGhojIiIiIiIiIgEDfUIaeMae4SkZ15CcqfBgYeDTkn+TvZufMW/PW/ePHVhBxYuXMjnn38OQEZGBrfffntgSVCaM2eOvwv7JZdcwpgxYwJLgs6ePXt44okn/Nu/+93vaN++fZOaYPTOO++wbNkyADp37szdd98dWBKU/vznP3P8+HEALrjgAi688MLAkqCTk5PDQw895N++++676dy5c5OaYPThhx/ywQcfANC+fXt+97vfBZYEpYcffpjshr9ujh49mksvvTSwJOjk5eXxpz/9yb9922230bNnzyY1wWj58uUsWrQIGoYL/eEPfwgsCUp///vf+fWvf60eIT+AttYjREFIG9cYhAybNJ+MgdcHHg46ubs/YPnCr98Is7Oz9QEUmDlzJk899RQAY8eO5ZNPPgksCUrp6enk5OQAMH/+fGbPnh1YEnSWLl3KuHHj/Nvbtm0jKyurSU0wmj17Ng8++CAAgwcPZt26dYElQSkrK4sdO3ZAQ7A4d+7cwJKgs27dOoYOHerfXrNmTZPtYDVv3jz/86NPnz7+502wGzZsGGvXroWG0KzxfSaY7dy5k8zMTP/2kiVLGD9+fJOaYPTQQw8xa9YsADp16kRubm5gSVAaP34806dPb1NByD0tFIRc2caCEA2NEREREREREWkFDKOFWuAdaeUUhIiIiIiIiIi0FkYLtTZEQYiIiIiIiIhIK2D4DAyj+VtboyBERERERERERIKGghARERERERGRVsDg5N4azdXaEgUhIiIiIiIiIhI0FISIiIiIiIiItAKaI+SHoSBEREREREREpJU4aWnbZmhtjYIQERERERERkVagpUKJlrrdH4uCEBEREREREZFW4eRhK83R2hoFISIiIiIiIiKtgGEALdHq/9NmKAgRERERERERaQ1O0VujOVoby0FaXxBiGAZut5u6ujpqa2upra2lrq4Oj8dT/w8UwOPxNKl1u90n1Xm9XlwuF7W1tTidTtxud5PjjU512y6XC5/PF1h6Sj6fz38733Suz+fz348Tm8vlOul+tySTCSwWsFlNWE7zWWQx19c3Noul/jqBTrdORERERERE5Ls6za+wZ47CwkIefvhhLr74YjIzM8nKyuLSSy/l1VdfpaioqEmtYRg899xzXHDBBfTq1YtRo0bxyCOPcOzYsSZ177zzDrfccgtDhgyhS5cu/O53v6OmpqZJDcCxY8d48MEHGTduHH369OGcc87htttuY+PGjYGlJ3G73ezevZsZM2Zw1lln0bdvX37+85+zatUqf8BRW1vLqlWryMzMpGPHjk3ajBkzOHr0aOBlW0z7BCtXjo/g/plxXDQiDJv1m5MKExDiMDF+SBh3XxPNn26LY87NsVw5LoLOHaxN6+wmJgxtWjd1XASpSV/XiYiIiIiIBCPDaFhCt7nbmfM3+R9EqwtCqqqq2Lx5M+PGjeOBBx5g/vz59OjRg9dee42XX34Zl8sFgNPp5KWXXuKZZ57hnHPO4Y9//CMTJkxgxYoVPP7449TW1vqvWVFRQVpaGuPGjSMlJYXq6upT9r7461//yqpVqxg3bhyPPPIIt912G+Xl5fzmN7+hqKjopN4djbxeL4cPH+bmm2/G6XTy61//mtmzZ1NeXs5zzz3H559/7q91u92UlJRwzz338Nprr/Hmm2/y5ptv8pvf/IbExMQm120p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9eA3v8xg+qWpdO1cv+qPiIiIiIhIUGuY87K5W1vTMt+q/wcJCQnccsst3H///UyePJnhw4czZMgQhgwZQq9evZrME9K7d29uvPFGLr30Us4//3ymTJnCtddey7nnnttkJZnU1FSGDh3KpEmTuPPOO7ntttsYM2YMgwcPJjExERqG21xwwQVcf/31TJo0iREjRjB27FimT5/ONddcc9KKMCcymUxER0dz1VVXcd111zFu3DjGjRvHtddey8UXX0xKSoq/zm63c8kll3DttdcyYcIERo0axeWXX87UqVPp3bt34KWbzZYd5WzcVsq2XeVs313Bhi2lLFtVwNLPCiktc2EYsHl7Gcs+K+RonjPwdL/tX1Ww+OPjZB+u8e8rLnWx5NN8/vlqDqvWF7NtdwU799S3nMM1VGn5XBERERERkfohKi3R2hhTxcGDp/VjRaanB+6SVqB///5s2bKFrll30S5tcuDhoFOct4qvNtzr387OzqZz585NaoLRzJkzeeqppwAYO3Ysn3zySWBJUEpPT/evvDR//nxmz54dWBJ0li5dyrhx4/zb27ZtIysrq0lNMJo9ezYPPvggAIMHD2bdunWBJUEpKyuLHTt2ADBnzhzmzp0bWBJ01q1bx9ChQ/3ba9asabIdrObNm+d/fvTp08f/vAl2w4YNY+3atQDcfffd/veZYLZz504yMzP920uWLGH8+PFNaoLRQw89xKxZswDo1KkTubm5gSVBafz48UyfPp0ZM2YEHmq1pt++lcLirxcDaS6/uCGNKROSAnefcSqzswN3ndKpuzCIiIiIiIiIyBklcMhKs7U21i1EQYiIiIiIiIiIBA0FISIiIiIiIiKtgOEz8LVAa2vzpSoIEREREREREZGgoSBEREREREREpBUwDAPD52v21taWjlEQIiIiIiIiItIatNQYlRa62R+LghARERERERGRVsAwWmblmLZGQYiIiIiIiIhIa2G0QGtjFISIiIiIiIiItAL1vTOav7W1XiEKQkRERERERERahZOHrTRHa2sUhIiIiIiIiIi0Bm0vk2gRCkJEREREREREWgHDMDB8zd9abLWaH4mCEBEREREREREJGgpCRERERERERFoBw+drmRZ4R1o5BSEiIiIiIiIi8s3a2NAYU8XBg6f1E0Wmpwfuklagf//+bNmyhYjoHoSEdwg8HHRcziIqSnf4ty+66CLCw8Ob1ASjjRs3cuDAAQCSk5MZNWpUYElQ+s9//kN1dTUAffv2JSMjI7Ak6OTn57Ny5Ur/9oQJE4iOjm5SE4y2bt3Knj17AIiLi2Ps2LGBJUFpyZIllJeXA9C7d28yMzMDS4JOcXExy5Yt82+PGTOG+Pj4JjXBaOfOnezcuROAqKgoJk6cGFgSlJYtW0ZxcTEAPXr0oF+/foElQae8vJwlS5b4t88991zatWvXpCYY7dmzh61btwIQFhbGpEmTAkuC0sqVK3nggQeYMWNG4KFW67IZ6ygoqgvc/aP71S3duHxSSuDuM05ldnbgrlNSENLGvfLKKxQUFATubna1tbWsXr2aQYMGERkZiclkCiwJOoZhcOzYMY4cOcLAgQOxWCyBJUHJ5/Oxc+dOQkND6dKlC2azOq4BeDwePv/8c/r27UtMTIxeQw2voYKCAg4cOMDgwYP1Gmrg8/n46quvsFgsdO/eXa+hBl6vlzVr1tCrVy/i4+P1Gmp4DRUXF7N7926GDRum11ADn8/Hvn378Hg89OrVS6+hBl6vl/Xr19OlSxeSk5P1Gmp4DZWVlbFlyxZGjBiBzWYLLAlKPp+PgwcPUlNTQ2ZmZou/hiZMmECfPn0Cd7dai5ccp8bpDdz9ozv7rBi6d4kI3H3GURAiZwyfz0dRURE333wzf/3rX+nSpYs+bAFut5tPP/2UDz74gAceeIDQ0NDAkqBUV1fHo48+Srt27Zg+fTp2uz2wJOgYhkFVVRU33XQTv/vd7+jTp49eQw3h0Jo1a3jttdd45JFH9BpqUFdXx1NPPUVISAg33HADDocjsCToGIaB0+nktttuY+bMmZx99tlYrdbAsqDj8XjYvHkzTzzxBE8++SShoaH6cgu4XC4WLFhATU0NM2fO1GuogdPp5K677mLatGkMHz5cr6GGcGjXrl388Y9/5J///Kf+2NfA5XLxxhtvcPToUX71q18REhISWCLyozndIKRl4zkJGrW1tSxdupTy8nKMNja+7PsyDIOjR4+yfv16vN7mT3XPVF6vl23btrF//358Pl/g4aBkGAZut5sVK1ZQWlqq11ADn89HXl4ea9aswePxBB4OWo0fzL/66iu9hk7g8XhYtWoVhYWFeg01MAyDoqIiVq1apdfQCbxeL3v27GHXrl36/XyCxvA5Pz9f7y0NDMOgtLSUFStW4HK59N7SwOfzsX//frZt26bnipyxFISIiIiIiIiISNBQECIiIiIiIiIiQUNBiDQbjZk8NT0uJzOZTHpc5LTouSIi0nz0fivfhZ4vciaz/PaOO+YG7jwVR2xs4C6R09Y4x8H5559PdHS03hgbHhOv10tMTAznnHOOJh1rYBgGLpeLjIwMunbtqklBT1BbW8vIkSOJi4vTa6iB1+slIiKCYcOG6TV0ApfLRdeuXcnIyNBr6AS1tbUMHTqUxMTEFl/F4Ezh9XoJDQ1l5MiRWK1Wvbc0cLvddOrUSZNTB6itrWXQoEG0a9dOr6EGPp8Pm83Geeedh91u12uo4bOcx+MhJSWFrKwsvYakWbnKygJ3nZJWjZFm4fV6yc/PJyEhQauANGhcxaC6upqEhAT94mzQOPGY1WrV7Osn8Pl85OfnExcXpxUMGhiGQW1tLRUVFSQlJem50sBoWM7RbDYTFRWlx6WBYRjk5+cTExODw+HQ49LwmNTV1VFWVqblUE9gGAYVFRX4fD4tV34Co2HJ8qioKEJCQvS4NKirq6OkpITk5GSFQw0Mw6CyshKPx0NsbKyeK9KsTnfVGAUhIiIiIiIiItLqnW4QothSRERERERERIKGghARERERERERCRoKQkREREREREQkaGiOEPlR1dXVkZ+fT35+Pm63m5CQEFJSUoiLi8NmswWWB4WamhqKioooLS3F6XRit9vp0qULMTExgaVBwe12c/z4cUpLS6mtrQUgNDSUxMREEhISgvZ5AuB0OiksLKSoqIi6ujoAQkJCSE5OJj4+XpOmNqxgcOzYMfLy8khOTqZTp05B+ZwxDINjx45x9OhRXC6Xf7/ZbCY2NpZevXo1qQ8WPp+Pmpoajhw5Qnl5OT6fD7vdTocOHYiPjw/aybsPHTrEsWPH8Hg8gYdISEigY8eOhIeHBx5q0xpfQ0VFRTidTkwmExERESQlJZGYmBhYHjQaV3I7evQopaWluFwuHA4H7dq1C5rfQ40Tf+bl5VFZWUldXR0JCQmkpKSc9Do5duwYBQUF1NbWYrPZSExMJDk5uU0+Tm63m7KyMvLz86mpqcHtdtO5c2cSExP9762NE8kWFRVRU1ODx+MhIyOD2NhYrSQjP5rTnSNEQYj8aDweD3v27OHFF19kyZIlVFZWkpCQwLRp07j00ktJS0sLytm1d+7cydtvv82nn37K/v37iYyM5NFHH2X8+PGBpUEhPz+fv/3tb3zxxRccPXoUk8lEcnIyF1xwAZdccgndunUL2tnGDxw4wOuvv86HH35IUVERAImJiUyYMIHLLruMnj17BvUHCa/Xy+7du3nsscdYuHAh1113HXPmzAnKLy1er5dHHnmExx9/HKfT6f/Q7XA4OO+883j22WcDT2nzGlfPWb9+PS+++CLbtm3D5XKRmJjIjBkzmDx5MsnJyYGnBYWHHnqIF154gfLycmh4rNxuN0VFRVxzzTX85je/oXfv3oGntVmNq5U9/vjjrFy5kuPHj2M2m+natSuTJk3iqquuIiIiIvC0oFBbW8vu3bt58skn2bp1K6WlpcTHxzNp0iQuu+wyMjIy2vxnObfbzdq1a1mwYAE7duxg7969TJ48mbvvvpu+ffvCCSsN/e1vf+Pjjz8mLy+P6OhoxowZwzXXXENmZmab+yyTn5/P0qVLeeONNzh48CB79uxh/vz5XHXVVbRr1w6A3NxcFi9ezPvvv8++ffvIycnh9ddfZ+LEiURFRQVeUuQHcbpBSNt+55IWlZuby6uvvspbb73FXXfdxeLFi5k0aRJPP/007733HpWVlYGnBIXGD+KXX345U6dODTwcdJxOJzt37mTatGm8/PLLvPHGG4wcOZJ//etfPPPMM/6eEMEoNDSU/v37M3fuXBYvXszixYu54oorWLhwIW+88YY/HAlWxcXFfP7556xYsYIePXq0+Q/jp6NTp048+eSTfPnll3z55ZesXr2aBx98MLAsKNTV1fHZZ58xe/Zs4uLiePbZZ/noo4946KGHGDx4cJv8C+3puuWWW1i+fLn/ebJmzRpeeOEFoqKiGDFiRNAFRE6nk2eeeYZXXnmFSZMm8cYbb/DMM8+QmprKs88+y3vvvRd4StA4cOAA8+bN48svv2TOnDm899573HjjjXz88cc8//zzlJWVBZ7S5jQu1d6tWzd+8Ytf0K9fv8ASampqePrpp3n22We56KKLeOmll7juuutYt24df/3rX6mpqQk8pdXzer1YrVYGDx7MnDlzTuod01gTEhLCqFGjmDVrFqGhoYElIi1GnxrlR/PVV1+xZcsWpk2bxtSpU8nIyOCuu+5i0KBBbN68mW3btgWeEhQyMzO5/vrrmTFjxil/mQabjh078sILLzB9+nTOOussevXqxc9//nPOOeccDh48SE5OTuApQSM5OZmxY8dy7rnn0qVLF7p06cJNN91EZmYmx48f5+jRo4GnBA2Xy8Xy5ctZuXIld999t/6y1MBisRATE0NSUpK/S3+wPjY7d+5k2bJl9O3blz//+c8MGDCAzp07M2DAAHr16hW0jwtAeHg4CQkJ/udJaGgon376KcnJyQwcOJDY2NjAU9o0j8fD5s2bGTRoEGPGjKF3794MGjSI8ePH07FjR/bt2xd4SlDwer3k5eWxbds2fvvb3zJy5Ei6devG9OnTOe+88zh06BCrV68OPK3NsdlsjBo1il/+8pdcccUVdOjQIbCEmpoaXnjhBS677DIuu+wyBgwYwA033MDkyZPJzc1lxYoVgae0esnJyUyePJk777yT8ePHn3JYalpaGldddRUzZ85k2LBhWK3WwBKRFqMgRH4UPp+P/Px8SkpKGDx4MKGhoVitViIiIujbty+VlZVB+yXOZrMRFhZGeHj4KX9pBBuLxUJsbCxhYWHYbDasVitWqxWTyYTZbA7aMfw0PDYOhwOHw4HVasVsNrN9+3by8/NJSEgIyiEgjVatWsUXX3zBgAEDGDp0qHqDNMjPz+eee+5hypQp3HTTTbz88suUlJQElgWFQ4cOsWfPHqKiorj//vuZPHky11xzDS+++CJ5eXlB/ZxpfH81m82YTCYqKyt5//33GTt2LImJiUH32FitVnr16kV2djZHjhzB5XJRUVHBwYMHqaqqok+fPoGnBIXG+UFcLpd/PhCr1er/DFNQUBAUIZHJZMLhcBAREUFoaOhJQ1LdbjfHjh3j0KFDDB48mOTkZOx2O5GRkaSnpxMTE8POnTubnNMWWCwWQkNDiYiIICQk5JRDfywWi//5YrfbT1kj0lKC6zedNJva2loqKioAaN++fZNjSUlJ/g8ZIoEMw+Czzz7jyJEj9OjRwz/ONFjV1dWxdetWrrrqKqZOncq9995L7969ueCCC0hKSgosDwp79+5l5cqV2Gw2LrnkklN2xw02JpOJLl26MH36dKZOncqYMWMICQnhrbfe4m9/+xvV1dWBp7R5ZWVlbN++nQ0bNuD1ernooovo2rUrb7/9Nm+99RaHDh0KPCUoVVRUsGHDBo4ePcqkSZOCrjcIDXPpXHXVVQwaNIinnnqKq6++mhtuuIFVq1YxduxYRo4cGXhKUDCbzcTExJCYmMiiRYv8E9/v2LGDbdu2kZOTE7RB64ncbjcFBQW43W7at2/vH3ZnMpmIjIwkPDyc/Pz8wNNEpIUpCJEfhdfrxePx+FP0E9lsNnw+3ylnqxf57LPPWLx4Me3bt+fCCy8kLCwssCSomM1mwsPD6dmzJ127diU6OprCwkIKCwubrA4SLKqqqvjPf/5DZWUlo0ePpkuXLoElQclkMnHOOedw9dVXc9VVV3HllVdyzTXXkJGRwcqVK9mwYUPgKW2e2+2mpqaGyMhIpk2bxpVXXsnVV19NWloaX3zxRZv8C+33UVRUxPLly+nevTuZmZlBOYbfMAyqq6spKCjw/xW/cUL3w4cPU1hYGHhKUDCbzf6hDTt27ODee+/lrrvu4oknnqC4uJioqCh9lmvoBd04n5nD4WjSo8pisWA2m3G73SecISJnAgUh8qOw2WzY7XZ8Ph9Op7PJsdraWiwWS1APeZBTW7t2La+++ip2u51JkyZx9tlnB5YEHavVSlpaGrfeeiu//OUvuf322zGZTHz++edB0SU50NGjR1m9ejVbtmzh888/5+GHH+bZZ58lNzeXTZs28fe//53c3FwM47QWRGszTCYTqampdO3alXbt2tG+fXvOOeccRo4ciclkYtOmTYGntHlWq5X4+HgyMzMZPHgwSUlJ9OrVi2HDhlFeXs6RI0cCTwk6brebw4cP8+WXX/p7gwTbsBgaPpc8//zzGIbBlVdeyS9/+UvuuOMOxowZw5EjR1i8eHHgKUEjMTGRqVOncuWVV5KYmIjJZKJz58707NmTlJSUoP9jBScM/6Bh4l2v1+s/5vF48Hg8QRkwipzpgu+3nTQLu91OdHQ0VquV3NzcJseOHTuGw+EgJiamyX4JXh6Ph02bNvHcc89RU1PDpZdeynnnnacPDg1fcG02GwkJCaSkpHDeeefRs2dPjh8/TvZpLg/Wlni9Xrp37054eDhbtmxh5cqVfPHFF5SWlnL06FHWrl0bFKsYnI7GOXZsNlubXLHgv4mKiiIlJeWkXomN2z6fr8n+YFRSUsL27dupqKhg8uTJJz1WwcLlcvH++++TlZXFwIEDSU9Pp0ePHv4A7csvvww8JWjYbDbS0tKYOXMmf/zjH/njH//IHXfc4X9tdezYMfCUoGOz2UhOTiY0NJTc3Fz/HwAbl/CurKw8aZi4iLQ8BSHyozCbzaSkpJCcnMyqVavIz8+nurqa3NxctmzZQnx8PJ06dQo8LSj4fD5qa2upqqqirq6uyXZtbW3QfTivq6tj165dPPTQQxw6dIjp06czdOhQrFYrHo8n6B6PE1VXV3PkyBEqKiqora31bxcWFvonKQs2Xbt25Ze//CWPP/44f/vb3/jb3/7GvffeS0ZGBqNGjeLPf/4zGRkZQTchm2EY5ObmUlxcTE1NDdXV1Rw+fJjdu3dTWVkZlEOIUlJS6Nq1K/v27ePIkSM4nU6KiorYuXMnERERQTvHzolycnJYt24dGRkZ9OvXL2hXdDCZTP55HIqKiqiqqqKiooL8/HyqqqqCeoUhj8dDaWkppaWl+Hw+DMPgq6++Yvv27cTGxtK3b9/AU9okr9dLTU0NVVVVuN1uPB4PTqeTmpoafD4f7dq1o3fv3qxevZrs7GwqKio4cuQIu3fvpq6urk2uEmgYBm63m6qqKqqrq/2T61ZXV+N0Ov2f4U7c17gUcXV1NbW1tU16z4g0N8tv77hjbuDOU3EE4eRZ8r+xWq2UlJSwePFi7HY7TqeThQsXsnXrVi6++GLOO++8oPzrU1VVFXv27GHHjh1s2LCBzZs3k5qaisvlora2lpiYmKBaTeb48ePce++9fPTRR9x0002kpaVRUVFBXl4e1dXV/lVTgtGuXbt48803qampoaysjJycHN577z1WrlzJwIEDmTBhQtD1rLJarURGRhIbG+tvXq+XJUuWkJqayuTJk4mOjg48rc3z+Xw88sgjFBQUUFFRwaFDh/jggw/48MMP6dChA7fddhsRERGBp7VpYWFhVFdX8+GHH/qHZK5du5Z33nmHs88+m/HjxxMfHx94WtBwu92sXr2a999/n5/85CcMHjw4sCRo+Hw+jh8/zooVKzCbzXi9Xvbt28eHH35IdnY2kydPpn///oGnBYWysjLWrFnDzp07qaysZPv27Tz77LPk5+czefJkxo8f3+aHU/l8PsrLy/nyyy85cOAAS5cupbq6mujoaOrq6jAMg/j4eCwWC4sWLfJ/2f/kk09YvXo1ffr04frrr29zn+1cLhdHjx5lw4YNZGdn8/bbb9OhQwcsFgt1dXU4HA4sFgs5OTls2rSJPXv28NFHH5Geno7H48HtdhMaGqrhVfKDc51mz2BTxcGDpzWQOjI9PXCXyH916NAhXnrpJV544QUKCgr8f8296KKLSE5ODiwPCrt27WLevHksWrSoyX6TycTll1/On//8Zzp37tzkWFu2Y8eOb5wLZNSoUfzf//0fY8aMCTwUFL744gsefPBBvvzySwoLC4mMjKRHjx5MmzaNSZMmqUtygwMHDnDrrbfSu3dv7rnnHhISEgJL2jyv18svf/lLVqxYwbFjx7Db7XTp0oWLLrqIa6+9lrS0tMBTgkJBQQGLFy/mscceIycnh5SUFKZNm8bVV19Nt27dAsuDSk5ODs888wwrVqzgtddeC6rfO4EaJ0t97LHHeO+998jOzsZms9G/f3//Skxt7Uvs6SosLOTf//43Dz/8MMePHyciIoIRI0Zw0003MXLkSEJCQgJPaXPcbjfr1q3j2muv5dixY02OdezYkeuvv5777rsPwzB44oknePnllzlw4ADJyclceeWV/PSnP22Tv6/z8/NZuHAhs2bNCjzE4MGD+dWvfkXfvn157rnnePDBBwNLuPDCC7nzzjs577zzAg+J/E8qT3PouIIQ+VF5vV5qa2txOp34fD7/hFKBs2oHE4/H4+8SGCgkJISIiIiT1qhvyzweD8XFxYG7oWGumca154OR2+2murra373UZDJhsVgICQnx/6VF6t9nKioqsFqthIeHB+17S0VFBS6Xq8lzxeFwEBISErTPlcbVHGpqavB6vZjNZkJCQggNDQ3ax6SR1+vF6XTicrmIjo4O+sfDMAxqamqoq6vzd9e3Wq2EhoYGxZf9b9L4Gqqurva/t9hsNsLCwrDZbEEzDNHlclFRUXHSUI7G38mNPe5qamr8E6a29febxqHdlZWVgYew2WyEh4djtVpxOp1Un2IJd4fDQVhYWNB+xpMfj4IQEREREREREQkapxuEBOefzUREREREREQkKCkIEREREREREZGgoSBERERERERERIKGghARERERERERCRoKQkREREREREQkaCgIEREREREREZGgoSBERERERERERIKGghARERERERERCRoKQkRERNqgzz//nN/97nf8/e9/Dzz0nRUXF/PKK68wefJkqqqqMAwjsOSMVV5ezsKFCxk9ejRHjhwJPCwiIiJBSEGIiIhIG5Sens4FF1zA8OHDAw99Z263m4KCAnbt2oXX6w08fEbzer0UFRWxbds26urqAg+LiIhIEFIQIiIi0oYYhoFhGLRr147BgwfTp0+fwBL5gRmGgc/nC9wtIiIi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GxtLfHw8kZGRREVF0aNHD4YMGUKfPn3o06cPGRkZmM1m/xChjIwMoqKi/NcLDQ3l3HPPJSkpyT9nh8VioVu3bmRmZhIaGorVaqVDhw5ccskl2O12QkJC6NWrF+PHj2fw4MHY7XZMJhNRUVGkp6cTERFBaGgo0dHRpKSk0Lt3b/r160diYiI0DLMZMmQIaWlpTeYNERERkZblOs0/XJgqDh48rVnRItPTA3eJiIjI97Bz507uvPNOMjMzmTNnjlYfEREREfkBVGZnB+46JQ2NERERkdPm8/nYvn07n332GZ9++ulJ7fPPPyc3N/ekFVtEREREzhTqESIiItLM9u/fzwMPPEC3bt24/fbb/cNSWgOXy8Xdd9/N+vXr/SuwnCg2NpbrrruO6667TsNGREREpFmdbo8QBSEiIiJy2gzDID8/H6fTiWGc/BGicYWa6Ojob51HREREROSHpiBEREREfhT/bdiLyWRSCCIiIiLN7nSDEM0RIiIiIt+J2Wz+1qYQRERERM5kCkJEREREREREJGgoCBERERERERGRoKEgRERERERERESChoIQEREREREREQkaCkJEREREREREJGgoCBERERERERGRoKEgRERERERERESChqni4EEjcKeIiIiIiIiISFukHiEiIiIiIiIiEjQUhIiIiIiIiIhI0FAQIiIiIiIiIiJB4/8DmRTje6NiNIUAAAAASUVORK5CYII="
        }
      },
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        "<div class=\"alert alert-block alert-danger\">\n",
        "<b> Comentário: </b> <a class=\"tocSkip\"></a>\n",
        "    \n",
        "A análise LTV também deve ser feita por coorte.  Semelhante ao cálculo de retenção que você fez anteriormente.\n",
        "\n",
        "Exemplo: \n",
        "    \n",
        "```python \n",
        "#calculando a quantidade de dinheiro que o usuários trazem para a empresa (lifetime value)\n",
        "\n",
        "#derivando a coluna first_order_month\n",
        "first_orders = first_order.copy()\n",
        "first_orders['first_order_month'] = first_orders['first_order_date'].dt.to_period('M')\n",
        "\n",
        "#calculando o número de clientes, por mês da primeira compra\n",
        "cohort_sizes = (\n",
        "    first_orders.groupby('first_order_month')\n",
        "    .agg({'uid': 'nunique'})\n",
        "    .reset_index())\n",
        "cohort_sizes.columns = ['first_order_month', 'n_buyers']\n",
        "\n",
        "margin_rate = 0.4\n",
        "\n",
        "#mesclando as informações de pedidos com a primeira compra por cliente\n",
        "df_orders_ = pd.merge(df_orders, fi..continue o código\n",
        "\n",
        "#calculando a receita por coorte e mês\n",
        "cohorts = (\n",
        "    df_orders_.groupby(['first_order_month', 'order_month'])\n",
        "    .agg({'revenue': 'sum'})\n",
        "    .reset_index())\n",
        "\n",
        "#mesclando o tamanho da coorte com a receita\n",
        "report = pd.merge(cohort_sizes,...continue o código\n",
        "\n",
        "```\n",
        "    \n",
        "Exemplo de output:\n",
        "![image.png](attachment:image.png)    \n",
        "\n",
        "\n",
        "</div>"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {},
      "outputs": [],
      "source": [
        "df_orders"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {},
      "outputs": [],
      "source": [
        "df_orders.groupby('uid')['buy_date'].count()"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {},
      "outputs": [],
      "source": [
        "# primeira data de cada UID\n",
        "df_orders['first_order_date'] = df_orders.groupby('uid')['buy_date'].transform('min')\n",
        "\n",
        "# Criar a coluna 'cohort' (Coorte da primeira compra)\n",
        "df_orders['cohort'] = df_orders['first_order_date'].dt.to_period('M')\n",
        "df_cost['cohort'] = df_cost['date'].dt.to_period('M')\n",
        "\n",
        "\n",
        "# Adicionar a coluna 'order_month' (Mês da compra)\n",
        "df_orders['order_month'] = df_orders['buy_date'].dt.to_period('M')\n",
        "\n",
        "\n",
        "\n",
        "# mês inicial coorte do uid\n",
        "cohorts = df_orders.groupby(['cohort', 'order_month']).agg({'revenue': 'sum'}).reset_index()\n",
        "# as relações dos outros meses de cada coorte\n",
        "cohort_sizes = df_orders.groupby('cohort').agg({'uid': 'nunique'}).reset_index()\n",
        "\n",
        "\n",
        "\n",
        "cohort_sizes.columns = ['cohort', 'n_buyers']\n",
        "\n",
        "report = pd.merge(cohort_sizes, cohorts, on='cohort')\n",
        "\n",
        "\n",
        "# Calcular o LTV por coorte\n",
        "report['ltv'] = report['revenue'] * margem_bruta / report['n_buyers']\n",
        "\n",
        "# Criar a pivot table do LTV\n",
        "ltv_pivot = report.pivot_table(index='cohort', columns=(report['order_month'] - report['cohort']).apply(lambda x: x.n), values='ltv')\n",
        "\n",
        "# Plotagem do Heatmap LTV\n",
        "plt.figure(figsize=(10, 8))\n",
        "sns.heatmap(ltv_pivot, annot=True, fmt=\".2f\", cmap=\"YlGnBu\", linewidths=.5)\n",
        "plt.title('LTV por Coorte')\n",
        "plt.show()"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        "Em toda sua vida um cliente gasta em média 2.07, levando em conta uma margem bruta de 30%."
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {},
      "outputs": [],
      "source": [
        "#Quanto dinheiro foi gasto? No total/por origem/ao longo do tempo\n",
        "\n",
        "# 1. Total de dinheiro gasto\n",
        "total_cost = df_cost['costs'].sum()\n",
        "print(f\"Total de dinheiro gasto: {total_cost:.2f}\")\n",
        "\n",
        "# 2. Dinheiro gasto por origem (ID)\n",
        "cost_by_id = df_cost.groupby('id')['costs'].sum().reset_index()\n",
        "print(\"\\nDinheiro gasto por origem (ID):\")\n",
        "print(cost_by_id)\n",
        "\n",
        "# 3. Dinheiro gasto ao longo do tempo\n",
        "df_cost['date'] = pd.to_datetime(df_cost['date'])  # Garantir que a coluna 'date' seja do tipo datetime\n",
        "cost_over_time = df_cost.groupby('date')['costs'].sum().reset_index()\n",
        "print(\"\\nDinheiro gasto ao longo do tempo:\")\n",
        "print(cost_over_time)"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {},
      "outputs": [],
      "source": [
        "custos_por_origem = df_cost.groupby('id')['costs'].sum()\n",
        "custos_por_origem.plot(kind='bar', title='Custos por Origem')\n",
        "plt.show()"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {},
      "outputs": [],
      "source": [
        "#Quanto custou a aquisição de clientes para cada origem?\n",
        "clientes_por_origem = df_visits.groupby('id')['uid'].nunique().reset_index()\n",
        "clientes_por_origem.columns = ['id', 'num_clientes']\n",
        "\n",
        "# Juntar com df_cost para obter o custo total por origem\n",
        "custo_por_origem = df_cost.groupby('id')['costs'].sum().reset_index()\n",
        "\n",
        "# Calcular o CAC por origem\n",
        "cac_por_origem = pd.merge(custo_por_origem, clientes_por_origem, on='id')\n",
        "cac_por_origem['CAC'] = cac_por_origem['costs'] / cac_por_origem['num_clientes']\n",
        "\n",
        "# Exibir o resultado\n",
        "print(\"Custo de Aquisição de Clientes (CAC) por origem:\")\n",
        "print(cac_por_origem[['id', 'CAC']])"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {},
      "outputs": [],
      "source": [
        "# Usuários adquiridos por origem (primeiro acesso)\n",
        "usuarios_por_origem = df_visits.groupby('id')['uid'].nunique()\n",
        "\n",
        "# CAC por origem\n",
        "cac = custos_por_origem / usuarios_por_origem\n",
        "cac.plot(kind='bar', title='CAC por Origem')\n",
        "plt.show()"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {},
      "outputs": [],
      "source": [
        "#Os investimentos valeram a pena? (ROI)\n",
        "# 1. Calcular o custo total de aquisição\n",
        "custo_total = df_cost['costs'].sum()\n",
        "print(f\"Custo total de aquisição: {custo_total:.2f}\")\n",
        "\n",
        "# 2. Calcular a receita total gerada\n",
        "receita_total = df_orders['revenue'].sum()\n",
        "print(f\"Receita total gerada: {receita_total:.2f}\")\n",
        "\n",
        "# 3. Calcular o ROI\n",
        "roi = (receita_total - custo_total) / custo_total * 100\n",
        "print(f\"ROI: {roi:.2f}%\")\n",
        "\n",
        "# 4. Verificar se o investimento valeu a pena\n",
        "if roi > 0:\n",
        "    print(\"O investimento valeu a pena! (ROI positivo)\")\n",
        "else:\n",
        "    print(\"O investimento não valeu a pena. (ROI negativo)\")"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {},
      "outputs": [],
      "source": [
        "# Receita por origem (considerando primeiro acesso)\n",
        "usuarios_compra = df_visits.drop_duplicates('uid').merge(df_orders, on='uid')\n",
        "receita_por_origem = usuarios_compra.groupby('id')['revenue'].sum()\n",
        "roi = (receita_por_origem - custos_por_origem) / custos_por_origem\n",
        "roi.plot(kind='bar', title='ROI por Origem')\n",
        "plt.show()"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {},
      "outputs": [],
      "source": [
        "# Calcular o CAC por coorte\n",
        "# Agrupe os custos por coorte e some os custos\n",
        "cohort_costs = df_cost.groupby('cohort')['costs'].sum().reset_index()\n",
        "# Renomeie a coluna 'uid' para 'n_buyers' para corresponder a cohort_sizes\n",
        "cohort_sizes = cohort_sizes.rename(columns={'uid': 'n_buyers'})\n",
        "\n",
        "# Mescle os custos e tamanhos das coortes com base no mês da primeira compra\n",
        "cac_report = pd.merge(cohort_sizes, cohort_costs, on='cohort',how='left')\n",
        "\n",
        "# Calcule o CAC para cada coorte\n",
        "cac_report['cac'] = cac_report['costs'] / cac_report['n_buyers']\n",
        "\n",
        "\n",
        "# Calcular o ROMI por coorte\n",
        "\n",
        "romi_report = report.groupby('cohort').agg({'ltv': 'sum', 'n_buyers': 'nunique','revenue': 'sum'}).reset_index()\n",
        "romi_report.columns = ['cohort', 'ltv', 'n_buyers','revenue']\n",
        "# Mescle os custos das coortes para poder calcular o ROMI\n",
        "romi_report = pd.merge(romi_report, cohort_costs, on='cohort',how='left')\n",
        "\n",
        "romi_report['cac'] = romi_report['costs'] / romi_report['n_buyers']\n",
        "\n",
        "#calcular ROMI\n",
        "romi_report['romi'] = romi_report['ltv'] / romi_report['cac']\n",
        "\n",
        "\n",
        "# Criar a pivot table do ROMI\n",
        "romi_pivot = romi_report.pivot_table(index='cohort', columns=(report['order_month'] - report['cohort']).apply(lambda x: x.n), values='romi')\n",
        "\n",
        "\n",
        "# ... (código para plotar o heatmap do ROMI)\n",
        "\n",
        "\n",
        "\n",
        "# Plotagem do Heatmap LTV\n",
        "plt.figure(figsize=(10, 8))\n",
        "sns.heatmap(ltv_pivot, annot=True, fmt=\".2f\", cmap=\"YlGnBu\", linewidths=.5)\n",
        "plt.title('LTV por Coorte')\n",
        "plt.show()"
      ]
    },
    {
      "attachments": {
        "image.png": {
          "image/png": ""
        }
      },
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        "<div class=\"alert alert-block alert-danger\">\n",
        "<b> Comentário: </b> <a class=\"tocSkip\"></a>\n",
        "\n",
        "    \n",
        "Aqui também precisamos calcular o `ROI` / `ROMI` por cohort, pois os grupos podem ter valores diferentes de `LTV` e isso pode influenciar no resultado final. O cálculo da métrica pode ser feito como algo assim:\n",
        "    \n",
        "```python\n",
        "your_agg_df['romi'] = your_agg_df['ltv'] / your_agg_df['cac']\n",
        "```\n",
        "\n",
        "O resultado pode ser apresentado como uma `pivot_table` por `cohort`, conforme você fez para outros indicadores em seu projeto. Adicionalmente, você pode analisar o `ROMI` por origem.\n",
        "    \n",
        "```markdown\n",
        "|                   |      |    |    |   |   |   |   |   |   |   |    |    |\n",
        "|-------------------|------|----|----|---|---|---|---|---|---|---|----|----|\n",
        "| cohort            | 0    | 1  | 2  | 3 | 4 | 5 | 6 | 7 | 8 | 9 | 10 | 11 |\n",
        "| first_order_month |      |    |    |   |   |   |   |   |   |   |    |    |\n",
        "| 2017-06           | 0.53 | .. | .. |   |   |   |   |   |   |   |    |    |\n",
        "| 2017-07           | 0.63 | .. |    |   |   |   |   |   |   |   |    |    |\n",
        "| 2017-08           | 0.49 | .. |    |   |   |   |   |   |   |   |    |    |\n",
        "| 2017-09           | 0.60 |    |    |   |   |   |   |   |   |   |    |    |\n",
        "| 2017-10           | 0.60 |    |    |   |   |   |   |   |   |   |    |    |\n",
        "| 2017-11           | 0.55 |    |    |   |   |   |   |   |   |   |    |    |\n",
        "| 2017-12           | 0.54 |    |    |   |   |   |   |   |   |   |    |    |\n",
        "| 2018-01           | 0.42 |    |    |   |   |   |   |   |   |   |    |    |\n",
        "| 2018-02           | 0.46 |    |    |   |   |   |   |   |   |   |    |    |\n",
        "| 2018-03           | 0.56 |    |    |   |   |   |   |   |   |   |    |    |\n",
        "| 2018-04           | 0.48 |    |    |   |   |   |   |   |   |   |    |    |\n",
        "| 2018-05           | 0.63 |    |    |   |   |   |   |   |   |   |    |    |\n",
        "```\n",
        "\n",
        "![image.png](attachment:image.png)\n",
        "\n",
        "</div>"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {},
      "outputs": [],
      "source": [
        "total_visits = len(df_visits)\n",
        "total_orders = len(df_orders)\n",
        "conversion_rate_geral = (total_orders / total_visits) * 100\n",
        "\n",
        "visits_por_origem = df_visits.groupby('id')['uid'].nunique()\n",
        "orders_por_origem = df_orders.merge(df_visits[['uid', 'id']], on='uid').groupby('id')['uid'].count()\n",
        "conversion_rate_por_origem = (orders_por_origem / visits_por_origem) * 100\n",
        "\n",
        "plt.figure(figsize=(10, 6))\n",
        "plt.bar(['Visitas', 'Pedidos'], [total_visits, total_orders], color=['skyblue', 'lightcoral'])\n",
        "plt.title('Funil de Conversão Geral (Visitas -> Pedidos)')\n",
        "plt.ylabel('Número')\n",
        "plt.show()\n"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        "## Conclusão e Recomendações para a Estratégia de Marketing da Y.Afisha\n",
        "\n",
        "**Sumário Executivo:**\n",
        "\n",
        "A análise de marketing da Y.Afisha revela que, apesar de uma base de usuários engajada, o **ROI geral das campanhas de marketing é negativo (-23.42%)**.  Isso indica que os gastos com marketing superam a receita gerada, sinalizando a necessidade urgente de otimização da estratégia.\n",
        "\n",
        "**Recomendações Estratégicas:**\n",
        "\n",
        "1.  **Redução do Orçamento de Marketing:**\n",
        "    *   **Justificativa:** O ROI negativo demonstra que o investimento atual não é sustentável. Reduzir o orçamento geral é crucial para evitar maiores perdas financeiras.\n",
        "    *   **Ação:**  Recomendamos uma **redução conservadora no orçamento total de marketing**, reavaliando os gastos em cada canal para maximizar a eficiência com recursos limitados.\n",
        "\n",
        "2.  **Realocação Estratégica de Recursos para Canais de Baixo CAC:**\n",
        "    *   **Justificativa:** As origens **9 e 10** apresentam o menor Custo de Aquisição de Cliente (CAC), indicando maior eficiência na conversão de usuários em clientes a um custo menor.\n",
        "    *   **Ação:**  **Aumentar o investimento nas origens 9 e 10**, que demonstraram ser os canais mais custo-efetivos. Explorar e otimizar ainda mais esses canais pode gerar um melhor retorno sobre o investimento.\n",
        "\n",
        "3.  **Reavaliação e Otimização de Canais de Alto CAC:**\n",
        "    *   **Justificativa:** As origens **2 e 3** apresentam os CACs mais altos e, portanto, são menos eficientes no momento.\n",
        "    *   **Ação:**\n",
        "        *   **Investigar e otimizar as campanhas nas origens 2 e 3:** Analisar detalhadamente as estratégias de marketing nesses canais para identificar pontos de ineficiência e oportunidades de melhoria. Isso pode incluir a revisão de segmentação de público, criativos de anúncios, e páginas de destino.\n",
        "        *   **Considerar a suspensão ou redução drástica do investimento:** Se a otimização não apresentar resultados significativos em um período determinado, recomenda-se **suspender ou reduzir drasticamente o investimento nesses canais**, direcionando os recursos para origens mais promissoras.\n",
        "\n",
        "4.  **Foco na Melhoria do Engajamento e Valor da Compra:**\n",
        "    *   **Justificativa:** Apesar da boa retenção inicial, a curta duração das sessões e o baixo volume médio de compra limitam o LTV dos clientes.\n",
        "    *   **Ação:**\n",
        "        *   **Aumentar o engajamento nas sessões:** Implementar estratégias para aumentar o tempo de permanência dos usuários no site ou aplicativo, como melhorias na experiência do usuário, conteúdo mais atraente e recomendações personalizadas.\n",
        "        *   **Incentivar compras de maior valor:** Desenvolver táticas para aumentar o valor médio das compras, como promoções para compras acima de um determinado valor, ofertas de pacotes, ou destaque de produtos de maior receita.\n",
        "\n",
        "**Métricas Chave e Justificativas:**\n",
        "\n",
        "*   **ROI (Retorno sobre Investimento):**  Métrica primordial para avaliar a rentabilidade geral do investimento em marketing. O ROI negativo (-23.42%) sinaliza que a estratégia atual não é economicamente viável.\n",
        "*   **CAC (Custo de Aquisição de Cliente):** Essencial para entender a eficiência de cada canal de marketing. A priorização de canais com CAC mais baixo (9 e 10) visa otimizar o custo por cliente adquirido.\n",
        "*   **LTV (Lifetime Value):**  Importante para medir o valor a longo prazo de cada cliente. Aumentar o LTV, mesmo que o CAC seja mantido, pode melhorar a rentabilidade geral. As ações recomendadas para aumentar o engajamento e o valor da compra visam diretamente este aumento do LTV.\n",
        "*   **DAU/WAU/MAU e Retenção:** Indicam o engajamento da base de usuários. Embora os números sejam relativamente bons, a otimização da experiência do usuário pode aumentar ainda mais o engajamento e, consequentemente, a conversão e a receita.\n",
        "*   **Tempo de Sessão:**  A curta duração média das sessões (11 minutos) sugere que há espaço para melhorar a experiência do usuário e o engajamento dentro das sessões, com o objetivo de aumentar a conversão e o valor da compra.\n",
        "*   **Tempo até a Primeira Compra:** O curto período de 3 dias sugere um potencial de conversão rápida. As campanhas de marketing podem ser otimizadas para capitalizar essa janela de oportunidade e incentivar a primeira compra de novos usuários.\n",
        "*   **Volume Médio de Compra e Mediana:**  O baixo volume médio e mediana indicam a necessidade de estratégias para aumentar o valor das transações, o que impactará diretamente na receita e no LTV.\n",
        "\n",
        "**Conclusão Final:**\n",
        "\n",
        "É imperativo que a Y.Afisha adote uma abordagem mais estratégica e focada em resultados para suas campanhas de marketing. A realocação do orçamento para canais mais eficientes, combinada com esforços para melhorar o engajamento do usuário e o valor da compra, são passos cruciais para reverter o ROI negativo e construir uma estratégia de marketing sustentável e lucrativa a longo prazo. A monitorização contínua das métricas chave e a realização de testes A/B para otimizar as campanhas são fundamentais para o sucesso futuro."
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        "<div class=\"alert alert-success\">\n",
        "<strong>Comentário</strong>\n",
        "\n",
        "Conclusão muito boa fundamentada em dados.\n",
        "</div>"
      ]
    }
  ],
  "metadata": {
    "kernelspec": {
      "display_name": "Python 3",
      "language": "python",
      "name": "python3"
    },
    "language_info": {
      "codemirror_mode": {
        "name": "ipython",
        "version": 3
      },
      "file_extension": ".py",
      "mimetype": "text/x-python",
      "name": "python",
      "nbconvert_exporter": "python",
      "pygments_lexer": "ipython3",
      "version": "3.12.5"
    },
    "toc": {
      "base_numbering": 1,
      "nav_menu": {},
      "number_sections": true,
      "sideBar": true,
      "skip_h1_title": true,
      "title_cell": "Table of Contents",
      "title_sidebar": "Contents",
      "toc_cell": false,
      "toc_position": {},
      "toc_section_display": true,
      "toc_window_display": false
    }
  },
  "nbformat": 4,
  "nbformat_minor": 2
}

--- ARQUIVO: Sprints\sprint 8\sprint8.txt ---
{
 "cells": [
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Revisão de código \n",
    "\n",
    "Olá! \n",
    "\n",
    "Meu nome é Suelen. Estou feliz em revisar seu projeto hoje!\n",
    "\n",
    "Quando vejo um erro pela primeira vez, apenas aponto. Deixarei você encontrá-lo e corrigi-lo sozinho. Além disso, ao longo do texto, farei algumas observações sobre melhorias no código e também farei comentários sobre suas percepções sobre o assunto. Mas se você ainda não consegue lidar com essa tarefa, darei uma dica mais precisa na próxima iteração e também alguns exemplos práticos. Estarei aberto a feedbacks e discussões sobre o tema.\n",
    "\n",
    "Você pode encontrar meus comentários em caixas verdes, amarelas ou vermelhas como estas:\n",
    "\n",
    "\n",
    "<div class=\"alert alert-block alert-success\">\n",
    "<b>Comentário: </b> <a class=\"tocSkip\"></a>\n",
    "\n",
    "Sucesso. Tudo está correto.\n",
    "</div>\n",
    "\n",
    "<div class=\"alert alert-block alert-warning\">\n",
    "<b>Comentário: </b> <a class=\"tocSkip\"></a>\n",
    "\n",
    "Observações. Algumas recomendações.\n",
    "</div>\n",
    "\n",
    "<div class=\"alert alert-block alert-danger\">\n",
    "\n",
    "<b>Comentário: </b> <a class=\"tocSkip\"></a>\n",
    "\n",
    "O bloco requer algumas correções. O trabalho não pode ser aceito com os comentários vermelhos.\n",
    "</div>\n",
    "\n",
    "Você pode me responder usando isto:\n",
    "\n",
    "<div class=\"alert alert-block alert-info\">\n",
    "<b>Resposta do aluno.  \n",
    "    </b> <a class=\"tocSkip\"></a>\n",
    "</div>\n",
    "\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "<div class=\"alert alert-block alert-danger\">\n",
    "\n",
    "<b>Comentário geral: </b> <a class=\"tocSkip\"></a>\n",
    "\n",
    "Parabéns pela conclusão do projeto, Jonathas !😊. Seu projeto já está com uma qualidade excelente. Gostei muito da sua análise temporal, no entanto o projeto exige analise temporal em coortes. Adicionei comentários com dicas de como resolvermos essas análises. Os pontos necessários de ajustes são: \n",
    "\n",
    "    - Cálculo de LTV por coortes \n",
    "    - Cálculo CAC e ROI por coortes \n",
    "    \n",
    "Boa sorte! Estamos próximos da aprovação!🤞 \n",
    "\n",
    "Em caso de dúvidas, não hesite em nos perguntar!\n",
    "</div>"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "import pandas as pd\n",
    "import numpy as np\n",
    "import matplotlib.pyplot as plt\n",
    "import seaborn as sns\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "df_cost = pd.read_csv('dados/costs_us.csv ')\n",
    "df_orders = pd.read_csv('dados/orders_log_us.csv')\n",
    "df_visits = pd.read_csv('dados/visits_log_us.csv')"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "---\n",
    "### Analizando cost\n",
    "A tabela costs (dados sobre as despesas com marketing):\n",
    "\n",
    "- source_id — identificador da origem de anúncio\n",
    "- dt — data\n",
    "- costs — despesas com esta origem de anúncio neste dia\n",
    "\n",
    "#### Mudanças\n",
    "Tabela dt para data\n",
    "\n",
    "##### nome novo das colunas\n",
    "- id\n",
    "- date\n",
    "- cost"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "df_cost.info()\n",
    "df_cost.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Renomeando as colunas\n",
    "df_cost.rename(columns={'source_id': 'id', 'dt': 'date', 'df_cost': 'cost'}, inplace=True)\n",
    "\n",
    "# Convertendo a coluna 'date' para datetime\n",
    "df_cost['date'] = pd.to_datetime(df_cost['date'])\n",
    "\n",
    "# Exibindo o resultado\n",
    "df_cost.info()\n",
    "df_cost.head()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "---\n",
    "### Analizando orders\n",
    "A tabela orders (dados sobre os pedidos):\n",
    "\n",
    "- Uid — identificador unívoco do usuário que faz um pedido\n",
    "- Buy Ts — data e hora do pedido\n",
    "- Revenue — a receita da Y.Afisha com o pedido\n",
    "\n",
    "#### Mudanças\n",
    "Coluna Buy Ts para DateFrame\n",
    "\n",
    "##### nome novo das colunas\n",
    "- buy_date\n",
    "- date\n",
    "- uid"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "df_orders.info()\n",
    "df_orders.tail()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Renomeando as colunas\n",
    "df_orders.rename(columns={'Uid': 'uid', 'Buy Ts': 'buy_date', 'Revenue': 'revenue'}, inplace=True)\n",
    "\n",
    "# Convertendo a coluna 'buy_date' para datetime\n",
    "df_orders['buy_date'] = pd.to_datetime(df_orders['buy_date'])\n",
    "\n",
    "# Exibindo o resultado\n",
    "df_orders.info()\n",
    "df_orders.tail()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "---\n",
    "### Analizando visits\n",
    "A tabela visits (os logs do servidor com dados sobre os acessos ao site):\n",
    "\n",
    "- Uid — identificador unívoco do usuário\n",
    "- Device — dispositivo do usuário\n",
    "- Start Ts — data e hora do início da sessão\n",
    "- End Ts — data e hora do final da sessão\n",
    "- Source Id — identificador da origem do anúncio através do qual o usuário chegou\n",
    "\n",
    "#### Mudanças\n",
    "Coluna End ts, start Ts para DateFrame\n",
    "Coluna devise para category\n",
    "\n",
    "##### nome novo das colunas\n",
    "- device\n",
    "- end_date\n",
    "- id\n",
    "- start_date\n",
    "- uid"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "df_visits.info()\n",
    "df_visits.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Renomeando as colunas\n",
    "df_visits.rename(columns={'Uid': 'uid', 'Device': 'device', 'Start Ts': 'start_date', 'End Ts': 'end_date', 'Source Id': 'id'}, inplace=True)\n",
    "\n",
    "# Convertendo as colunas de data para datetime\n",
    "df_visits['start_date'] = pd.to_datetime(df_visits['start_date'])\n",
    "df_visits['end_date'] = pd.to_datetime(df_visits['end_date'])\n",
    "\n",
    "# Convertendo a coluna 'device' para category\n",
    "df_visits['device'] = df_visits['device'].astype('category')\n",
    "\n",
    "# Exibindo o resultado\n",
    "df_visits.info()\n",
    "df_visits.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "df_visits.sample(10)\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Na tabela df_visits teve uma redução no tamanho de 3,4 megas"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "#Quantas pessoas usam-no cada dia, semana e mês?\n",
    "# Criando a coluna 'week_start' com a data da segunda-feira daquela semana\n",
    "df_visits['week_start'] = df_visits['end_date'] - pd.to_timedelta(df_visits['end_date'].dt.weekday, unit='D')\n",
    "df_visits['week_start'] = df_visits['week_start'].dt.date\n",
    "\n",
    "# Agrupando por dia (usando apenas a parte da data) e calculando o número de usuários únicos em cada dia\n",
    "daily_users = df_visits.groupby(df_visits['end_date'].dt.date)['uid'].nunique()\n",
    "qts_pessoas_dia = daily_users.mean()\n",
    "\n",
    "# Agrupando por semana (coluna week_start) e calculando o número de usuários únicos em cada semana\n",
    "weekly_users = df_visits.groupby('week_start')['uid'].nunique()\n",
    "qts_pessoas_semana = weekly_users.mean()\n",
    "\n",
    "# Agrupando por mês e calculando o número de usuários únicos em cada mês\n",
    "monthly_users = df_visits.groupby(df_visits['end_date'].dt.to_period(\"M\"))['uid'].nunique()\n",
    "qts_pessoas_mes = monthly_users.mean()\n",
    "\n",
    "# Imprimindo as médias com duas casas decimais\n",
    "print(f\"\"\"O Y.Afisha em média tem:\n",
    "      - por dia: {qts_pessoas_dia:.0f} pessoas\n",
    "      - por semana: {qts_pessoas_semana:.0f} pessoas\n",
    "      - por mês: {qts_pessoas_mes:.0f} pessoas\"\"\")\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Uso diário (DAU)\n",
    "dau = df_visits.groupby(df_visits['start_date'].dt.date)['uid'].nunique()\n",
    "dau.plot(title='Usuários Diários (DAU)')\n",
    "plt.show()\n",
    "\n",
    "# Uso semanal (WAU)\n",
    "wau = df_visits.resample('W', on='start_date')['uid'].nunique()\n",
    "wau.plot(title='Usuários Semanais (WAU)')\n",
    "plt.show()\n",
    "\n",
    "# Uso mensal (MAU)\n",
    "mau = df_visits.resample('M', on='start_date')['uid'].nunique()\n",
    "mau.plot(title='Usuários Mensais (MAU)')\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "#Quantas sessões ocorrem por dia? (um usuário pode realizar várias sessões).\n",
    "# Agrupando por dia (extraindo apenas a data de 'end_date') e contando as sessões\n",
    "daily_sessions = df_visits.groupby(df_visits['end_date'].dt.date).size()\n",
    "# Exibindo o número de sessões por dia\n",
    "print(\"Sessões por dia:\")\n",
    "print(daily_sessions)\n",
    "# Se você quiser calcular a média de sessões por dia:\n",
    "average_sessions = daily_sessions.mean()\n",
    "print(f\"\\nMédia de sessões por dia: {average_sessions.mean():.0f}\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "985/906 -1"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "sessoes_dia = df_visits.resample('D', on='start_date').size()\n",
    "sessoes_dia.plot(title='Sessões por Dia')\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Um usuario em media pode fazer 2 sessões porém é raro(8%). "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "#Que comprimento tem cada sessão?\n",
    "t_das_sessões = (df_visits['end_date'] - df_visits['start_date'] ).dt.total_seconds()/60 \n",
    "print(t_das_sessões)\n",
    "print()\n",
    "print(f\"O tempo médio das sessões é:{t_das_sessões.mean():.0f}\")"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "<div class=\"alert alert-block alert-success\">\n",
    "<b> Comentário: </b> <a class=\"tocSkip\"></a>\n",
    "    \n",
    "- O import das bibliotecas foi feito de forma correta e em uma célula separada\n",
    "- Os dados foram carregados corretamente.\n",
    "- Foram utilizados comandos como `head()`e `info()`.\n",
    "- Bom uso das visualizações gráficas! É uma ótima forma de enriquecer ainda mais a análise exploratória dos dados.\n",
    "- Aluno adicionou comentários com suas observações osbre os dados.\n",
    "</div>"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "#Com que frequência os usuários voltam?\n",
    "\n",
    "# Ordenar o DataFrame por usuário e data de visita\n",
    "df_visits = df_visits.sort_values(by=['uid', 'start_date'])\n",
    "\n",
    "# Agrupar por usuário e selecionar a primeira e segunda visita de cada um\n",
    "primeira_segunda_visitas = df_visits.groupby('uid').head(2)\n",
    "\n",
    "# Calcular a diferença de tempo entre a primeira e a segunda visita\n",
    "primeira_segunda_visitas['time_diff'] = primeira_segunda_visitas.groupby('uid')['start_date'].diff()\n",
    "\n",
    "# Filtrar apenas as segundas visitas (onde há uma primeira visita anterior)\n",
    "segundas_visitas = primeira_segunda_visitas.dropna(subset=['time_diff'])\n",
    "\n",
    "# Calcular a porcentagem de usuários que retornaram da primeira para a segunda visita\n",
    "porcentagem_retorno_primeira_segunda = (len(segundas_visitas) / df_visits['uid'].nunique()) * 100\n",
    "\n",
    "print(f\"Porcentagem de usuários que retornaram da primeira para a segunda visita: {porcentagem_retorno_primeira_segunda:.0f}%\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Quando as pessoas começam a comprar?\n",
    "# 1. Identificar a primeira visita de cada usuário\n",
    "first_visit = df_visits.groupby('uid')['start_date'].min()\n",
    "\n",
    "# 2. Identificar a primeira compra de cada usuário\n",
    "first_purchase = df_orders.groupby('uid')['buy_date'].min()\n",
    "\n",
    "# 3. Calcular a diferença entre a primeira visita e a primeira compra\n",
    "# Para garantir que as duas colunas estejam no formato datetime\n",
    "first_visit = pd.to_datetime(first_visit)\n",
    "first_purchase = pd.to_datetime(first_purchase)\n",
    "\n",
    "# Calcular a diferença de dias entre a primeira visita e a primeira compra\n",
    "days_to_first_purchase = (first_purchase - first_visit).dt.days\n",
    "\n",
    "def replace_negative_days(x):\n",
    "    if x >= 0:  # Se o valor for positivo ou zero\n",
    "        return x  # Mantém o valor original\n",
    "    else:  # Se o valor for negativo\n",
    "        return 0  # Substitui por 0\n",
    "# Se a diferença for 0, será Dia 0; Se for 1, será Dia 1, e assim por diante.\n",
    "days_to_first_purchase_label = days_to_first_purchase.apply(replace_negative_days)\n",
    "\n",
    "# Exibir o resultado\n",
    "print(f\"Em media começam a comprar em {days_to_first_purchase_label.mean():.0f} dias\")\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "\n",
    "# Criar coluna 'cohort' com o mês do primeiro acesso de cada usuário\n",
    "df_visits['cohort'] = df_visits.groupby('uid')['start_date'].transform('min').dt.to_period('M')\n",
    "\n",
    "# Calcular a diferença em meses entre a data da sessão e a coorte\n",
    "df_visits['month_offset'] = (df_visits['start_date'].dt.to_period('M') - df_visits['cohort']).apply(lambda x: x.n)\n",
    "# Agrupar por coorte e offset mensal\n",
    "cohort_data = df_visits.groupby(['cohort', 'month_offset'])['uid'].nunique().reset_index()\n",
    "\n",
    "# Criar pivot table para visualização\n",
    "cohort_pivot = cohort_data.pivot_table(index='cohort', columns='month_offset', values='uid', aggfunc='sum')\n",
    "\n",
    "# Calcular a retenção como porcentagem do mês inicial\n",
    "cohort_size = cohort_pivot[0]  # Número de usuários no mês 0 (coorte)\n",
    "retention_matrix = cohort_pivot.divide(cohort_size, axis=0) * 100  # Retenção em %\n",
    "plt.figure(figsize=(12, 8))\n",
    "sns.heatmap(\n",
    "    retention_matrix,\n",
    "    annot=True,\n",
    "    fmt='.1f',\n",
    "    cmap='Blues',\n",
    "    linewidths=0.5,\n",
    "    mask=retention_matrix.isnull()\n",
    ")\n",
    "plt.title('Retenção Mensal por Coorte (%) - Corrigido')\n",
    "plt.xlabel('Meses após a Coorte')\n",
    "plt.ylabel('Coorte (Mês/Ano)')\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Dos 23% que voltam a comprar tendem a voltar dps de 3 dias."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "<div class=\"alert alert-block alert-success\">\n",
    "<b> Comentário: </b> <a class=\"tocSkip\"></a>\n",
    "    \n",
    "Taxa de retenção calculada corretamente.\n",
    "</div>"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Quantos pedidos os clientes fazem durante um determinado período de tempo?\n",
    "\n",
    "\n",
    "pedidos_dia = df_orders.groupby(df_orders['buy_date'].dt.date)['uid'].nunique().mean()\n",
    "\n",
    "# 2. Número médio de pessoas por semana\n",
    "pedidos_semana = df_orders.groupby(df_orders['buy_date'].dt.isocalendar().week)['uid'].nunique().mean()\n",
    "\n",
    "# 3. Número médio de pessoas por mês\n",
    "pedidos_mes = df_orders.groupby(df_orders['buy_date'].dt.to_period('M'))['uid'].nunique().mean()\n",
    "\n",
    "# Exibir os resultados\n",
    "print(f\"\"\"Pedidos em média :\n",
    "      - por dia: {pedidos_dia:.0f} pessoas\n",
    "      - por semana: {pedidos_semana:.0f} pessoas\n",
    "      - por mês: {pedidos_mes:.0f} pessoas\"\"\")\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Primeiro acesso e primeira compra por usuário\n",
    "primeiro_acesso = df_visits.groupby('uid')['start_date'].min().reset_index()\n",
    "primeira_compra = df_orders.groupby('uid')['buy_date'].min().reset_index()\n",
    "\n",
    "# Combinar dados e calcular diferença\n",
    "df_conversao = pd.merge(primeiro_acesso, primeira_compra, on='uid', how='inner')\n",
    "df_conversao['dias_conversao'] = (df_conversao['buy_date'] - df_conversao['start_date']).dt.days\n",
    "\n",
    "# Distribuição do tempo de conversão\n",
    "plt.hist(df_conversao['dias_conversao'], bins=30, edgecolor='k')\n",
    "plt.title('Distribuição do Tempo para Primeira Compra')\n",
    "plt.xlabel('Dias após o Registro')\n",
    "plt.ylabel('Número de Usuários')\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Qual é o volume médio de uma compra?\n",
    "\n",
    "volume_medio_compra = df_orders['revenue'].mean()\n",
    "volume_mediano_compra = df_orders['revenue'].median()\n",
    "\n",
    "\n",
    "print(f\"\"\"O volume médio de uma compra é: {volume_medio_compra:.2f}\n",
    "O volume mediano de uma compras é: {volume_mediano_compra:.2f}\"\"\")"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Média de 5 e mediana de 2,50 indicam que 50% gastam até 2,50, enquanto alguns clientes com valores altos elevam a média."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Quanto dinheiro eles trazem para a empresa (LTV)?\n",
    "import pandas as pd\n",
    "\n",
    "# Definir margem bruta\n",
    "margem_bruta = 0.3\n",
    "\n",
    "# Calcular o LTV, excluindo valores zero e nulos\n",
    "ltv = (\n",
    "    df_orders.groupby('uid')['revenue']\n",
    "    .sum()                           # Soma da receita por usuário\n",
    "    .replace(0.0, pd.NA)             # Substitui zeros por NA (para excluir)\n",
    "    .dropna()                        # Remove todos os NA (zeros e nulos originais)\n",
    "    * margem_bruta                   # Aplica a margem bruta\n",
    ")\n",
    "\n",
    "# Calcular o LTV médio ajustado\n",
    "ltv_ajustado = ltv.mean()\n",
    "\n",
    "# Resultados\n",
    "print(f\"\"\"O LTV (excluindo clientes sem receita) é: \n",
    "{ltv}\n",
    "\n",
    "O valor médio que um cliente traz (considerando apenas compradores) é: {ltv_ajustado:.2f}\"\"\")\n"
   ]
  },
  {
   "attachments": {
    "image.png": {
     "image/png": ""
    }
   },
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "<div class=\"alert alert-block alert-danger\">\n",
    "<b> Comentário: </b> <a class=\"tocSkip\"></a>\n",
    "    \n",
    "A análise LTV também deve ser feita por coorte.  Semelhante ao cálculo de retenção que você fez anteriormente.\n",
    "\n",
    "Exemplo: \n",
    "    \n",
    "```python \n",
    "#calculando a quantidade de dinheiro que o usuários trazem para a empresa (lifetime value)\n",
    "\n",
    "#derivando a coluna first_order_month\n",
    "first_orders = first_order.copy()\n",
    "first_orders['first_order_month'] = first_orders['first_order_date'].dt.to_period('M')\n",
    "\n",
    "#calculando o número de clientes, por mês da primeira compra\n",
    "cohort_sizes = (\n",
    "    first_orders.groupby('first_order_month')\n",
    "    .agg({'uid': 'nunique'})\n",
    "    .reset_index())\n",
    "cohort_sizes.columns = ['first_order_month', 'n_buyers']\n",
    "\n",
    "margin_rate = 0.4\n",
    "\n",
    "#mesclando as informações de pedidos com a primeira compra por cliente\n",
    "df_orders_ = pd.merge(df_orders, fi..continue o código\n",
    "\n",
    "#calculando a receita por coorte e mês\n",
    "cohorts = (\n",
    "    df_orders_.groupby(['first_order_month', 'order_month'])\n",
    "    .agg({'revenue': 'sum'})\n",
    "    .reset_index())\n",
    "\n",
    "#mesclando o tamanho da coorte com a receita\n",
    "report = pd.merge(cohort_sizes,...continue o código\n",
    "\n",
    "```\n",
    "    \n",
    "Exemplo de output:\n",
    "![image.png](attachment:image.png)    \n",
    "\n",
    "\n",
    "</div>"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Em toda sua vida um cliente gasta em média 2.07, levando em conta uma margem bruta de 30%."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "#Quanto dinheiro foi gasto? No total/por origem/ao longo do tempo\n",
    "\n",
    "# 1. Total de dinheiro gasto\n",
    "total_cost = df_cost['costs'].sum()\n",
    "print(f\"Total de dinheiro gasto: {total_cost:.2f}\")\n",
    "\n",
    "# 2. Dinheiro gasto por origem (ID)\n",
    "cost_by_id = df_cost.groupby('id')['costs'].sum().reset_index()\n",
    "print(\"\\nDinheiro gasto por origem (ID):\")\n",
    "print(cost_by_id)\n",
    "\n",
    "# 3. Dinheiro gasto ao longo do tempo\n",
    "df_cost['date'] = pd.to_datetime(df_cost['date'])  # Garantir que a coluna 'date' seja do tipo datetime\n",
    "cost_over_time = df_cost.groupby('date')['costs'].sum().reset_index()\n",
    "print(\"\\nDinheiro gasto ao longo do tempo:\")\n",
    "print(cost_over_time)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "custos_por_origem = df_cost.groupby('id')['costs'].sum()\n",
    "custos_por_origem.plot(kind='bar', title='Custos por Origem')\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "#Quanto custou a aquisição de clientes para cada origem?\n",
    "clientes_por_origem = df_visits.groupby('id')['uid'].nunique().reset_index()\n",
    "clientes_por_origem.columns = ['id', 'num_clientes']\n",
    "\n",
    "# Juntar com df_cost para obter o custo total por origem\n",
    "custo_por_origem = df_cost.groupby('id')['costs'].sum().reset_index()\n",
    "\n",
    "# Calcular o CAC por origem\n",
    "cac_por_origem = pd.merge(custo_por_origem, clientes_por_origem, on='id')\n",
    "cac_por_origem['CAC'] = cac_por_origem['costs'] / cac_por_origem['num_clientes']\n",
    "\n",
    "# Exibir o resultado\n",
    "print(\"Custo de Aquisição de Clientes (CAC) por origem:\")\n",
    "print(cac_por_origem[['id', 'CAC']])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Usuários adquiridos por origem (primeiro acesso)\n",
    "usuarios_por_origem = df_visits.groupby('id')['uid'].nunique()\n",
    "\n",
    "# CAC por origem\n",
    "cac = custos_por_origem / usuarios_por_origem\n",
    "cac.plot(kind='bar', title='CAC por Origem')\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "#Os investimentos valeram a pena? (ROI)\n",
    "# 1. Calcular o custo total de aquisição\n",
    "custo_total = df_cost['costs'].sum()\n",
    "print(f\"Custo total de aquisição: {custo_total:.2f}\")\n",
    "\n",
    "# 2. Calcular a receita total gerada\n",
    "receita_total = df_orders['revenue'].sum()\n",
    "print(f\"Receita total gerada: {receita_total:.2f}\")\n",
    "\n",
    "# 3. Calcular o ROI\n",
    "roi = (receita_total - custo_total) / custo_total * 100\n",
    "print(f\"ROI: {roi:.2f}%\")\n",
    "\n",
    "# 4. Verificar se o investimento valeu a pena\n",
    "if roi > 0:\n",
    "    print(\"O investimento valeu a pena! (ROI positivo)\")\n",
    "else:\n",
    "    print(\"O investimento não valeu a pena. (ROI negativo)\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Receita por origem (considerando primeiro acesso)\n",
    "usuarios_compra = df_visits.drop_duplicates('uid').merge(df_orders, on='uid')\n",
    "receita_por_origem = usuarios_compra.groupby('id')['revenue'].sum()\n",
    "roi = (receita_por_origem - custos_por_origem) / custos_por_origem\n",
    "roi.plot(kind='bar', title='ROI por Origem')\n",
    "plt.show()"
   ]
  },
  {
   "attachments": {
    "image.png": {
     "image/png": ""
    }
   },
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "<div class=\"alert alert-block alert-danger\">\n",
    "<b> Comentário: </b> <a class=\"tocSkip\"></a>\n",
    "\n",
    "    \n",
    "Aqui também precisamos calcular o `ROI` / `ROMI` por cohort, pois os grupos podem ter valores diferentes de `LTV` e isso pode influenciar no resultado final. O cálculo da métrica pode ser feito como algo assim:\n",
    "    \n",
    "```python\n",
    "your_agg_df['romi'] = your_agg_df['ltv'] / your_agg_df['cac']\n",
    "```\n",
    "\n",
    "O resultado pode ser apresentado como uma `pivot_table` por `cohort`, conforme você fez para outros indicadores em seu projeto. Adicionalmente, você pode analisar o `ROMI` por origem.\n",
    "    \n",
    "```markdown\n",
    "|                   |      |    |    |   |   |   |   |   |   |   |    |    |\n",
    "|-------------------|------|----|----|---|---|---|---|---|---|---|----|----|\n",
    "| cohort            | 0    | 1  | 2  | 3 | 4 | 5 | 6 | 7 | 8 | 9 | 10 | 11 |\n",
    "| first_order_month |      |    |    |   |   |   |   |   |   |   |    |    |\n",
    "| 2017-06           | 0.53 | .. | .. |   |   |   |   |   |   |   |    |    |\n",
    "| 2017-07           | 0.63 | .. |    |   |   |   |   |   |   |   |    |    |\n",
    "| 2017-08           | 0.49 | .. |    |   |   |   |   |   |   |   |    |    |\n",
    "| 2017-09           | 0.60 |    |    |   |   |   |   |   |   |   |    |    |\n",
    "| 2017-10           | 0.60 |    |    |   |   |   |   |   |   |   |    |    |\n",
    "| 2017-11           | 0.55 |    |    |   |   |   |   |   |   |   |    |    |\n",
    "| 2017-12           | 0.54 |    |    |   |   |   |   |   |   |   |    |    |\n",
    "| 2018-01           | 0.42 |    |    |   |   |   |   |   |   |   |    |    |\n",
    "| 2018-02           | 0.46 |    |    |   |   |   |   |   |   |   |    |    |\n",
    "| 2018-03           | 0.56 |    |    |   |   |   |   |   |   |   |    |    |\n",
    "| 2018-04           | 0.48 |    |    |   |   |   |   |   |   |   |    |    |\n",
    "| 2018-05           | 0.63 |    |    |   |   |   |   |   |   |   |    |    |\n",
    "```\n",
    "\n",
    "![image.png](attachment:image.png)\n",
    "\n",
    "</div>"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "total_visits = len(df_visits)\n",
    "total_orders = len(df_orders)\n",
    "conversion_rate_geral = (total_orders / total_visits) * 100\n",
    "\n",
    "visits_por_origem = df_visits.groupby('id')['uid'].nunique()\n",
    "orders_por_origem = df_orders.merge(df_visits[['uid', 'id']], on='uid').groupby('id')['uid'].count()\n",
    "conversion_rate_por_origem = (orders_por_origem / visits_por_origem) * 100\n",
    "\n",
    "plt.figure(figsize=(10, 6))\n",
    "plt.bar(['Visitas', 'Pedidos'], [total_visits, total_orders], color=['skyblue', 'lightcoral'])\n",
    "plt.title('Funil de Conversão Geral (Visitas -> Pedidos)')\n",
    "plt.ylabel('Número')\n",
    "plt.show()\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Conclusão e Recomendações para a Estratégia de Marketing da Y.Afisha\n",
    "\n",
    "**Sumário Executivo:**\n",
    "\n",
    "A análise de marketing da Y.Afisha revela que, apesar de uma base de usuários engajada, o **ROI geral das campanhas de marketing é negativo (-23.42%)**.  Isso indica que os gastos com marketing superam a receita gerada, sinalizando a necessidade urgente de otimização da estratégia.\n",
    "\n",
    "**Recomendações Estratégicas:**\n",
    "\n",
    "1.  **Redução do Orçamento de Marketing:**\n",
    "    *   **Justificativa:** O ROI negativo demonstra que o investimento atual não é sustentável. Reduzir o orçamento geral é crucial para evitar maiores perdas financeiras.\n",
    "    *   **Ação:**  Recomendamos uma **redução conservadora no orçamento total de marketing**, reavaliando os gastos em cada canal para maximizar a eficiência com recursos limitados.\n",
    "\n",
    "2.  **Realocação Estratégica de Recursos para Canais de Baixo CAC:**\n",
    "    *   **Justificativa:** As origens **9 e 10** apresentam o menor Custo de Aquisição de Cliente (CAC), indicando maior eficiência na conversão de usuários em clientes a um custo menor.\n",
    "    *   **Ação:**  **Aumentar o investimento nas origens 9 e 10**, que demonstraram ser os canais mais custo-efetivos. Explorar e otimizar ainda mais esses canais pode gerar um melhor retorno sobre o investimento.\n",
    "\n",
    "3.  **Reavaliação e Otimização de Canais de Alto CAC:**\n",
    "    *   **Justificativa:** As origens **2 e 3** apresentam os CACs mais altos e, portanto, são menos eficientes no momento.\n",
    "    *   **Ação:**\n",
    "        *   **Investigar e otimizar as campanhas nas origens 2 e 3:** Analisar detalhadamente as estratégias de marketing nesses canais para identificar pontos de ineficiência e oportunidades de melhoria. Isso pode incluir a revisão de segmentação de público, criativos de anúncios, e páginas de destino.\n",
    "        *   **Considerar a suspensão ou redução drástica do investimento:** Se a otimização não apresentar resultados significativos em um período determinado, recomenda-se **suspender ou reduzir drasticamente o investimento nesses canais**, direcionando os recursos para origens mais promissoras.\n",
    "\n",
    "4.  **Foco na Melhoria do Engajamento e Valor da Compra:**\n",
    "    *   **Justificativa:** Apesar da boa retenção inicial, a curta duração das sessões e o baixo volume médio de compra limitam o LTV dos clientes.\n",
    "    *   **Ação:**\n",
    "        *   **Aumentar o engajamento nas sessões:** Implementar estratégias para aumentar o tempo de permanência dos usuários no site ou aplicativo, como melhorias na experiência do usuário, conteúdo mais atraente e recomendações personalizadas.\n",
    "        *   **Incentivar compras de maior valor:** Desenvolver táticas para aumentar o valor médio das compras, como promoções para compras acima de um determinado valor, ofertas de pacotes, ou destaque de produtos de maior receita.\n",
    "\n",
    "**Métricas Chave e Justificativas:**\n",
    "\n",
    "*   **ROI (Retorno sobre Investimento):**  Métrica primordial para avaliar a rentabilidade geral do investimento em marketing. O ROI negativo (-23.42%) sinaliza que a estratégia atual não é economicamente viável.\n",
    "*   **CAC (Custo de Aquisição de Cliente):** Essencial para entender a eficiência de cada canal de marketing. A priorização de canais com CAC mais baixo (9 e 10) visa otimizar o custo por cliente adquirido.\n",
    "*   **LTV (Lifetime Value):**  Importante para medir o valor a longo prazo de cada cliente. Aumentar o LTV, mesmo que o CAC seja mantido, pode melhorar a rentabilidade geral. As ações recomendadas para aumentar o engajamento e o valor da compra visam diretamente este aumento do LTV.\n",
    "*   **DAU/WAU/MAU e Retenção:** Indicam o engajamento da base de usuários. Embora os números sejam relativamente bons, a otimização da experiência do usuário pode aumentar ainda mais o engajamento e, consequentemente, a conversão e a receita.\n",
    "*   **Tempo de Sessão:**  A curta duração média das sessões (11 minutos) sugere que há espaço para melhorar a experiência do usuário e o engajamento dentro das sessões, com o objetivo de aumentar a conversão e o valor da compra.\n",
    "*   **Tempo até a Primeira Compra:** O curto período de 3 dias sugere um potencial de conversão rápida. As campanhas de marketing podem ser otimizadas para capitalizar essa janela de oportunidade e incentivar a primeira compra de novos usuários.\n",
    "*   **Volume Médio de Compra e Mediana:**  O baixo volume médio e mediana indicam a necessidade de estratégias para aumentar o valor das transações, o que impactará diretamente na receita e no LTV.\n",
    "\n",
    "**Conclusão Final:**\n",
    "\n",
    "É imperativo que a Y.Afisha adote uma abordagem mais estratégica e focada em resultados para suas campanhas de marketing. A realocação do orçamento para canais mais eficientes, combinada com esforços para melhorar o engajamento do usuário e o valor da compra, são passos cruciais para reverter o ROI negativo e construir uma estratégia de marketing sustentável e lucrativa a longo prazo. A monitorização contínua das métricas chave e a realização de testes A/B para otimizar as campanhas são fundamentais para o sucesso futuro."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "<div class=\"alert alert-success\">\n",
    "<strong>Comentário</strong>\n",
    "\n",
    "Conclusão muito boa fundamentada em dados.\n",
    "</div>"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.9.19"
  },
  "toc": {
   "base_numbering": 1,
   "nav_menu": {},
   "number_sections": true,
   "sideBar": true,
   "skip_h1_title": true,
   "title_cell": "Table of Contents",
   "title_sidebar": "Contents",
   "toc_cell": false,
   "toc_position": {},
   "toc_section_display": true,
   "toc_window_display": false
  }
 },
 "nbformat": 4,
 "nbformat_minor": 2
}


