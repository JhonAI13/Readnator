
=== DIRETÓRIO: Sprint 13 ===

--- ARQUIVO: Sprint 13\sprint.ipynb (sem output) ---
{
  "cells": [
    {
      "cell_type": "markdown",
      "id": "4c584ffc",
      "metadata": {},
      "source": [
        "# Análise de Churn e Segmentação de Clientes - Academia \"Model Fitness\"\n",
        "\n",
        "Este projeto tem como foco a análise da rotatividade de clientes (churn) na academia \"Model Fitness\". A partir do conjunto de dados `gym_churn_us.csv`, buscamos compreender as principais causas da evasão de clientes, segmentá-los em perfis característicos e, com base nesses insights, formular recomendações estratégicas para reduzir o churn e aprimorar a experiência do cliente.\n",
        "\n",
        "Nossa abordagem metodológica inclui:\n",
        "*   **Carregamento e Pré-processamento de Dados:** Preparação do dataset `gym_churn_us.csv`, incluindo renomeação de colunas e otimização de tipos de dados.\n",
        "*   **Análise Exploratória de Dados (EDA):** Investigação descritiva, comparação entre grupos (churn vs. não churn), visualizações e análise da matriz de correlação para identificar padrões iniciais.\n",
        "*   **Modelagem Preditiva (Churn):** Treinamento e avaliação de modelos de classificação (Regressão Logística e Random Forest) para prever a probabilidade de churn.\n",
        "*   **Clusterização de Clientes:** Padronização de features e aplicação do algoritmo K-Means para segmentar clientes em perfis distintos, auxiliado pela análise de dendrograma.\n",
        "*   **Análise e Recomendações:** Interpretação dos perfis de cluster, análise da taxa de churn por segmento e desenvolvimento de recomendações acionáveis."
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "id": "e5009912",
      "metadata": {},
      "outputs": [],
      "source": [
        "import pandas as pd, numpy as np, matplotlib.pyplot as plt, seaborn as sns, plotly.express as px, os\n",
        "from scipy import stats as st\n",
        "from scipy.cluster.hierarchy import linkage, dendrogram\n",
        "from sklearn.preprocessing import StandardScaler\n",
        "from sklearn.decomposition import PCA\n",
        "from sklearn.model_selection import train_test_split\n",
        "from sklearn.linear_model import LogisticRegression\n",
        "from sklearn.ensemble import RandomForestClassifier\n",
        "from sklearn.metrics import accuracy_score, precision_score, recall_score\n",
        "from sklearn.cluster import KMeans\n",
        "\n",
        "\n",
        "local = r'C:\\Users\\jonat\\Documents\\GitHub\\Sprints\\Sprint 13'\n",
        "servidor = '/datasets' # mude aqui caso for no jupter. C:\\Users\\jonat\\Documents\\GitHub\\Sprints\\Sprint 13\\Dados\\gym_churn_us.csv\n",
        "caminho_arquivo = os.path.join(local, 'data', 'gym_churn_us.csv')"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "id": "f6a78d7d",
      "metadata": {},
      "outputs": [],
      "source": [
        "df = pd.read_csv(caminho_arquivo, sep=',')\n",
        "mapa_colunas_ptbr = {\n",
        "    'gender': 'sexo',\n",
        "    'Near_Location': 'local_proximo',\n",
        "    'Partner': 'parceiro_empresa',\n",
        "    'Promo_friends': 'promo_amigo',\n",
        "    'Phone': 'telefone_fornecido',\n",
        "    'Contract_period': 'duracao_contrato_meses',\n",
        "    'Group_visits': 'visitas_grupo',\n",
        "    'Age': 'idade',  # Usando 'Age' capitalizado como no df.info()\n",
        "    'Avg_additional_charges_total': 'gastos_extras_total',\n",
        "    'Month_to_end_contract': 'meses_fim_contrato',\n",
        "    'Lifetime': 'tempo_cliente_meses',\n",
        "    'Avg_class_frequency_total': 'media_freq_semanal_total',\n",
        "    'Avg_class_frequency_current_month': 'media_freq_semanal_mes',\n",
        "    'Churn': 'evasao'\n",
        "}\n",
        "\n",
        "# Renomear as colunas\n",
        "df.rename(columns=mapa_colunas_ptbr, inplace=True)\n",
        "df.info(), df.shape"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "id": "722131e4",
      "metadata": {},
      "outputs": [],
      "source": [
        "df\n"
      ]
    },
    {
      "cell_type": "markdown",
      "id": "01e4dc03",
      "metadata": {},
      "source": [
        "| Coluna Original                     | Nova Coluna (PT-BR)          | Descrição Resumida                                                              |\n",
        "|:------------------------------------|:-----------------------------|:--------------------------------------------------------------------------------|\n",
        "| `gender`                            | `sexo`                       | Gênero do cliente (codificado, ex: 0/1).                                        |\n",
        "| `Near_Location`                     | `local_proximo`              | Cliente mora ou trabalha perto da academia (1 = sim, 0 = no).                   |\n",
        "| `Partner`                           | `parceiro_empresa`           | Funcionário de empresa parceira da academia (1 = sim, 0 = no).                  |\n",
        "| `Promo_friends`                     | `promo_amigo`                | Se inscreveu via promoção \"traga um amigo\" (1 = sim, 0 = no).                  |\n",
        "| `Phone`                             | `telefone_fornecido`         | Número de telefone fornecido (1 = sim, 0 = no).                                 |\n",
        "| `Contract_period`                   | `duracao_contrato_meses`     | Período do contrato de filiação (em meses: 1, 3, 6, 12).                         |\n",
        "| `Group_visits`                      | `visitas_grupo`              | Participação em aulas/sessões em grupo (1 = sim, 0 = no).                       |\n",
        "| `Age`                               | `idade`                      | Idade do cliente em anos.                                                       |\n",
        "| `Avg_additional_charges_total`      | `gastos_extras_total`        | **Valor total (numérico, float)** gasto em serviços extras (café, produtos, massagens, etc.). |\n",
        "| `Month_to_end_contract`             | `meses_fim_contrato`         | Meses restantes para o contrato atual expirar.                                  |\n",
        "| `Lifetime`                          | `tempo_cliente_meses`        | Tempo (em meses) desde a primeira visita do cliente à academia.                 |\n",
        "| `Avg_class_frequency_total`         | `media_freq_semanal_total`   | Média de visitas por semana (total, desde o início da filiação).               |\n",
        "| `Avg_class_frequency_current_month` | `media_freq_semanal_mes`     | Média de visitas por semana (apenas no mês corrente).                           |\n",
        "| `Churn`                             | `evasao`                     | Indica se o cliente cancelou a filiação ('evadiu') no mês (1 = sim, 0 = no).    |"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "id": "b74257d7",
      "metadata": {},
      "outputs": [],
      "source": [
        "# Colunas para serem do tipo 'int8'\n",
        "int8_cols = [\n",
        "    'duracao_contrato_meses',\n",
        "    'tempo_cliente_meses',\n",
        "    'sexo',\n",
        "    'local_proximo',\n",
        "    'parceiro_empresa',\n",
        "    'promo_amigo',\n",
        "    'telefone_fornecido',\n",
        "    'visitas_grupo',\n",
        "    'evasao'\n",
        "]\n",
        "\n",
        "# Mudar o tipo das colunas para 'int8'\n",
        "for col in int8_cols:\n",
        "    df[col] = df[col].astype('int8')\n",
        "df.info()"
      ]
    },
    {
      "cell_type": "markdown",
      "id": "3a2b7936",
      "metadata": {},
      "source": [
        "Reduzi o tamanho da memoria usada de 437.6 KB para 191.5 KB mudando os typos para mais adeguados, fazendo o df ser mais leve para o ML."
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "id": "68a6925b",
      "metadata": {},
      "outputs": [],
      "source": [
        "df.describe()"
      ]
    },
    {
      "cell_type": "markdown",
      "id": "4573f8cc",
      "metadata": {},
      "source": [
        "Este dataset visa prever a evasão de clientes (churn), que ocorre em 26.5% dos casos, indicando um desbalanceamento de classes.\n",
        "\n",
        "Os principais preditores potenciais são as variáveis de tempo/contrato: duracao_contrato_meses, meses_fim_contrato e tempo_cliente_meses, já que muitos clientes têm contratos curtos e pouca permanência. A frequência de visitas (media_freq_semanal_total/mes) e os gastos extras também são relevantes para o engajamento.\n",
        "\n",
        "O dataset não possui valores nulos, o que facilita o pré-processamento."
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "id": "58002368",
      "metadata": {},
      "outputs": [],
      "source": [
        "df.groupby('evasao').mean()"
      ]
    },
    {
      "cell_type": "markdown",
      "id": "54624da1",
      "metadata": {},
      "source": [
        "Clientes que evadem (Churn=1) se distinguem claramente por:\n",
        "\n",
        "Menor permanência: Têm contratos e tempo de cliente drasticamente menores (~1-2 meses vs ~5-6 meses para quem fica).\n",
        "\n",
        "Menor engajamento: Apresentam frequência de visitas (principalmente no último mês) muito mais baixa e são menos propensos a serem parceiros, vir de promoções de amigos ou participar de visitas em grupo.\n",
        "\n",
        "Menor gasto: Gastam menos em extras.\n",
        "\n",
        "Variáveis como sexo e telefone_fornecido mostram pouca diferença e são menos relevantes para a previsão."
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "id": "9607fb7a",
      "metadata": {},
      "outputs": [],
      "source": [
        "\n",
        "plt.style.use('dark_background')\n",
        "\n",
        "\n",
        "# Lista de colunas numéricas que queremos ver a distribuição (histograms/kde)\n",
        "numerical_features = [\n",
        "    'idade',\n",
        "    'gastos_extras_total',\n",
        "    'meses_fim_contrato',\n",
        "    'tempo_cliente_meses',\n",
        "    'media_freq_semanal_total',\n",
        "    'media_freq_semanal_mes',\n",
        "    'duracao_contrato_meses' # Embora seja int, tem valores discretos que se beneficiam de uma distribuição\n",
        "]\n",
        "\n",
        "# Lista de colunas categóricas/binárias (barras de contagem)\n",
        "categorical_features = [\n",
        "    'sexo',\n",
        "    'local_proximo',\n",
        "    'parceiro_empresa',\n",
        "    'promo_amigo',\n",
        "    'telefone_fornecido',\n",
        "    'visitas_grupo'\n",
        "]\n",
        "\n",
        "# -----------------------------------------------------------\n",
        "# Plotando Distribuições para Características Numéricas (KDE Plots)\n",
        "# Usaremos KDE (Kernel Density Estimate) para mostrar a distribuição\n",
        "# suavizada, o que é ótimo para comparar grupos.\n",
        "# -----------------------------------------------------------\n",
        "\n",
        "# Definindo o número de colunas e linhas para os subplots\n",
        "n_cols_num = 3\n",
        "n_rows_num = (len(numerical_features) + n_cols_num - 1) // n_cols_num\n",
        "\n",
        "plt.figure(figsize=(n_cols_num * 6, n_rows_num * 4))\n",
        "plt.suptitle('Distribuição das Características Numéricas por Evasão', y=1.02, fontsize=18)\n",
        "\n",
        "for i, feature in enumerate(numerical_features):\n",
        "    plt.subplot(n_rows_num, n_cols_num, i + 1)\n",
        "    sns.kdeplot(data=df, x=feature, hue='evasao', fill=True, common_norm=False, palette='viridis', alpha=0.6)\n",
        "    plt.title(f'{feature.replace(\"_\", \" \").title()}', fontsize=12) # Títulos mais limpos\n",
        "    plt.xlabel('') # Remove o rótulo do eixo X para não duplicar com o título\n",
        "    plt.ylabel('Densidade') # Rótulo do eixo Y\n",
        "\n",
        "plt.tight_layout(rect=[0, 0.03, 1, 0.98]) # Ajusta o layout para evitar sobreposição, dando espaço para o suptitle\n",
        "plt.show()\n",
        "\n",
        "# -----------------------------------------------------------\n",
        "# Plotando Histogramas de Barra para Características Categóricas (Count Plots)\n",
        "# Usaremos countplot para mostrar a contagem de cada categoria por grupo de evasão.\n",
        "# -----------------------------------------------------------\n",
        "\n",
        "\n",
        "# Definindo o número de colunas e linhas para os subplots\n",
        "n_cols_cat = 3\n",
        "n_rows_cat = (len(categorical_features) + n_cols_cat - 1) // n_cols_cat\n",
        "\n",
        "plt.figure(figsize=(n_cols_cat * 6, n_rows_cat * 4))\n",
        "plt.suptitle('Contagem das Características Categóricas por Evasão', y=1.02, fontsize=18)\n",
        "\n",
        "for i, feature in enumerate(categorical_features):\n",
        "    plt.subplot(n_rows_cat, n_cols_cat, i + 1)\n",
        "    sns.countplot(data=df, x=feature, hue='evasao', palette='viridis')\n",
        "    plt.title(f'{feature.replace(\"_\", \" \").title()}', fontsize=12)\n",
        "    plt.xlabel('')\n",
        "    plt.ylabel('Contagem de Clientes')\n",
        "\n",
        "plt.tight_layout(rect=[0, 0.03, 1, 0.98])\n",
        "plt.show()"
      ]
    },
    {
      "cell_type": "markdown",
      "id": "40903278",
      "metadata": {},
      "source": [
        "Os gráficos mostram que clientes que **evadem (Churn=1)** se diferenciam claramente por:\n",
        "\n",
        "1. **Contrato e Tempo (NUMÉRICOS):** São **drasticamente mais propensos a ter**\n",
        "    \n",
        "    - meses_fim_contrato (pico enorme em 1 mês para Churn=1)\n",
        "        \n",
        "    - duracao_contrato_meses (pico enorme em 1 mês para Churn=1)\n",
        "        \n",
        "    - tempo_cliente_meses muito baixos (concentrados nos primeiros meses)\n",
        "        \n",
        "    - **Este é o fator mais forte para prever a evasão.**\n",
        "        \n",
        "2. **Engajamento e Gastos (NUMÉRICOS):**\n",
        "    \n",
        "    - media_freq_semanal_total e media_freq_semanal_mes significativamente menores (curvas de Churn=1 deslocadas para a esquerda/picos em valores mais baixos).\n",
        "        \n",
        "    - gastos_extras_total menores (curva de Churn=1 deslocada para a esquerda/pico em valores mais baixos).\n",
        "        \n",
        "3. **Atributos de Engajamento (CATEGÓRICOS):** Clientes que **evadem (Churn=1)** são proporcionalmente mais presentes nas categorias 0 (não) para:\n",
        "    \n",
        "    - local_proximo\n",
        "        \n",
        "    - parceiro_empresa\n",
        "        \n",
        "    - promo_amigo\n",
        "        \n",
        "    - visitas_grupo\n",
        "        \n",
        "    - (Ou seja, não morar perto, não ser parceiro, não ter promo de amigo ou não participar de grupo aumentam o risco de evasão.)\n",
        "        \n",
        "\n",
        "**Pouco Impacto:**\n",
        "\n",
        "- sexo, idade (apenas uma leve tendência para churners serem mais jovens) e telefone_fornecido mostram pouca diferença e não são bons preditores de evasão."
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "id": "67775bb6",
      "metadata": {},
      "outputs": [],
      "source": [
        "\n",
        "# 1. Calcular a matriz de correlação\n",
        "correlation_matrix = df.corr()\n",
        "\n",
        "# 2. Configurar o estilo e o tema preto\n",
        "plt.style.use('dark_background') # Define o estilo de fundo escuro para todos os elementos do plot\n",
        "plt.figure(figsize=(14, 12)) # Ajusta o tamanho da figura para melhor visualização\n",
        "\n",
        "# 3. Construir o heatmap da matriz de correlação\n",
        "sns.heatmap(\n",
        "    correlation_matrix,\n",
        "    annot=True,      # Mostrar os valores de correlação no heatmap\n",
        "    cmap='magma',    # Colormap que se encaixa bem com o tema preto (magma, rocket, viridis, plasma)\n",
        "    fmt=\".2f\",       # Formatar os números com duas casas decimais\n",
        "    linewidths=.5,   # Largura das linhas entre as células\n",
        "    linecolor='gray' # Cor das linhas\n",
        ")\n",
        "\n",
        "# 4. Adicionar título\n",
        "plt.title('Matriz de Correlação', fontsize=18, color='white')\n",
        "plt.xticks(rotation=25, ha='right')\n",
        "plt.show()"
      ]
    },
    {
      "cell_type": "markdown",
      "id": "a94be3a3",
      "metadata": {},
      "source": [
        "1. **Principais Preditoras de Evasão (Forte Correlação Negativa com evasao):**\n",
        "    \n",
        "    - tempo_cliente_meses (-0.44): Quanto mais tempo o cliente, menor a chance de evasão. **Fator mais forte!**\n",
        "        \n",
        "    - idade (-0.40): Clientes mais velhos tendem a evadir menos.\n",
        "        \n",
        "    - media_freq_semanal_mes (-0.41): Maior frequência de visitas no último mês, menor a evasão.\n",
        "        \n",
        "    - duracao_contrato_meses (-0.39) e meses_fim_contrato (-0.38): Contratos mais longos e mais tempo até o fim do contrato significam menor evasão.\n",
        "        \n",
        "2. **Outros Preditoras Relevantes (Correlação Negativa Moderada):**\n",
        "    \n",
        "    - media_freq_semanal_total (-0.25): Frequência geral também impacta.\n",
        "        \n",
        "    - gastos_extras_total (-0.20): Clientes que gastam mais tendem a ficar.\n",
        "        \n",
        "    - visitas_grupo (-0.18), parceiro_empresa (-0.16), promo_amigo (-0.16): Clientes engajados (em grupos, parcerias, ou vindos de promoção) evadem menos.\n",
        "        \n",
        "3. **Variáveis Irrelevantes (Correlação Próxima de Zero):**\n",
        "    \n",
        "    - sexo (0.00) e telefone_fornecido (-0.00): Não têm impacto significativo na evasão.\n",
        "        \n",
        "4. **Multicolinearidade (Atenção para o ML):**\n",
        "    \n",
        "    - duracao_contrato_meses e meses_fim_contrato têm correlação altíssima (0.97): São quase a mesma informação.\n",
        "        \n",
        "    - media_freq_semanal_total e media_freq_semanal_mes também são altamente correlacionadas (0.95).\n",
        "        \n",
        "    - Para o modelo de ML, pode ser interessante escolher apenas uma de cada par, ou combiná-las, para evitar redundância."
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "id": "35ee228f",
      "metadata": {},
      "outputs": [],
      "source": [
        "features_para_modelo = [\n",
        "    'sexo', 'local_proximo', 'parceiro_empresa', 'promo_amigo', 'telefone_fornecido',\n",
        "    'visitas_grupo', 'idade', 'gastos_extras_total', 'meses_fim_contrato',\n",
        "    'tempo_cliente_meses', 'media_freq_semanal_mes'\n",
        "]\n",
        "X = df[features_para_modelo]\n",
        "y = df['evasao']\n",
        "\n",
        "# Dividir os dados\n",
        "X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42, stratify=y)\n",
        "\n",
        "#  Treinar e Avaliar Modelos\n",
        "modelos = {\n",
        "    \"Regressão Logística\": LogisticRegression(random_state=42, solver='liblinear'),\n",
        "    \"Random Forest\": RandomForestClassifier(random_state=42, n_estimators=10)\n",
        "}\n",
        "\n",
        "print(\"Avaliação dos Modelos de Predição de Churn:\\n\")\n",
        "resultados = {}\n",
        "\n",
        "for nome_modelo, modelo_obj in modelos.items():\n",
        "    modelo_obj.fit(X_train, y_train)\n",
        "    y_pred = modelo_obj.predict(X_test)\n",
        "    resultados[nome_modelo] = {\n",
        "        \"Acurácia\": accuracy_score(y_test, y_pred),\n",
        "        \"Precisão\": precision_score(y_test, y_pred, zero_division=0), # Adicionado zero_division\n",
        "        \"Recall\": recall_score(y_test, y_pred, zero_division=0) # Adicionado zero_division\n",
        "    }\n",
        "    print(f\"{nome_modelo}:\")\n",
        "    for metrica, valor in resultados[nome_modelo].items():\n",
        "        print(f\"  {metrica}: {valor:.4f}\")\n",
        "    print()\n",
        "\n",
        "# Comparar os modelos\n",
        "print(\"Comparação dos Modelos:\")\n",
        "metricas_comparacao = [\"Acurácia\", \"Recall\", \"Precisão\"]\n",
        "for metrica in metricas_comparacao:\n",
        "    val_lr = resultados[\"Regressão Logística\"][metrica]\n",
        "    val_rf = resultados[\"Random Forest\"][metrica]\n",
        "    if val_rf > val_lr:\n",
        "        print(f\"- Random Forest teve maior {metrica.lower()}.\")\n",
        "    elif val_lr > val_rf:\n",
        "        print(f\"- Regressão Logística teve maior {metrica.lower()}.\")\n",
        "    else:\n",
        "        print(f\"- Ambos os modelos tiveram {metrica.lower()} similar.\")"
      ]
    },
    {
      "cell_type": "markdown",
      "id": "0670da17",
      "metadata": {},
      "source": [
        "- **Regressão Logística:** Acurácia (0.9150), Precisão (0.8600), Recall (0.8113)\n",
        "    \n",
        "- **Random Forest:** Acurácia (0.8938), Precisão (0.8396), Recall (0.7406)\n",
        "    \n",
        "\n",
        "**Conclusão:**  \n",
        "A **Regressão Logística** superou o Random Forest em todas as métricas (acurácia, precisão e recall)."
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "id": "8f49ba82",
      "metadata": {},
      "outputs": [],
      "source": [
        "numerical_features = [\n",
        "    'idade',\n",
        "    'gastos_extras_total',\n",
        "    'meses_fim_contrato',\n",
        "    'tempo_cliente_meses',\n",
        "    'media_freq_semanal_total',\n",
        "    'media_freq_semanal_mes',\n",
        "    'duracao_contrato_meses'\n",
        "]\n",
        "\n",
        "# 2. Criar uma instância do StandardScaler\n",
        "scaler = StandardScaler()\n",
        "\n",
        "# 3. Aplicar a padronização apenas nas colunas numéricas selecionadas\n",
        "# fit_transform calcula a média e o desvio padrão e aplica a transformação\n",
        "\n",
        "df[numerical_features] = scaler.fit_transform(df[numerical_features])\n",
        "df"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "id": "016a59bf",
      "metadata": {},
      "outputs": [],
      "source": [
        "# Assegurando que estamos usando as features numéricas padronizadas para o clustering\n",
        "# Excluindo 'evasao' (variável alvo) e as features binárias/categóricas,\n",
        "# pois o StandardScaler foi aplicado apenas nas numéricas.\n",
        "features_for_clustering = [\n",
        "    'idade',\n",
        "    'gastos_extras_total',\n",
        "    'meses_fim_contrato',\n",
        "    'tempo_cliente_meses',\n",
        "    'media_freq_semanal_mes',\n",
        "    'visitas_grupo',           # Nova, relevante\n",
        "    'parceiro_empresa',        # Nova, relevante\n",
        "    'promo_amigo'              # Nova, relevante\n",
        "]\n",
        "X_scaled = df[features_for_clustering]\n",
        "\n",
        "# 1. Construir a matriz de distâncias (Z)\n",
        "Z = linkage(X_scaled, method='ward')\n",
        "\n",
        "# 2. Construir e exibir o dendrograma\n",
        "plt.figure(figsize=(15, 7))\n",
        "plt.title('Dendrograma Hierárquico', fontsize=16)\n",
        "plt.xlabel('Número de pontos ou índice do cluster (se truncado)')\n",
        "plt.ylabel('Distância')\n",
        "dendrogram(\n",
        "    Z,\n",
        "    truncate_mode='lastp',  # Mostra apenas os últimos 'p' nós (fusões)                   \n",
        "    show_leaf_counts=False  # Não mostra a contagem de elementos em cada folha\n",
        ")\n",
        "plt.show()"
      ]
    },
    {
      "attachments": {
        "image.png": {
          "image/png": "iVBORw0KGgoAAAANSUhEUgAABNIAAAJcCAIAAACzBx4WAAAgAElEQVR4AeydCZgdVZm/K4DpTiedbkIHkhAJkbAoYTGSIIPzRxAc0AmLMEaQRR9hRB1mEDQQdMig8gAyQIQ8DLKIC9kgSCSRLUgjSzAYtrAGs7ElJGQhC93ZmvqHlJTFrXtv7VXf+ertJw9Wn3vqnO/3/s655/u8S1sWPxCAAAQgAAEIQAACEIAABCAAAQhAAAIQgAAEIAABCEAAAhCAAAQgAAEIQAACEIAABCAAAQhAAAIQgAAEIAABCEAAAhCAAAQgAAEIQAACEIAABCAAAQhAAAIQgAAEIAABCEAAAhCAAAQgAAEIQAACEIAABCAAAQhAAAIQgAAEIAABCEAAAhCAAAQgAAEIQAACEIAABEwncPLJJ48dO/aggw4yXQjxQwACEIAABCAAAQhAAAIQgIA4Al/84he7urpmzpy5ww47iAuOgCAAAQhAAAIQgAAEIACBFAksWrTI/vCnq6tr7dq1b7zxxkMPPXTllVcOHz48xYniDeWEFu9e7rIsa9CgQQ7DQYMGVQXiPHrYYYe5j44dO3Zr49ixY92W1C923XXX5cuXP/vss83NzakPHnXAW2+91bbtM844I+qN9IcABCAAAQhAAAIQgAAEQhFwys5HH3301m0/kydPfvDBB1euXOlUI+3t7YMHDw41UDadnDCyGbsUowosO7fffvvHHnvstddeGzBggAQPKDsluEAMEIAABCAAAQhAAAKaCThlp/+lnmOOOWbevHm2bS9dunT33XcvCgFlZ0LyMcrOnXbaae+9995pp50STl3r9qFDh44dO/aTn/xkrQ45t/fr12/vvffu3bt3zvMyHQQgAAEIQAACEIAABMpCoFbZaVlWS0uLU3k++OCDReGg7ExIPkbZmXBGbocABCAAAQhAAAIQgAAEIPARAnXKTsuyjjnmGKfwGzZsmPe27bff/lvf+lZ7e/vKlSs3bNiwcOHC66+/fuDAgd4+hx12mG3b7e3tO+yww+jRo1944YWOjo4VK1bceeed++yzj7enc/3Zz372nnvuWb169bp16/76179+85vftCzLX3a6Ld/4xjdmzZr17rvv2rbtfnBx+PDhU6ZMeeuttzZu3Lhs2bK77777yCOP9M/V1NT0k5/85NVXX92wYcNbb711yy23DBgwwP+ZRrfl4x//+M033/z6669v2rTp1ltvdQY84YQTbrrppueff37VqlWdnZ0LFy685ZZb9tprr4rp3Pdw7rXXXpMnT162bNn69euffPLJY4891uk5YsSIP/zhD8uXL+/o6Jg1a9YRRxxRMcLw4cOvuOKK2bNnL126dOPGjW+//fbdd9/9hS98oaJb1V9jlJ2u6ooB99xzzxtuuGH+/PmdnZ3vvvvun//8569//esVfdrb27eafthhh33uc5+7++67ly9f3tXV5byW3qtXrzPPPPPOO+989dVX12/7mTt37s9+9rOWlpaKQZw1OWjQoGOPPfZPf/qT85Zv99Onn/zkJ2+//fZ33nmno6Pj+eefP//887fbbjv3Fncod524Lc6FG6Hb7hrktjgXw4YN+/Wvf71w4cLOzs6VK1c+++yzP//5z3fbbTdvt5DrzXsL1xCAAAQgAAEIQAACECgdgfplp2VZK1assG37ggsucNH06tXroYcesm177dq17e3tt99++8svv2zb9jvvvHPggQe63Zyy87HHHnvggQfWr19/zz333HHHHa+99ppt26tWrXILRaf/SSedtHnzZtu2586dO2HChEceeaSrq+t///d//cWD03Lttddu2bLlkUcemTBhwhNPPOEUA2eeeeaWLVts237qqacmTJjw2GOPOZ0vvvhiNyrLspqammbPnu3Ef/fddztl6ttvv/2rX/1qa3/vV+k4Bdhtt922YsWKJUuW3HHHHVOnTr3yyiud0TZv3uwUkFOnTp02bdr8+fNt2163bt0hhxzinc6pan7xi1+sW7fu5Zdfnjhx4uOPP27bdldX14knnnjcccdt3LjxqaeemjRp0jPPPGPb9qZNmw499FDvCDNnztyyZctzzz03Y8aMKVOmzJkzx9H1n//5n95uVa/TKjtPOumkjo4O27ZfeumlO++888EHH1y3bp1t27fccot3XqeoGz9+/JYtW1544YWJEyfed999X/va1yzLOvTQQ23bXr58+SOPPDJp0qT77rvPqSdfffXVPn36eAdx1uS1115r2/aTTz45YcKE9vb2z33uc84gzrzz58+fOHHiAw88sHHjxjvuuCP1svMHP/iBs5ZeeeWVyZMn/+EPf3jxxRcrvnko5HrzSuMaAhCAAAQgAAEIQAACZSQQWHY+8MADtm3/9re/dencdttttm3ffffdffv2dRv/67/+y7btefPmbbfddk6jU3Y6ReAuu+ziNDY0NNx77722bd9www3uvbvsssuaNWts2z733HPdxiOOOMKpc2zbdhvd1z/ffffdgw8+2Ns+dOjQTZs2dXV1nXrqqW770UcfvWHDBtu2va95XnXVVbZtv/DCC/369XN6NjQ03H777U4t5y87Hfndu3d3h3UuvvrVrzY1NXkbv/Od79i2/fzzz3sbnbJzaz150UUXue3/8R//Ydv266+/vnLlSm/AV199tW3bDzzwgNvTsqyjjz7aDdVp/+xnP/vuu+9u3Lgx8Ft5Uik7hw4d2tnZ2dHRccIJJ7iB7bbbbs8995xt26eddprb6JSdtm1/5zvfcRudi9122+2YY45xl4dlWb169Zo8ebJt2+PHj/d2dtbk5s2bR44c6W1vaGhw/m+Lq6++2h1nv/32W758ueOd9//LcFq8tzvXYV7tHDlypG3bHR0d//Zv/+Yd4ZOf/KT7Qn349eYdgWsIQAACEIAABCAAAQiUkUBg2Tlx4kTbtv/4xz86dPbZZ5+urq4333yzV69eFbxmzJhh2/aXv/xlp90pO7u6uvbff39vzxEjRti2PX/+fLfxoosusm171qxZbotzcc011/iLB6flxz/+cUXnm266ybbtqVOnVrQ7L5rdf//9TntjY+PatWtt2z7qqKO8Pdva2tavX791cH/ZuWLFivDfN+O8kun9vhyn7PzLX/7inW777bd3XkaeMmWKt71Pnz62bW/YsCHwr1leeumlVas772jeP6DicKv1X/ctrFsLe/+bbCdNmrT1xeHzzjuvYvCDDjpoq+N//etf3XanqAv/YeDm5uYtW7YsW7bMHcGyLGdN3nzzzd5Gy7JOOeUU27Zfe+21CjjO/+Xhfa+1+39PVIxgWVaYsvPpp5+2bfv73/++/3a3JeR6c/tzAQEIQAACEIAABCAAgfISCCw7ndejZsyY4TA677zzbNu+6aab/Mh+8IMf2LZ96aWXOg85ZeeiRYsqejY3N299125nZ6fb7ryg+r3vfc9tcS4OPPBAp0zytjst7otO7kN/+9vfbNv+13/9V7fFuTjggAOcV66c18fct3pWdLMs66677to6uL/snDx5sr+z07LHHnt873vfu+aaa26++WbnL9A4b7U9/vjj3VucstM7rPPQX//614o3bTrtTjnqvj7sNPbp0+e000674oorbrzxRmci5y3E48aNcyeqeuG+2nnHHXc4N1b81+FZp+zs1q2b8wHaXXfd1T/F2rVrt2zZ0tDQ4DzkFHVnn322v6fTsuuuu44aNeoHP/jBxRdfvLW+HTt2rPNCd2trq3uLsyaPPvpot8W5uPHGG23bdt/k7D7a2trqqEjl1c5ddtnFtu0tW7bU//8aQq43N0guIAABCEAAAhCAAAQgUF4CgWXngw8+6H2T7fjx450Uv9Z/b7zxRoemU3b++c9/9sN17nXbX3rppa2f4vvSl77ktjgXLS0tFT3dV7EaGxsrOjvvyN13330r2nv16uUM4rwleNSoUc4nBiu6bf3mXufFVW996Lzud/nll/s7b7fddtdff31XV1dVDqeffrp7i1N2Ot+Q5Da6L7sdfvjh3kb3tT5vBXXmmWc6H2j0z/WrX/2q4vaKX92y0zugt48zZp2ys62tzT9vRYv7Xl+n7PRXjJZl9ezZc+LEibWIeb+qx1mT/v9n4Z577tn66dDvfve73vid69WrV6f1aufw4cNt237jjTf8s3hbQq437y1cQwACEIAABCAAAQhAoKQEAstO53tffvjDHzqArr/+etu2n3766YoXzdxfv/Wtbzk9nbKzvb3dT9YpWtz2GGWne697EbIMcMrO2bNnuze6F87nKv1lp7fF7fz973/ftu0lS5Z87Wtf22233dyX+yZMmFDxGqZTdvr/Mqr/3Z7O4I4jbpU4bNiwrq6uTZs2/fCHP9xnn33cT5OeddZZWwst92t13cAqLpKXnTvvvLPjl2ux/8L9I5+1RFmW5Xwk+PHHHz/yyCP79u3rvlH2rbfeqqgYKwi4ilIpO//85z8737XrDlthEGWnS4YLCEAAAhCAAAQgAAEIpEOgftn5pS99ySk5DjjgAGe+MWPG2LZ93XXXBU4fvuycOXNm1VexnPfHVv1KIf/szpseK76ExrKs/fff33mT7fbbb29Z1uc+97mtH4ms+DChM9rvf//7rWK9Rabzaqe3xZ33iSee2PptSf7pnnzyyXTLzssuu8y27auuusqd2rn4+c9/nk/Zud1227333ntbTXdry4pIvL/WKjsbGxs3bty4ZcuWij+X0tTU5Lz+6ZbZVV/vdaZwPk7585//3Duj8wdmnVXqHWTjxo22bfs/gbx48eL6ZWekN9n6F0DFeqsIlV8hAAEIQAACEIAABCBQRgJ1ys7evXvPmzfPtm33+3gsy3I+b/naa6+5r+/Voha+7Pzxj3+89Tt+Hn/88YqhnK+cDVl2OjXJnXfeWTHIuHHjvBJ69OjhfHVQxd+93GmnnZw3snqLzDplp0Om4tuSPvWpT23atCndsvOXv/zl1j85U/G3UhoaGhYsWJBP2bnV9GnTpoX5+iL3ncPet+w6dvTv39/5wzkV7vz7v/+7v2Ks9Wrnqaeeatv24sWL3VdKndHOOecc/yALFy7c+lVYw4cP98643377OVWuN8KKVzsty3L+ko33e5W9gzjXIdeb/0ZaIAABCEAAAhCAAAQgUDoCtcrOo48++pVXXrFt+6233vJ+7s6yrDvuuMP5blvvi0vO38M85ZRTdt55Zwdi+LKzf//+zrfLnnPOOa4Bhx12mPMiW8iy0/2DFl//+tfdQY466qjOzs6K7611CtG5c+e6oXbv3t35stbwr3Y6ldgvf/nLbt26OdP169fP/Yua3rfU+qsap3+tFwYriq5zzz3X+SM07gt3DQ0Nt9xyi1No5fAmW8uyPv3pT2/YsGH9+vWnn366q9dRse+++3r/qkotUdtvv73z8UvvX4s5+OCDnbdwh3yTbWNj4xtvvOF8q5Abxr777rts2TJ/2el8/9CMGTPcv3wzaNAg5ytq67/aaVnW8ccfb9v2e++995WvfMVdS5ZlVf0DKoHrzTsC1xCAAAQgAAEIQAACECgjAafIefTRR50P7E2cOPGBBx5wvkzVtu2HHnpo9913r+DSq1cv522xGzZsmD179uTJk6dMmTJ79mznL2TuvffeTv/wZadlWaNGjdq8ebNt288999yECRMefvjhrq6uSK92WpZ11llnbdmyZev32c6ZM+e222579NFHnZe2Lr74Yq+Enj17Ot8iu3bt2mnTpk2ePPnNN99cvny5Ux+OGTPG7Vzn1c4RI0Y4el999dXJkyffc88977333vPPP3/nnXem+2pnS0uL49E777zz+9///o477nj77bfXrFnjfAFSPmWnZVknnXSS8yrx66+/ft999/3ud7/74x//+Prrr9u2PWnSJJdYrbLTsizni45t237iiScmTJjguPOb3/ymosyu8yZby7L+3//7f04Yf/vb3yZOnHj//fdv3Lhx6tSp/kF23333VatWOa+O3nHHHQ8//PB77733wAMPON8AXP/V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qqry8vI1a9Ycf/zx6qNRo0a9//77NTU1n3/++fTp0+u3Z3l5edqkMAxHjhyp7Bw3btybb75ZU1NzIL2ThF4dg7fccsuuXbv27Nnz2GOP6Ta1wdi1bdv2qaeeUv5+/PHHubm52oUkKdGhQ4fZs2fv3r27pqbmX//617Bhw/SslJSUmpqa888/X7+DDRAAARAAARAAARAAARBogICqXMeMGROLxY499tggCMzbzm+++SY/Pz8jI+Paa68Nw7CwsHDq1KlpaWl33XVXPB5Xe2vfvv1HH3301FNPDR48ODMzc9GiRZs2bVLXNgsKCvbu3btw4cITvv/XuXPnkpKSF1544cQTT/z5z3/++eefq94gweg+ffrU1NQ89NBDGRkZV1111RdffKHbztTU1MrKysmTJ6elpZ111lnvv//+/PnzE6YHQZCXl1dZWfnaa68NGTJkxIgRmzdvXrRokRr2xz/+saKiYvz48RkZGQ888EA8HldNo2oGNm7ceOmll6anpy9ZsmTr1q3t2rVLSUnJzc2tqKjo9f0/1Se/9NJLH3300fDhw08++eTCwsLNmzerZmD58uUrV64cPHhw//79L7vsshEjRtS3rbG5SXqP6E6inVhOTk48Hn/11VdPPfXUoUOHfvTRR9rN2267rbS0dOzYsZmZmU8++eQ333zTYNv53HPPbd++fcyYMf379z///PPHjRsXBEHXrl1379593333DRw48JRTTlm5cuXrr78etUFtn3766fv377/tttvS09MnTZpUVlam284xY8bE4/Ebb7wxPT39T3/60759+xp8ANLEiRMPXIfPzc1NT08fNmzY5MmT1Z5N2s76qNu2bTt27NgwDNPT03v16qX+0HDnnXdu3LgxKyurf//+OTk5NTU15557rv5rwrp16y644ILU1NTu3bsnOFheXq5oBEHQrl278vLymTNnpqamZmZmZmdnq69ADx8+vKKiIjs7u3///hdccMGWLVumT5+esJ9DDz30ueeeW7FihcqflJQUlWlbtmwZO3Zsv379jj766CShLygoqKiomDt37sCBAy+77LKqqqrrr79eSTQYuwN5eM8995x66qn9+vW76qqrqqqq9EPCkqTEo48+WlxcfPHFFw8aNKigoKC0tDQK5N1331V/bUlwDS9BAARAAARAAARAAARA4H8E9N1077zzzlNPPdWstnPr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"
        }
      },
      "cell_type": "markdown",
      "id": "961b2746",
      "metadata": {},
      "source": [
        "![image.png](attachment:image.png)\n",
        "\n",
        "\n",
        "Vou separa em 4 clusters"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "id": "59b2c2ca",
      "metadata": {},
      "outputs": [],
      "source": [
        "kmeans_model = KMeans(n_clusters=5, random_state=42, n_init=10)\n",
        "df['cluster_km'] = kmeans_model.fit_predict(X_scaled)\n",
        "features_for_clustering.append('cluster_km')\n",
        "print(df['cluster_km'].value_counts())\n",
        "df[features_for_clustering]"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "id": "fd090198",
      "metadata": {},
      "outputs": [],
      "source": [
        "cluster_profiles = df.groupby('cluster_km')[features_for_clustering].mean()\n",
        "cluster_profiles"
      ]
    },
    {
      "cell_type": "markdown",
      "id": "79940ee4",
      "metadata": {},
      "source": [
        "- **Cluster 0 (Jovens e Novos, Baixo Engajamento/Uso/Gasto):** **Maior Grupo de Alto Risco de Evasão**.\n",
        "    \n",
        "- **Cluster 1 (Leais e Engajados - IDEAL):** Clientes com contratos longos, alta frequência e engajamento. **Baixíssimo Risco de Evasão**.\n",
        "    \n",
        "- **Cluster 2 (Frequentes, Baixo Gasto Extra, Contratos Curtos):** Clientes ativos, mas com baixo valor extra e contratos curtos. **Risco de Evasão Potencial**.\n",
        "    \n",
        "- **Cluster 3 (Altamente Leais e Antigos):** Os clientes mais fiéis e antigos, engajados e com boa frequência. **Baixíssimo Risco de Evasão (O Mais Leal)**.\n",
        "    \n",
        "- **Cluster 4 (Alto Gasto, Contratos Curtos, Baixo Engajamento):** Clientes de alto valor, mas com uso e engajamento medianos. **Risco de Evasão \"Silencioso\"**."
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "id": "dd50b5a9",
      "metadata": {},
      "outputs": [],
      "source": [
        "numerical_features = [\n",
        "    'idade',\n",
        "    'gastos_extras_total',\n",
        "    'meses_fim_contrato',\n",
        "    'tempo_cliente_meses',\n",
        "    'media_freq_semanal_mes'\n",
        "]\n",
        "\n",
        "categorical_features = [\n",
        "    'visitas_grupo',\n",
        "    'parceiro_empresa',\n",
        "    'promo_amigo'\n",
        "]\n",
        "\n",
        "n_cols_num = 3\n",
        "n_rows_num = (len(numerical_features) + n_cols_num - 1) // n_cols_num\n",
        "\n",
        "plt.figure(figsize=(n_cols_num * 6, n_rows_num * 4))\n",
        "plt.suptitle('Distribuição das Características Numéricas por Agrupamento', y=1.02, fontsize=18)\n",
        "plt.style.use('dark_background')\n",
        "\n",
        "for i, feature in enumerate(numerical_features):\n",
        "    plt.subplot(n_rows_num, n_cols_num, i + 1)\n",
        "    sns.kdeplot(data=df, x=feature, hue='cluster_km', fill=True, common_norm=False, palette='viridis', alpha=0.6)\n",
        "    plt.title(f'{feature.replace(\"_\", \" \").title()}', fontsize=12)\n",
        "    plt.xlabel('')\n",
        "    plt.ylabel('Densidade')\n",
        "\n",
        "plt.tight_layout(rect=[0, 0.03, 1, 0.98])\n",
        "plt.show()\n",
        "\n",
        "n_cols_cat = 3\n",
        "n_rows_cat = (len(categorical_features) + n_cols_cat - 1) // n_cols_cat\n",
        "\n",
        "plt.figure(figsize=(n_cols_cat * 6, n_rows_cat * 4))\n",
        "plt.suptitle('Contagem das Características Categóricas por Agrupamento', y=1.02, fontsize=18)\n",
        "plt.style.use('dark_background')\n",
        "\n",
        "for i, feature in enumerate(categorical_features):\n",
        "    plt.subplot(n_rows_cat, n_cols_cat, i + 1)\n",
        "    sns.countplot(data=df, x=feature, hue='cluster_km', palette='viridis')\n",
        "    plt.title(f'{feature.replace(\"_\", \" \").title()}', fontsize=12)\n",
        "    plt.xlabel('')\n",
        "    plt.ylabel('Contagem de Clientes')\n",
        "\n",
        "plt.tight_layout(rect=[0, 0.03, 1, 0.98])\n",
        "plt.show()"
      ]
    },
    {
      "cell_type": "markdown",
      "id": "e14409f8",
      "metadata": {},
      "source": [
        "- **Cluster 0 (Jovens e Novos, Baixo Engajamento/Uso/Gasto):** Os gráficos mostram exatamente isso: mais jovens, baixíssimos gastos, contratos curtos/no fim, menor tempo como cliente, baixa frequência, não participam de visitas em grupo, não são de empresas parceiras e não vieram por promo de amigo. **Este grupo se destaca negativamente em quase todos os aspectos de engajamento e valor.**\n",
        "    \n",
        "- **Cluster 1 (Leais e Engajados - IDEAL):** Idade intermediária, gastos moderados, contratos longos, tempo de cliente moderado, alta frequência, participam de visitas em grupo, são de empresas parceiras e vieram por promo de amigo. **Perfil muito positivo e engajado.**\n",
        "    \n",
        "- **Cluster 2 (Frequentes, Baixo Gasto Extra, Contratos Curtos):** Idade intermediária, gastos moderados, contratos mais curtos que 1 e 3, tempo de cliente relativamente novo (mas não tanto quanto 0 e 4), alta frequência, participam de visitas em grupo, são de empresas parceiras e vieram por promo de amigo. **São ativos, mas talvez menos \"presos\" à academia por contratos longos.**\n",
        "    \n",
        "- **Cluster 3 (Altamente Leais e Antigos):** Mais velhos, gastos moderados/altos, contratos longos, maior tempo como cliente, frequência moderada/alta, participam de visitas em grupo, são de empresas parceiras e vieram por promo de amigo. **Este é o grupo dos \"veteranos\" leais.**\n",
        "    \n",
        "- **Cluster 4 (Alto Gasto, Contratos Curtos, Baixo Engajamento):** Mais jovens, gastos extras significativamente mais altos, contratos curtos/no fim, menor tempo como cliente, baixa frequência, não participam de visitas em grupo, não são de empresas parceiras e poucos vieram por promo de amigo. **Gastam muito em extras, mas o engajamento com a atividade principal e os vínculos (promo, parceiro) são baixos.**\n",
        "    \n",
        "\n",
        "**O que mais se nota?**\n",
        "\n",
        "- **Polarização:** Os clusters 0 e 4 são muito parecidos em termos de idade, tempo de contrato, tempo de cliente e frequência (todos baixos/negativos), mas se opõem drasticamente nos gastos extras (0 muito baixo, 4 muito alto).\n",
        "    \n",
        "- **Engajamento Social/Promocional:** Os clusters 1, 2 e 3 mostram um forte componente de vinda por \"promo amigo\" e participação em \"visitas grupo\", além de serem \"parceiros de empresa\", sugerindo que esses canais e atividades são importantes para reter clientes engajados e leais. Os clusters 0 e 4 são o oposto.\n",
        "    \n",
        "- **Diferenciação Clara:** Os 5 clusters são bem distintos entre si quando se olha para o conjunto das características, justificando a escolha de k=5. Cada um tem uma \"personalidade\" bem definida."
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "id": "aaa596b0",
      "metadata": {},
      "outputs": [],
      "source": [
        "# Calcular a taxa de evasão para cada cluster\n",
        "taxa_evasao_por_cluster = df.groupby('cluster_km')['evasao'].mean().sort_values(ascending=False)\n",
        "\n",
        "print(\"Taxa de Evasão (Churn) por Agrupamento:\")\n",
        "print(taxa_evasao_por_cluster)\n",
        "\n",
        "# Análise\n",
        "print(\"\\nAnálise da Taxa de Rotatividade por Agrupamento:\")\n",
        "print(f\"Agrupamentos mais propensos a sair (maior taxa de evasão):\")\n",
        "for cluster, taxa in taxa_evasao_por_cluster.head(2).items(): # Top 2, por exemplo\n",
        "    print(f\" - Cluster {cluster}: {taxa:.2%}\")\n",
        "\n",
        "print(f\"\\nAgrupamentos mais leais (menor taxa de evasão):\")\n",
        "for cluster, taxa in taxa_evasao_por_cluster.tail(2).items(): # Bottom 2, por exemplo\n",
        "    print(f\" - Cluster {cluster}: {taxa:.2%}\")"
      ]
    },
    {
      "cell_type": "markdown",
      "id": "99d7c828",
      "metadata": {},
      "source": [
        "\n",
        "- **Propensos a Sair (Maiores Taxas de Evasão):**\n",
        "    \n",
        "    - **Cluster 0** (Jovens e Novos, Baixo Engajamento/Uso/Gasto): Este grupo tem todas as características de alto risco de evasão (contratos curtos, baixa frequência, baixo tempo como cliente). É **muito provável que apresente a maior taxa de evasão.**\n",
        "        \n",
        "    - **Cluster 4** (Alto Gasto, Contratos Curtos, Baixo Engajamento): Apesar do alto gasto, o baixo engajamento com atividades centrais e os contratos curtos também os tornam um grupo de risco. **Provavelmente terá uma taxa de evasão alta**, talvez a segunda maior.\n",
        "        \n",
        "- **Leais (Menores Taxas de Evasão):**\n",
        "    \n",
        "    - **Cluster 3** (Altamente Leais e Antigos): Este grupo é descrito como o mais leal, com clientes antigos e engajados. **Espera-se a menor taxa de evasão aqui.**\n",
        "        \n",
        "    - **Cluster 1** (Leais e Engajados - IDEAL): Com contratos longos e alto engajamento, este grupo também deve ser muito leal. **Provavelmente terá uma taxa de evasão muito baixa**, possivelmente a segunda menor.\n",
        "        \n",
        "    - **Cluster 2** (Frequentes, Baixo Gasto Extra, Contratos Curtos): Este grupo é ativo, mas os contratos mais curtos podem colocá-los em um risco intermediário. Sua taxa de evasão deve ser menor que a dos clusters 0 e 4, mas potencialmente maior que a dos clusters 1 e 3."
      ]
    },
    {
      "cell_type": "markdown",
      "id": "e018dc19",
      "metadata": {},
      "source": [
        "## Conclusões e Recomendações\n",
        "\n",
        "A análise conclui que a retenção de clientes é fortemente impactada pela **duração do contrato** e pelo **nível de engajamento** (frequência de visitas, participação social). Clientes com vínculos contratuais mais curtos e menor interação com as atividades principais e sociais da academia (como os perfis \"Jovens e Novos\" e aqueles com \"Alto Gasto Extra, mas Baixo Engajamento Geral\") apresentam as maiores taxas de evasão. Em contraste, os clientes mais leais demonstram contratos longos e alto engajamento.\n",
        "\n",
        "**Recomendações para a Estratégia de Interação e Retenção:**\n",
        "\n",
        "*   **Interação:** A estratégia deve focar em personalizar a comunicação conforme o perfil do cliente, fortalecer o senso de comunidade através de atividades em grupo e melhorar o processo de onboarding para novos membros, visando aumentar o engajamento inicial.\n",
        "*   **Retenção:** As ações devem centrar-se em incentivar a adesão a contratos mais longos, especialmente para os grupos de maior risco, implementar programas de fidelidade que recompensem a permanência e o uso, e monitorar proativamente o engajamento para intervenções precoces, além de manter a alta satisfação dos clientes já fidelizados."
      ]
    }
  ],
  "metadata": {
    "kernelspec": {
      "display_name": "Python 3",
      "language": "python",
      "name": "python3"
    },
    "language_info": {
      "codemirror_mode": {
        "name": "ipython",
        "version": 3
      },
      "file_extension": ".py",
      "mimetype": "text/x-python",
      "name": "python",
      "nbconvert_exporter": "python",
      "pygments_lexer": "ipython3",
      "version": "3.12.5"
    }
  },
  "nbformat": 4,
  "nbformat_minor": 5
}

