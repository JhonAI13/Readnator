
=== DIRET√ìRIO: Dashboard_web ===

--- ARQUIVO: Dashboard_web\README.md ---
# Dashboard_web
 # An√°lise de Ve√≠culos com Streamlit

Este projeto √© uma aplica√ß√£o interativa desenvolvida em Python utilizando **Streamlit** para explorar um conjunto de dados de ve√≠culos. A ferramenta permite a visualiza√ß√£o e an√°lise dos dados por meio de histogramas, scatter plots, estat√≠sticas descritivas e um mapa de calor da correla√ß√£o.

## üìå Funcionalidades
- **Visualiza√ß√£o dos Dados**: Exibi√ß√£o da base de dados completa.
- **Histograma Interativo**: Permite selecionar uma coluna num√©rica (pre√ßo, ano, od√¥metro, dias) e visualizar sua distribui√ß√£o.
- **Scatter Plot Din√¢mico**: Escolha interativa das vari√°veis para os eixos X e Y, analisando rela√ß√µes entre atributos num√©ricos.
- **Estat√≠sticas Descritivas**: Exibe m√©tricas como m√©dia, desvio padr√£o e quartis para melhor compreens√£o dos dados.
- **Mapa de Calor da Correla√ß√£o**: Gera um heatmap das correla√ß√µes entre vari√°veis num√©ricas com op√ß√£o de download da imagem.

## üìÇ Estrutura do Projeto
```
/
‚îú‚îÄ‚îÄ app.py                # Arquivo principal da aplica√ß√£o Streamlit
‚îú‚îÄ‚îÄ data/
‚îÇ   ‚îú‚îÄ‚îÄ vehicles.csv      # Base de dados utilizada na an√°lise
‚îú‚îÄ‚îÄ requirements.txt      # Depend√™ncias do projeto
‚îú‚îÄ‚îÄ README.md             # Documenta√ß√£o do projeto
```

## üöÄ Como Executar
### 1Ô∏è‚É£ Instale as depend√™ncias
Certifique-se de que possui o Python instalado e execute:
```bash
pip install -r requirements.txt
```

### 2Ô∏è‚É£ Execute a aplica√ß√£o
```bash
streamlit run app.py
```

Acesse no navegador:
```
http://localhost:8501
```

## üîß Depend√™ncias
As principais bibliotecas utilizadas s√£o:
- **Streamlit** (interface interativa)
- **Pandas** (manipula√ß√£o de dados)
- **NumPy** (opera√ß√µes matem√°ticas)
- **Matplotlib** (visualiza√ß√£o de dados)

Instale todas as depend√™ncias com:
```bash
pip install -r requirements.txt
```

## üìå Observa√ß√µes
- Certifique-se de que o arquivo `vehicles.csv` est√° presente na pasta `data/`.
- Se estiver rodando no **Render**, n√£o defina manualmente `serverAddress` e `serverPort`, pois a plataforma configura isso automaticamente.

## üìÑ Licen√ßa
Este projeto est√° sob a licen√ßa MIT. Sinta-se √† vontade para modificar e utilizar conforme necess√°rio.

---
Desenvolvido com ‚ù§Ô∏è usando Python & Streamlit üöÄ



--- ARQUIVO: Dashboard_web\app.py ---
import streamlit as st
import pandas as pd, numpy as np, matplotlib.pyplot as plt
from io import BytesIO

@st.cache_data
def load_data(path):
    return pd.read_csv(path)

# Carrega os dados e renomeia as colunas para padronizar
file_path = "data/vehicles.csv"
df = load_data(file_path)
df.columns = ['price', 'year', 'model', 'condition', 'cylinders', 'fuel',
              'odometer', 'transmission', 'body', 'color', 'extra', 'date', 'days']

# Converte para num√©rico as colunas relevantes
for col in ['price', 'year', 'cylinders', 'odometer', 'extra', 'days']:
    df[col] = pd.to_numeric(df[col], errors='coerce')

st.title("An√°lise de Ve√≠culos")
st.write("""### Funcionalidades  
- Visualiza√ß√£o dos Dados  
    Exibe o DataFrame completo com as informa√ß√µes dos ve√≠culos.  
- Histograma Interativo  
    Permite selecionar uma coluna num√©rica (pre√ßo, ano, od√¥metro, dias) e visualizar sua distribui√ß√£o.  
- Scatter Plot Din√¢mico  
    Escolha interativa das vari√°veis para os eixos X e Y, analisando rela√ß√µes entre atributos num√©ricos.  
- Estat√≠sticas Descritivas  
    Exibe m√©tricas como m√©dia, desvio padr√£o e quartis para melhor compreens√£o dos dados.  
- Mapa de Calor da Correla√ß√£o (com Download)  
    Gera um heatmap das correla√ß√µes entre vari√°veis num√©ricas.  
    Possibilidade de baixar o gr√°fico em PNG para uso posterior.  
---  
""")
# Exibi√ß√£o do DataFrame (opcional)
if st.checkbox("Mostrar DataFrame"):
    st.dataframe(df)

# --- Histograma ---
st.header("Histograma")
# Seletor para escolher a coluna do histograma (contendo apenas colunas num√©ricas relevantes)
hist_col = st.selectbox("Selecione a coluna para o histograma:", ['price', 'year', 'odometer', 'days'])
if hist_col:
    fig, ax = plt.subplots(figsize=(8, 5))
    ax.hist(df[hist_col].dropna(), bins=50, edgecolor="black")
    ax.set_title(f'Histograma de {hist_col}')
    ax.set_xlabel(hist_col)
    ax.set_ylabel("Frequ√™ncia")
    st.pyplot(fig)

# --- Scatter Plot ---
st.header("Scatter Plot")
# Seletores para os eixos X e Y do scatter plot (usando todas as colunas num√©ricas)
num_cols = df.select_dtypes(include=np.number).columns.tolist()
x_scatter = st.selectbox("Selecione o eixo X para o Scatter Plot:", num_cols)
y_scatter = st.selectbox("Selecione o eixo Y para o Scatter Plot:", num_cols)
if x_scatter and y_scatter:
    fig, ax = plt.subplots(figsize=(8, 5))
    dados = df.dropna(subset=[x_scatter, y_scatter])
    ax.scatter(dados[x_scatter], dados[y_scatter], alpha=0.7)
    ax.set_title(f'{x_scatter} vs {y_scatter}')
    ax.set_xlabel(x_scatter)
    ax.set_ylabel(y_scatter)
    ax.grid(True)
    st.pyplot(fig)

# --- Estat√≠sticas Descritivas ---
st.header("Estat√≠sticas Descritivas")
if st.checkbox("Mostrar estat√≠sticas descritivas"):
    st.write(df.describe())

# --- Mapa de Calor da Correla√ß√£o com op√ß√£o de Download ---
st.header("Mapa de Calor da Correla√ß√£o")
if st.checkbox("Mostrar mapa de calor da correla√ß√£o (download)"):
    num_df = df.select_dtypes(include=np.number).dropna()
    if not num_df.empty:
        corr = num_df.corr()
        fig, ax = plt.subplots()
        cax = ax.imshow(corr, cmap="coolwarm", vmin=-1, vmax=1)
        fig.colorbar(cax)
        ax.set_xticks(range(len(corr.columns)))
        ax.set_yticks(range(len(corr.index)))
        ax.set_xticklabels(corr.columns, rotation=45, ha="left")
        ax.set_yticklabels(corr.index)
        for i in range(len(corr)):
            for j in range(len(corr)):
                ax.text(j, i, f"{corr.iloc[i, j]:.2f}", ha="center", va="center", color="black")
        st.pyplot(fig)
        buf = BytesIO()
        fig.savefig(buf, format="png")
        st.download_button("Download mapa de calor", data=buf.getvalue(),
                           file_name="heatmap.png", mime="image/png")
    else:
        st.write("Dados num√©ricos insuficientes para gerar o mapa de calor.")
st.write("[Reposit√≥rio](https://github.com/JhonAI13/Dashboard_web)")


=== DIRET√ìRIO: Dashboard_web\data ===


=== DIRET√ìRIO: Dashboard_web\notebook ===

--- ARQUIVO: Dashboard_web\notebook\EDA.ipynb (sem output) ---
{
  "cells": [
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {},
      "outputs": [],
      "source": [
        "import pandas as pd\n",
        "import numpy as np\n",
        "import matplotlib.pyplot as plt\n",
        "import ipywidgets as widgets\n",
        "\n",
        "df = pd.read_csv(r\"C:\\Users\\jonat\\Documents\\GitHub\\Dashboard_web\\data\\vehicles.csv\")"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {},
      "outputs": [],
      "source": [
        "df"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        "**price:** Valor pelo qual o ve√≠culo est√° sendo anunciado. Geralmente representa o pre√ßo em d√≥lares ou na moeda local.\n",
        "\n",
        "**model_year:** Ano de fabrica√ß√£o ou modelo do ve√≠culo. Por exemplo, ‚Äú2011.0‚Äù indica que o ve√≠culo √© do ano 2011.\n",
        "\n",
        "**model:** Modelo e, em muitos casos, tamb√©m a marca do ve√≠culo. Exemplo: ‚Äúbmw x5‚Äù ou ‚Äúford f-150‚Äù.\n",
        "\n",
        "**condition:** Estado ou condi√ß√£o do ve√≠culo. Os valores podem variar de ‚Äúexcellent‚Äù (excelente), ‚Äúlike new‚Äù (como novo), ‚Äúgood‚Äù (bom), ‚Äúfair‚Äù (razo√°vel) at√© ‚Äúsalvage‚Äù (acidentado ou com problemas).\n",
        "\n",
        "**cylinders:** N√∫mero de cilindros do motor do ve√≠culo. Esse n√∫mero pode dar uma ideia da pot√™ncia e do tipo de motor.\n",
        "\n",
        "**fuel:** Tipo de combust√≠vel utilizado pelo ve√≠culo, como ‚Äúgas‚Äù (gasolina) ou outros combust√≠veis que possam aparecer (diesel, el√©trico, etc).\n",
        "\n",
        "**odometer:** Quilometragem ou milhagem do ve√≠culo. Esse valor indica quantos quil√¥metros ou milhas o ve√≠culo percorreu.\n",
        "\n",
        "**transmission:** Tipo de transmiss√£o do ve√≠culo. Por exemplo, ‚Äúautomatic‚Äù (autom√°tico) ou ‚Äúmanual‚Äù.\n",
        "\n",
        "**type:** Tipo de ve√≠culo, como ‚ÄúSUV‚Äù, ‚Äúsedan‚Äù, ‚Äúpickup‚Äù, entre outros. Essa coluna ajuda a identificar a categoria ou formato do ve√≠culo.\n",
        "\n",
        "**paint_color:** Cor da pintura do ve√≠culo. Pode conter valores como ‚Äúblack‚Äù, ‚Äúwhite‚Äù, ‚Äúred‚Äù, etc. Em alguns casos, pode estar ausente (NaN).\n",
        "\n",
        "**is_4wd:** Indicador de se o ve√≠culo possui tra√ß√£o nas quatro rodas (four-wheel drive). Normalmente, valores como 1 podem indicar que possui, enquanto NaN ou 0 indicam o contr√°rio.\n",
        "\n",
        "**date_posted:** Data em que o an√∫ncio foi publicado. Por exemplo, ‚Äú2018-06-23‚Äù indica que o ve√≠culo foi anunciado nesta data.\n",
        "\n",
        "**days_listed:** N√∫mero de dias que o an√∫ncio ficou ativo. Essa informa√ß√£o pode ajudar a entender quanto tempo o ve√≠culo permaneceu no mercado."
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {},
      "outputs": [],
      "source": [
        "# Seleciona automaticamente as colunas num√©ricas do DataFrame\n",
        "num_columns = ['price', 'model_year', 'odometer', 'days_listed']\n",
        "\n",
        "def update_histograma(coluna):\n",
        "    plt.figure(figsize=(8, 5))\n",
        "    # Remove valores ausentes para evitar problemas no dftograma\n",
        "    dados = df[coluna].dropna()\n",
        "    plt.hist(dados, bins=100, edgecolor='black')\n",
        "    plt.xlabel(coluna)\n",
        "    plt.ylabel('Frequ√™ncia')\n",
        "    plt.title(f'dftograma da coluna \"{coluna}\"')\n",
        "    plt.show()\n",
        "\n",
        "# Cria um Dropdown com as colunas num√©ricas\n",
        "dropdown = widgets.Dropdown(\n",
        "    options=num_columns,\n",
        "    value=num_columns[0],\n",
        "    description='Coluna:'\n",
        ")\n",
        "\n",
        "# Cria o widget interativo\n",
        "widgets.interact(update_histograma, coluna=dropdown)"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {},
      "outputs": [],
      "source": [
        "df.columns = ['price', 'year', 'model', 'condition', 'cylinders', 'fuel', \n",
        "              'odometer', 'transmission', 'body', 'color', 'extra', 'date', 'days']\n",
        "\n",
        "# Converte as colunas num√©ricas para o tipo adequado\n",
        "numeric_cols = ['price', 'year', 'cylinders', 'odometer', 'extra', 'days']\n",
        "for col in numeric_cols:\n",
        "    df[col] = pd.to_numeric(df[col], errors='coerce')\n",
        "\n",
        "# Obt√©m as colunas num√©ricas do DataFrame\n",
        "num_columns = df.select_dtypes(include=[np.number]).columns.tolist()\n",
        "\n",
        "# Fun√ß√£o que atualiza o scatter plot para as colunas selecionadas\n",
        "def update_scatter(x_col, y_col):\n",
        "    plt.figure(figsize=(8, 5))\n",
        "    # Filtra os dados removendo as linhas que possuem valores ausentes nas colunas selecionadas\n",
        "    data = df.dropna(subset=[x_col, y_col])\n",
        "    plt.scatter(data[x_col], data[y_col], alpha=0.7)\n",
        "    plt.xlabel(x_col)\n",
        "    plt.ylabel(y_col)\n",
        "    plt.title(f'Scatter Plot: {x_col} vs {y_col}')\n",
        "    plt.grid(True)\n",
        "    plt.show()\n",
        "\n",
        "# Cria dois Dropdowns para escolher as colunas dos eixos X e Y\n",
        "dropdown_x = widgets.Dropdown(\n",
        "    options=num_columns,\n",
        "    value=num_columns[0],\n",
        "    description='Eixo X:'\n",
        ")\n",
        "\n",
        "dropdown_y = widgets.Dropdown(\n",
        "    options=num_columns,\n",
        "    value=num_columns[1] if len(num_columns) > 1 else num_columns[0],\n",
        "    description='Eixo Y:'\n",
        ")\n",
        "\n",
        "# Cria o widget interativo para o scatter plot\n",
        "widgets.interact(update_scatter, x_col=dropdown_x, y_col=dropdown_y)"
      ]
    }
  ],
  "metadata": {
    "kernelspec": {
      "display_name": ".venv",
      "language": "python",
      "name": "python3"
    },
    "language_info": {
      "codemirror_mode": {
        "name": "ipython",
        "version": 3
      },
      "file_extension": ".py",
      "mimetype": "text/x-python",
      "name": "python",
      "nbconvert_exporter": "python",
      "pygments_lexer": "ipython3",
      "version": "3.12.5"
    }
  },
  "nbformat": 4,
  "nbformat_minor": 2
}

--- ARQUIVO: Dashboard_web\requirements.txt ---
pandas
plotly-express
streamlit
nbformat
matplotlib
ipywidgets

# Erros Comuns em Data Analysis

KeyError
- **Ocorre quando**: Tentativa de acesso a chave/coluna inexistente
- **Exemplo**: `df['coluna_inexistente']`
- **Solu√ß√£o**: Verificar `df.columns` ou usar `df.get('coluna')`

ValueError
- **Ocorre quando**: Formato ou valor inadequado
- **Exemplo**: `pd.to_numeric('texto')` ou `np.array([1, 'texto'])`
- **Solu√ß√£o**: Validar dados antes das opera√ß√µes

TypeError
- **Ocorre quando**: Opera√ß√£o com tipo incorreto
- **Exemplo**: `df['coluna'] + 'texto'` (soma num√©rico + string)
- **Solu√ß√£o**: Converter tipos com `astype()` ou `pd.to_numeric()`

IndexError
- **Ocorre quando**: Acesso a √≠ndice fora do range
- **Exemplo**: `array[100]` em array com 10 elementos
- **Solu√ß√£o**: Verificar `len()` antes de acessar √≠ndices

AttributeError
- **Ocorre quando**: Acesso a m√©todo/atributo inexistente
- **Exemplo**: `df.meanz()` em vez de `df.mean()`
- **Solu√ß√£o**: Verificar documenta√ß√£o da biblioteca

MemoryError
- **Ocorre quando**: Esgotamento de mem√≥ria
- **Exemplo**: Carregar arquivo maior que a RAM dispon√≠vel
- **Solu√ß√£o**: Usar `chunksize` ou processamento incremental

SettingWithCopyWarning
- **Ocorre quando**: Modifica√ß√£o em c√≥pia de DataFrame
- **Exemplo**: `df_view = df[df.col > 0]; df_view['nova'] = 1`
- **Solu√ß√£o**: Usar `.copy()` ou loc para modifica√ß√µes

LinAlgError (NumPy)
- **Ocorre quando**: Opera√ß√£o matricial inv√°lida
- **Exemplo**: Inversa de matriz singular
- **Solu√ß√£o**: Verificar determinante ou usar pseudoinversa

MissingDataError (Pandas)
- **Ocorre quando**: Opera√ß√µes com NaN
- **Exemplo**: `df.dropna()` com par√¢metros incorretos
- **Solu√ß√£o**: Usar `fillna()` ou tratamento adequado

 DtypeWarning
- **Ocorre quando**: Mistura de tipos em colunas
- **Exemplo**: Carregar CSV com colunas heterog√™neas
- **Solu√ß√£o**: Especificar `dtype` no carregamento

os Espec√≠ficos de Machine Learning
- `NotFittedError`: Modelo n√£o treinado antes de prever
- `ConvergenceWarning`: Algoritmo n√£o convergiu
- `DataDimensionalityWarning`: Dimens√µes incompat√≠veis

s Pr√°ticas para Evitar Erros
1. Sempre verificar `shape` e `dtypes` dos dados
2. Usar `try-except` em opera√ß√µes cr√≠ticas
3. Validar dados com `assert` statements
4. Utilizar `df.info()` e `df.describe()` regularmente
5. Fazer amostragem em grandes datasets

ks Relacionados
- [[Manipula√ß√£o de Dados]]
- [[Tratamento de Missing Values]]
- [[Otimiza√ß√£o de Mem√≥ria]]

